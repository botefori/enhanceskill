a:8:{s:5:"token";s:6:"3b2dbd";s:6:"parent";N;s:8:"children";a:0:{}s:4:"data";a:14:{s:6:"config";C:62:"Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector":1753:{a:16:{s:8:"app_name";N;s:11:"app_version";N;s:5:"token";s:6:"3b2dbd";s:15:"symfony_version";s:6:"2.6.13";s:4:"name";s:3:"app";s:3:"env";s:3:"dev";s:5:"debug";b:1;s:11:"php_version";s:6:"7.0.26";s:14:"xdebug_enabled";b:0;s:14:"eaccel_enabled";b:0;s:11:"apc_enabled";b:0;s:14:"xcache_enabled";b:0;s:16:"wincache_enabled";b:0;s:20:"zend_opcache_enabled";b:0;s:7:"bundles";a:15:{s:15:"FrameworkBundle";s:71:"/var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle";s:14:"SecurityBundle";s:70:"/var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle";s:10:"TwigBundle";s:66:"/var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle";s:13:"MonologBundle";s:43:"/var/www/html/vendor/symfony/monolog-bundle";s:17:"SwiftmailerBundle";s:47:"/var/www/html/vendor/symfony/swiftmailer-bundle";s:13:"AsseticBundle";s:43:"/var/www/html/vendor/symfony/assetic-bundle";s:14:"DoctrineBundle";s:45:"/var/www/html/vendor/doctrine/doctrine-bundle";s:26:"SensioFrameworkExtraBundle";s:50:"/var/www/html/vendor/sensio/framework-extra-bundle";s:9:"AppBundle";s:27:"/var/www/html/src/AppBundle";s:11:"DebugBundle";s:67:"/var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/DebugBundle";s:17:"WebProfilerBundle";s:73:"/var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle";s:24:"SensioDistributionBundle";s:80:"/var/www/html/vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle";s:21:"SensioGeneratorBundle";s:74:"/var/www/html/vendor/sensio/generator-bundle/Sensio/Bundle/GeneratorBundle";s:22:"DoctrineFixturesBundle";s:54:"/var/www/html/vendor/doctrine/doctrine-fixtures-bundle";s:20:"HautelookAliceBundle";s:43:"/var/www/html/vendor/hautelook/alice-bundle";}s:9:"sapi_name";s:14:"apache2handler";}}s:7:"request";C:63:"Symfony\Component\HttpKernel\DataCollector\RequestDataCollector":3597:{a:18:{s:6:"format";s:4:"html";s:7:"content";s:0:"";s:12:"content_type";s:24:"text/html; charset=UTF-8";s:11:"status_text";s:2:"OK";s:11:"status_code";i:200;s:13:"request_query";a:0:{}s:15:"request_request";a:0:{}s:15:"request_headers";a:14:{s:13:"authorization";a:1:{i:0;s:0:"";}s:4:"host";a:1:{i:0;s:15:"web.site.docker";}s:10:"connection";a:1:{i:0;s:5:"close";}s:9:"x-real-ip";a:1:{i:0;s:10:"172.19.0.1";}s:15:"x-forwarded-for";a:1:{i:0;s:10:"172.19.0.1";}s:17:"x-forwarded-proto";a:1:{i:0;s:4:"http";}s:15:"x-forwarded-ssl";a:1:{i:0;s:3:"off";}s:16:"x-forwarded-port";a:1:{i:0;s:2:"80";}s:10:"user-agent";a:1:{i:0;s:76:"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:51.0) Gecko/20100101 Firefox/51.0";}s:6:"accept";a:1:{i:0;s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";}s:15:"accept-language";a:1:{i:0;s:14:"en-US,en;q=0.5";}s:15:"accept-encoding";a:1:{i:0;s:13:"gzip, deflate";}s:25:"upgrade-insecure-requests";a:1:{i:0;s:1:"1";}s:14:"x-php-ob-level";a:1:{i:0;i:0;}}s:14:"request_server";a:40:{s:10:"SCRIPT_URL";s:12:"/app_dev.php";s:10:"SCRIPT_URI";s:34:"http://web.site.docker/app_dev.php";s:18:"HTTP_AUTHORIZATION";s:0:"";s:9:"HTTP_HOST";s:15:"web.site.docker";s:15:"HTTP_CONNECTION";s:5:"close";s:14:"HTTP_X_REAL_IP";s:10:"172.19.0.1";s:20:"HTTP_X_FORWARDED_FOR";s:10:"172.19.0.1";s:22:"HTTP_X_FORWARDED_PROTO";s:4:"http";s:20:"HTTP_X_FORWARDED_SSL";s:3:"off";s:21:"HTTP_X_FORWARDED_PORT";s:2:"80";s:15:"HTTP_USER_AGENT";s:76:"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:51.0) Gecko/20100101 Firefox/51.0";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.5";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:30:"HTTP_UPGRADE_INSECURE_REQUESTS";s:1:"1";s:4:"PATH";s:60:"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin";s:16:"SERVER_SIGNATURE";s:76:"<address>Apache/2.4.10 (Debian) Server at web.site.docker Port 80</address>
";s:15:"SERVER_SOFTWARE";s:22:"Apache/2.4.10 (Debian)";s:11:"SERVER_NAME";s:15:"web.site.docker";s:11:"SERVER_ADDR";s:10:"172.19.0.5";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:10:"172.19.0.3";s:13:"DOCUMENT_ROOT";s:17:"/var/www/html/web";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:17:"/var/www/html/web";s:12:"SERVER_ADMIN";s:18:"[no address given]";s:15:"SCRIPT_FILENAME";s:29:"/var/www/html/web/app_dev.php";s:11:"REMOTE_PORT";s:5:"36550";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:3:"GET";s:12:"QUERY_STRING";s:0:"";s:11:"REQUEST_URI";s:12:"/app_dev.php";s:11:"SCRIPT_NAME";s:12:"/app_dev.php";s:8:"PHP_SELF";s:12:"/app_dev.php";s:18:"REQUEST_TIME_FLOAT";d:1515351069.2809999;s:12:"REQUEST_TIME";i:1515351069;s:4:"argv";a:0:{}s:4:"argc";i:0;}s:15:"request_cookies";a:0:{}s:18:"request_attributes";a:3:{s:11:"_controller";s:52:"AppBundle\Controller\DinosaurController::indexAction";s:6:"_route";s:13:"dinosaur_list";s:13:"_route_params";a:0:{}}s:16:"response_headers";a:4:{s:13:"cache-control";a:1:{i:0;s:8:"no-cache";}s:4:"date";a:1:{i:0;s:29:"Sun, 07 Jan 2018 18:51:10 GMT";}s:12:"content-type";a:1:{i:0;s:24:"text/html; charset=UTF-8";}s:13:"x-debug-token";a:1:{i:0;s:6:"3b2dbd";}}s:16:"session_metadata";a:0:{}s:18:"session_attributes";a:0:{}s:7:"flashes";a:0:{}s:9:"path_info";s:1:"/";s:10:"controller";a:4:{s:5:"class";s:39:"AppBundle\Controller\DinosaurController";s:6:"method";s:11:"indexAction";s:4:"file";s:61:"/var/www/html/src/AppBundle/Controller/DinosaurController.php";s:4:"line";i:14;}s:6:"locale";s:2:"en";}}s:4:"ajax";C:62:"Symfony\Bundle\FrameworkBundle\DataCollector\AjaxDataCollector":6:{a:0:{}}s:9:"exception";C:65:"Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector":6:{a:0:{}}s:6:"events";C:61:"Symfony\Component\HttpKernel\DataCollector\EventDataCollector":19074:{a:2:{s:16:"called_listeners";a:29:{s:90:"kernel.request.Symfony\Component\HttpKernel\EventListener\DebugHandlersListener::configure";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:64:"Symfony\Component\HttpKernel\EventListener\DebugHandlersListener";s:6:"method";s:9:"configure";s:4:"file";s:109:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/DebugHandlersListener.php";s:4:"line";i:63;s:6:"pretty";s:75:"Symfony\Component\HttpKernel\EventListener\DebugHandlersListener::configure";}s:91:"kernel.request.Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:104:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/ProfilerListener.php";s:4:"line";i:78;s:6:"pretty";s:76:"Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelRequest";}s:81:"kernel.request.Symfony\Component\HttpKernel\EventListener\DumpListener::configure";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:55:"Symfony\Component\HttpKernel\EventListener\DumpListener";s:6:"method";s:9:"configure";s:4:"file";s:100:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/DumpListener.php";s:4:"line";i:40;s:6:"pretty";s:66:"Symfony\Component\HttpKernel\EventListener\DumpListener::configure";}s:92:"kernel.request.Symfony\Bundle\FrameworkBundle\EventListener\SessionListener::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:60:"Symfony\Bundle\FrameworkBundle\EventListener\SessionListener";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:103:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/SessionListener.php";s:4:"line";i:25;s:6:"pretty";s:77:"Symfony\Bundle\FrameworkBundle\EventListener\SessionListener::onKernelRequest";}s:91:"kernel.request.Symfony\Component\HttpKernel\EventListener\FragmentListener::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:59:"Symfony\Component\HttpKernel\EventListener\FragmentListener";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:104:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/FragmentListener.php";s:4:"line";i:56;s:6:"pretty";s:76:"Symfony\Component\HttpKernel\EventListener\FragmentListener::onKernelRequest";}s:89:"kernel.request.Symfony\Component\HttpKernel\EventListener\RouterListener::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:57:"Symfony\Component\HttpKernel\EventListener\RouterListener";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:102:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php";s:4:"line";i:104;s:6:"pretty";s:74:"Symfony\Component\HttpKernel\EventListener\RouterListener::onKernelRequest";}s:89:"kernel.request.Symfony\Component\HttpKernel\EventListener\LocaleListener::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:57:"Symfony\Component\HttpKernel\EventListener\LocaleListener";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:102:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/LocaleListener.php";s:4:"line";i:69;s:6:"pretty";s:74:"Symfony\Component\HttpKernel\EventListener\LocaleListener::onKernelRequest";}s:93:"kernel.request.Symfony\Component\HttpKernel\EventListener\TranslatorListener::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:61:"Symfony\Component\HttpKernel\EventListener\TranslatorListener";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:106:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/TranslatorListener.php";s:4:"line";i:38;s:6:"pretty";s:78:"Symfony\Component\HttpKernel\EventListener\TranslatorListener::onKernelRequest";}s:72:"kernel.request.Symfony\Component\Security\Http\Firewall::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:40:"Symfony\Component\Security\Http\Firewall";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:85:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall.php";s:4:"line";i:54;s:6:"pretty";s:57:"Symfony\Component\Security\Http\Firewall::onKernelRequest";}s:90:"kernel.request.Symfony\Bundle\AsseticBundle\EventListener\RequestListener::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:58:"Symfony\Bundle\AsseticBundle\EventListener\RequestListener";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:77:"/var/www/html/vendor/symfony/assetic-bundle/EventListener/RequestListener.php";s:4:"line";i:23;s:6:"pretty";s:75:"Symfony\Bundle\AsseticBundle\EventListener\RequestListener::onKernelRequest";}s:75:"kernel.request.AppBundle\EventListener\UserAgentSubscriber::onKernelRequest";a:7:{s:5:"event";s:14:"kernel.request";s:4:"type";s:6:"Method";s:5:"class";s:43:"AppBundle\EventListener\UserAgentSubscriber";s:6:"method";s:15:"onKernelRequest";s:4:"file";s:65:"/var/www/html/src/AppBundle/EventListener/UserAgentSubscriber.php";s:4:"line";i:23;s:6:"pretty";s:60:"AppBundle\EventListener\UserAgentSubscriber::onKernelRequest";}s:102:"kernel.controller.Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector::onKernelController";a:7:{s:5:"event";s:17:"kernel.controller";s:4:"type";s:6:"Method";s:5:"class";s:64:"Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector";s:6:"method";s:18:"onKernelController";s:4:"file";s:107:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/DataCollector/RouterDataCollector.php";s:4:"line";i:66;s:6:"pretty";s:84:"Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector::onKernelController";}s:101:"kernel.controller.Symfony\Component\HttpKernel\DataCollector\RequestDataCollector::onKernelController";a:7:{s:5:"event";s:17:"kernel.controller";s:4:"type";s:6:"Method";s:5:"class";s:63:"Symfony\Component\HttpKernel\DataCollector\RequestDataCollector";s:6:"method";s:18:"onKernelController";s:4:"file";s:108:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/DataCollector/RequestDataCollector.php";s:4:"line";i:284;s:6:"pretty";s:83:"Symfony\Component\HttpKernel\DataCollector\RequestDataCollector::onKernelController";}s:105:"kernel.controller.Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener::onKernelController";a:7:{s:5:"event";s:17:"kernel.controller";s:4:"type";s:6:"Method";s:5:"class";s:67:"Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener";s:6:"method";s:18:"onKernelController";s:4:"file";s:87:"/var/www/html/vendor/sensio/framework-extra-bundle/EventListener/ControllerListener.php";s:4:"line";i:51;s:6:"pretty";s:87:"Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener::onKernelController";}s:109:"kernel.controller.Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener::onKernelController";a:7:{s:5:"event";s:17:"kernel.controller";s:4:"type";s:6:"Method";s:5:"class";s:71:"Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener";s:6:"method";s:18:"onKernelController";s:4:"file";s:91:"/var/www/html/vendor/sensio/framework-extra-bundle/EventListener/ParamConverterListener.php";s:4:"line";i:58;s:6:"pretty";s:91:"Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener::onKernelController";}s:104:"kernel.controller.Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener::onKernelController";a:7:{s:5:"event";s:17:"kernel.controller";s:4:"type";s:6:"Method";s:5:"class";s:66:"Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener";s:6:"method";s:18:"onKernelController";s:4:"file";s:86:"/var/www/html/vendor/sensio/framework-extra-bundle/EventListener/HttpCacheListener.php";s:4:"line";i:43;s:6:"pretty";s:86:"Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener::onKernelController";}s:103:"kernel.controller.Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener::onKernelController";a:7:{s:5:"event";s:17:"kernel.controller";s:4:"type";s:6:"Method";s:5:"class";s:65:"Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener";s:6:"method";s:18:"onKernelController";s:4:"file";s:85:"/var/www/html/vendor/sensio/framework-extra-bundle/EventListener/SecurityListener.php";s:4:"line";i:48;s:6:"pretty";s:85:"Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener::onKernelController";}s:103:"kernel.controller.Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener::onKernelController";a:7:{s:5:"event";s:17:"kernel.controller";s:4:"type";s:6:"Method";s:5:"class";s:65:"Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener";s:6:"method";s:18:"onKernelController";s:4:"file";s:85:"/var/www/html/vendor/sensio/framework-extra-bundle/EventListener/TemplateListener.php";s:4:"line";i:53;s:6:"pretty";s:85:"Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener::onKernelController";}s:93:"kernel.response.Symfony\Component\HttpKernel\EventListener\ResponseListener::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:59:"Symfony\Component\HttpKernel\EventListener\ResponseListener";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:104:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/ResponseListener.php";s:4:"line";i:37;s:6:"pretty";s:77:"Symfony\Component\HttpKernel\EventListener\ResponseListener::onKernelResponse";}s:93:"kernel.response.Symfony\Component\Security\Http\RememberMe\ResponseListener::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:59:"Symfony\Component\Security\Http\RememberMe\ResponseListener";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:104:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/RememberMe/ResponseListener.php";s:4:"line";i:28;s:6:"pretty";s:77:"Symfony\Component\Security\Http\RememberMe\ResponseListener::onKernelResponse";}s:100:"kernel.response.Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:66:"Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:86:"/var/www/html/vendor/sensio/framework-extra-bundle/EventListener/HttpCacheListener.php";s:4:"line";i:82;s:6:"pretty";s:84:"Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener::onKernelResponse";}s:93:"kernel.response.Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:104:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/ProfilerListener.php";s:4:"line";i:90;s:6:"pretty";s:77:"Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelResponse";}s:104:"kernel.response.Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:70:"Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:115:"/var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/EventListener/WebDebugToolbarListener.php";s:4:"line";i:59;s:6:"pretty";s:88:"Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener::onKernelResponse";}s:96:"kernel.response.Symfony\Component\HttpKernel\EventListener\SaveSessionListener::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:62:"Symfony\Component\HttpKernel\EventListener\SaveSessionListener";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:107:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/SaveSessionListener.php";s:4:"line";i:47;s:6:"pretty";s:80:"Symfony\Component\HttpKernel\EventListener\SaveSessionListener::onKernelResponse";}s:101:"kernel.response.Symfony\Component\HttpKernel\EventListener\StreamedResponseListener::onKernelResponse";a:7:{s:5:"event";s:15:"kernel.response";s:4:"type";s:6:"Method";s:5:"class";s:67:"Symfony\Component\HttpKernel\EventListener\StreamedResponseListener";s:6:"method";s:16:"onKernelResponse";s:4:"file";s:112:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/StreamedResponseListener.php";s:4:"line";i:32;s:6:"pretty";s:85:"Symfony\Component\HttpKernel\EventListener\StreamedResponseListener::onKernelResponse";}s:102:"kernel.finish_request.Symfony\Component\HttpKernel\EventListener\LocaleListener::onKernelFinishRequest";a:7:{s:5:"event";s:21:"kernel.finish_request";s:4:"type";s:6:"Method";s:5:"class";s:57:"Symfony\Component\HttpKernel\EventListener\LocaleListener";s:6:"method";s:21:"onKernelFinishRequest";s:4:"file";s:102:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/LocaleListener.php";s:4:"line";i:78;s:6:"pretty";s:80:"Symfony\Component\HttpKernel\EventListener\LocaleListener::onKernelFinishRequest";}s:106:"kernel.finish_request.Symfony\Component\HttpKernel\EventListener\TranslatorListener::onKernelFinishRequest";a:7:{s:5:"event";s:21:"kernel.finish_request";s:4:"type";s:6:"Method";s:5:"class";s:61:"Symfony\Component\HttpKernel\EventListener\TranslatorListener";s:6:"method";s:21:"onKernelFinishRequest";s:4:"file";s:106:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/TranslatorListener.php";s:4:"line";i:43;s:6:"pretty";s:84:"Symfony\Component\HttpKernel\EventListener\TranslatorListener::onKernelFinishRequest";}s:102:"kernel.finish_request.Symfony\Component\HttpKernel\EventListener\RouterListener::onKernelFinishRequest";a:7:{s:5:"event";s:21:"kernel.finish_request";s:4:"type";s:6:"Method";s:5:"class";s:57:"Symfony\Component\HttpKernel\EventListener\RouterListener";s:6:"method";s:21:"onKernelFinishRequest";s:4:"file";s:102:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php";s:4:"line";i:95;s:6:"pretty";s:80:"Symfony\Component\HttpKernel\EventListener\RouterListener::onKernelFinishRequest";}s:85:"kernel.finish_request.Symfony\Component\Security\Http\Firewall::onKernelFinishRequest";a:7:{s:5:"event";s:21:"kernel.finish_request";s:4:"type";s:6:"Method";s:5:"class";s:40:"Symfony\Component\Security\Http\Firewall";s:6:"method";s:21:"onKernelFinishRequest";s:4:"file";s:85:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall.php";s:4:"line";i:77;s:6:"pretty";s:63:"Symfony\Component\Security\Http\Firewall::onKernelFinishRequest";}}s:20:"not_called_listeners";a:8:{s:82:"kernel.terminate.Symfony\Component\EventDispatcher\Debug\WrappedListener::__invoke";a:7:{s:5:"event";s:16:"kernel.terminate";s:4:"type";s:6:"Method";s:5:"class";s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";s:6:"method";s:8:"__invoke";s:4:"file";s:100:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/WrappedListener.php";s:4:"line";i:55;s:6:"pretty";s:65:"Symfony\Component\EventDispatcher\Debug\WrappedListener::__invoke";}s:95:"kernel.exception.Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelException";a:7:{s:5:"event";s:16:"kernel.exception";s:4:"type";s:6:"Method";s:5:"class";s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";s:6:"method";s:17:"onKernelException";s:4:"file";s:104:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/ProfilerListener.php";s:4:"line";i:66;s:6:"pretty";s:78:"Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelException";}s:96:"kernel.exception.Symfony\Component\HttpKernel\EventListener\ExceptionListener::onKernelException";a:7:{s:5:"event";s:16:"kernel.exception";s:4:"type";s:6:"Method";s:5:"class";s:60:"Symfony\Component\HttpKernel\EventListener\ExceptionListener";s:6:"method";s:17:"onKernelException";s:4:"file";s:105:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/ExceptionListener.php";s:4:"line";i:40;s:6:"pretty";s:79:"Symfony\Component\HttpKernel\EventListener\ExceptionListener::onKernelException";}s:91:"console.command.Symfony\Component\HttpKernel\EventListener\DebugHandlersListener::configure";a:7:{s:5:"event";s:15:"console.command";s:4:"type";s:6:"Method";s:5:"class";s:64:"Symfony\Component\HttpKernel\EventListener\DebugHandlersListener";s:6:"method";s:9:"configure";s:4:"file";s:109:"/var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/DebugHandlersListener.php";s:4:"line";i:63;s:6:"pretty";s:75:"Symfony\Component\HttpKernel\EventListener\DebugHandlersListener::configure";}s:72:"console.command.Symfony\Bridge\Monolog\Handler\ConsoleHandler::onCommand";a:7:{s:5:"event";s:15:"console.command";s:4:"type";s:6:"Method";s:5:"class";s:45:"Symfony\Bridge\Monolog\Handler\ConsoleHandler";s:6:"method";s:9:"onCommand";s:4:"file";s:90:"/var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/ConsoleHandler.php";s:4:"line";i:121;s:6:"pretty";s:56:"Symfony\Bridge\Monolog\Handler\ConsoleHandler::onCommand";}s:97:"console.terminate.Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener::onTerminate";a:7:{s:5:"event";s:17:"console.terminate";s:4:"type";s:6:"Method";s:5:"class";s:66:"Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener";s:6:"method";s:11:"onTerminate";s:4:"file";s:85:"/var/www/html/vendor/symfony/swiftmailer-bundle/EventListener/EmailSenderListener.php";s:4:"line";i:46;s:6:"pretty";s:79:"Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener::onTerminate";}s:76:"console.terminate.Symfony\Bridge\Monolog\Handler\ConsoleHandler::onTerminate";a:7:{s:5:"event";s:17:"console.terminate";s:4:"type";s:6:"Method";s:5:"class";s:45:"Symfony\Bridge\Monolog\Handler\ConsoleHandler";s:6:"method";s:11:"onTerminate";s:4:"file";s:90:"/var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/ConsoleHandler.php";s:4:"line";i:131;s:6:"pretty";s:58:"Symfony\Bridge\Monolog\Handler\ConsoleHandler::onTerminate";}s:91:"kernel.view.Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener::onKernelView";a:7:{s:5:"event";s:11:"kernel.view";s:4:"type";s:6:"Method";s:5:"class";s:65:"Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener";s:6:"method";s:12:"onKernelView";s:4:"file";s:85:"/var/www/html/vendor/sensio/framework-extra-bundle/EventListener/TemplateListener.php";s:4:"line";i:77;s:6:"pretty";s:79:"Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener::onKernelView";}}}}s:6:"logger";C:62:"Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector":9431:{a:5:{s:11:"error_count";i:0;s:17:"deprecation_count";i:1;s:12:"scream_count";i:0;s:10:"priorities";a:2:{i:100;a:2:{s:5:"count";i:32;s:4:"name";s:5:"DEBUG";}i:200;a:2:{s:5:"count";i:3;s:4:"name";s:4:"INFO";}}s:4:"logs";a:35:{i:0;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:140:"Matched route "dinosaur_list" (parameters: "_controller": "AppBundle\Controller\DinosaurController::indexAction", "_route": "dinosaur_list")";s:8:"priority";i:200;s:12:"priorityName";s:4:"INFO";s:7:"context";a:0:{}}i:1;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:49:"Populated SecurityContext with an anonymous Token";s:8:"priority";i:200;s:12:"priorityName";s:4:"INFO";s:7:"context";a:0:{}}i:2;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:20:"RAAAAAAAWWWWWWWWWWWW";s:8:"priority";i:200;s:12:"priorityName";s:4:"INFO";s:7:"context";a:0:{}}i:3;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:122:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\DebugHandlersListener::configure".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:4;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:123:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:5;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:113:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\DumpListener::configure".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:6;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:124:"Notified event "kernel.request" to listener "Symfony\Bundle\FrameworkBundle\EventListener\SessionListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:7;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:123:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\FragmentListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:8;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:121:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\RouterListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:9;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:121:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\LocaleListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:10;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:125:"Notified event "kernel.request" to listener "Symfony\Component\HttpKernel\EventListener\TranslatorListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:11;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:104:"Notified event "kernel.request" to listener "Symfony\Component\Security\Http\Firewall::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:12;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:122:"Notified event "kernel.request" to listener "Symfony\Bundle\AsseticBundle\EventListener\RequestListener::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:13;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:107:"Notified event "kernel.request" to listener "AppBundle\EventListener\UserAgentSubscriber::onKernelRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:14;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:134:"Notified event "kernel.controller" to listener "Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector::onKernelController".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:15;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:133:"Notified event "kernel.controller" to listener "Symfony\Component\HttpKernel\DataCollector\RequestDataCollector::onKernelController".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:16;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:137:"Notified event "kernel.controller" to listener "Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener::onKernelController".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:17;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:141:"Notified event "kernel.controller" to listener "Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener::onKernelController".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:18;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:136:"Notified event "kernel.controller" to listener "Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener::onKernelController".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:19;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:135:"Notified event "kernel.controller" to listener "Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener::onKernelController".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:20;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:135:"Notified event "kernel.controller" to listener "Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener::onKernelController".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:21;a:5:{s:9:"timestamp";i:1515351069;s:7:"message";s:102:"SELECT t0.id AS id_1, t0.name AS name_2, t0.type AS type_3, t0.imageUrl AS imageUrl_4 FROM dinosaur t0";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:22;a:5:{s:9:"timestamp";i:1515351070;s:7:"message";s:285:"Defining the initRuntime() method in the "form" extension is deprecated since version 1.23. Use the `needs_environment` option to get the Twig_Environment instance in filters, functions, or tests; or explicitly implement Twig_Extension_InitRuntimeInterface if needed (not recommended).";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:5:{s:4:"type";i:16384;s:4:"file";s:55:"/var/www/html/vendor/twig/twig/lib/Twig/Environment.php";s:4:"line";i:836;s:5:"level";i:4352;s:6:"scream";b:1;}}i:23;a:5:{s:9:"timestamp";i:1515351070;s:7:"message";s:36:"Write SecurityContext in the session";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:24;a:5:{s:9:"timestamp";i:1515351070;s:7:"message";s:125:"Notified event "kernel.response" to listener "Symfony\Component\HttpKernel\EventListener\ResponseListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:25;a:5:{s:9:"timestamp";i:1515351070;s:7:"message";s:125:"Notified event "kernel.response" to listener "Symfony\Component\Security\Http\RememberMe\ResponseListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:26;a:5:{s:9:"timestamp";i:1515351070;s:7:"message";s:132:"Notified event "kernel.response" to listener "Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:27;a:5:{s:9:"timestamp";i:1515351070;s:7:"message";s:125:"Notified event "kernel.response" to listener "Symfony\Component\HttpKernel\EventListener\ProfilerListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:28;a:5:{s:9:"timestamp";i:1515351070;s:7:"message";s:136:"Notified event "kernel.response" to listener "Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:29;a:5:{s:9:"timestamp";i:1515351070;s:7:"message";s:128:"Notified event "kernel.response" to listener "Symfony\Component\HttpKernel\EventListener\SaveSessionListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:30;a:5:{s:9:"timestamp";i:1515351070;s:7:"message";s:133:"Notified event "kernel.response" to listener "Symfony\Component\HttpKernel\EventListener\StreamedResponseListener::onKernelResponse".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:31;a:5:{s:9:"timestamp";i:1515351070;s:7:"message";s:134:"Notified event "kernel.finish_request" to listener "Symfony\Component\HttpKernel\EventListener\LocaleListener::onKernelFinishRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:32;a:5:{s:9:"timestamp";i:1515351070;s:7:"message";s:138:"Notified event "kernel.finish_request" to listener "Symfony\Component\HttpKernel\EventListener\TranslatorListener::onKernelFinishRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:33;a:5:{s:9:"timestamp";i:1515351070;s:7:"message";s:134:"Notified event "kernel.finish_request" to listener "Symfony\Component\HttpKernel\EventListener\RouterListener::onKernelFinishRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}i:34;a:5:{s:9:"timestamp";i:1515351070;s:7:"message";s:117:"Notified event "kernel.finish_request" to listener "Symfony\Component\Security\Http\Firewall::onKernelFinishRequest".";s:8:"priority";i:100;s:12:"priorityName";s:5:"DEBUG";s:7:"context";a:0:{}}}}}s:4:"time";C:60:"Symfony\Component\HttpKernel\DataCollector\TimeDataCollector":25125:{a:2:{s:10:"start_time";d:1515351069529.8391;s:6:"events";a:37:{s:11:"__section__";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:2:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:0;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:328;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}i:1;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:330;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:331;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"default";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:14:"kernel.request";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:0;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:55;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"section";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:64:"Symfony\Component\HttpKernel\EventListener\DebugHandlersListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:0;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:0;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:4194304;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:3:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:0;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:0;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:4194304;}i:1;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:325;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:327;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}i:2;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:330;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:331;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:55:"Symfony\Component\HttpKernel\EventListener\DumpListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:0;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:0;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:4194304;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:60:"Symfony\Bundle\FrameworkBundle\EventListener\SessionListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:0;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:4;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:4194304;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:59:"Symfony\Component\HttpKernel\EventListener\FragmentListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:4;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:4;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:4194304;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:57:"Symfony\Component\HttpKernel\EventListener\RouterListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:4;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:23;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:57:"Symfony\Component\HttpKernel\EventListener\LocaleListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:23;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:23;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:61:"Symfony\Component\HttpKernel\EventListener\TranslatorListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:23;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:23;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:40:"Symfony\Component\Security\Http\Firewall";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:23;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:46;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:31:"security.authentication.success";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:45;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:45;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"section";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:58:"Symfony\Bundle\AsseticBundle\EventListener\RequestListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:46;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:46;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:43:"AppBundle\EventListener\UserAgentSubscriber";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:46;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:55;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:4:"dump";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:55;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:55;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"default";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:23:"controller.get_callable";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:56;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:57;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"default";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:17:"kernel.controller";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:63;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:63;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:8388608;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"section";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:64:"Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:63;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:63;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:8388608;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:63:"Symfony\Component\HttpKernel\DataCollector\RequestDataCollector";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:63;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:63;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:8388608;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:67:"Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:63;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:63;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:8388608;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:71:"Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:63;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:63;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:8388608;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:66:"Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:2:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:63;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:63;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:8388608;}i:1;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:325;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:325;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:65:"Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:63;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:63;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:8388608;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:65:"Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:63;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:63;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:8388608;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:10:"controller";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:63;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:317;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"section";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:24:"controller.get_arguments";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:64;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:64;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:8388608;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"default";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:8:"doctrine";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:126;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:190;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:10485760;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:8:"doctrine";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:41:"template.twig (dinosaurs/index.html.twig)";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:304;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:317;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:8:"template";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:15:"kernel.response";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:317;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:328;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"section";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:56:"Symfony\Component\Security\Http\Firewall\ContextListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:317;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:318;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:59:"Symfony\Component\HttpKernel\EventListener\ResponseListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:318;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:318;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:59:"Symfony\Component\Security\Http\RememberMe\ResponseListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:318;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:325;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:70:"Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:327;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:328;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:62:"Symfony\Component\HttpKernel\EventListener\SaveSessionListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:328;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:328;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:67:"Symfony\Component\HttpKernel\EventListener\StreamedResponseListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:328;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:328;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:16:"kernel.terminate";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:330;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:331;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"section";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}s:66:"Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener";O:42:"Symfony\Component\Stopwatch\StopwatchEvent":4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:1:{i:0;O:43:"Symfony\Component\Stopwatch\StopwatchPeriod":3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:330;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:330;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:12582912;}}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}}}}s:6:"memory";C:62:"Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector":62:{a:2:{s:6:"memory";i:12582912;s:12:"memory_limit";i:134217728;}}s:6:"router";C:64:"Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector":51:{a:3:{s:8:"redirect";b:0;s:3:"url";N;s:5:"route";N;}}s:4:"form";C:64:"Symfony\Component\Form\Extension\DataCollector\FormDataCollector":71:{a:3:{s:5:"forms";a:0:{}s:13:"forms_by_hash";a:0:{}s:9:"nb_errors";i:0;}}s:2:"db";C:66:"Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector":761:{a:6:{s:7:"queries";a:1:{s:7:"default";a:1:{i:1;a:5:{s:3:"sql";s:102:"SELECT t0.id AS id_1, t0.name AS name_2, t0.type AS type_3, t0.imageUrl AS imageUrl_4 FROM dinosaur t0";s:6:"params";a:0:{}s:5:"types";a:0:{}s:11:"executionMS";d:0.063887834548950195;s:11:"explainable";b:1;}}}s:11:"connections";a:1:{s:7:"default";s:32:"doctrine.dbal.default_connection";}s:8:"managers";a:1:{s:7:"default";s:35:"doctrine.orm.default_entity_manager";}s:8:"entities";a:1:{s:7:"default";a:1:{s:25:"AppBundle\Entity\Dinosaur";s:25:"AppBundle\Entity\Dinosaur";}}s:6:"errors";a:0:{}s:6:"caches";a:4:{s:7:"enabled";b:0;s:11:"log_enabled";b:0;s:6:"counts";a:3:{s:4:"puts";i:0;s:4:"hits";i:0;s:6:"misses";i:0;}s:7:"regions";a:3:{s:4:"puts";a:0:{}s:4:"hits";a:0:{}s:6:"misses";a:0:{}}}}}s:11:"swiftmailer";C:67:"Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector":77:{a:3:{s:6:"mailer";a:0:{}s:12:"messageCount";i:0;s:13:"defaultMailer";s:0:"";}}s:8:"security";C:65:"Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector":184:{a:5:{s:7:"enabled";b:1;s:13:"authenticated";b:1;s:11:"token_class";s:67:"Symfony\Component\Security\Core\Authentication\Token\AnonymousToken";s:4:"user";s:5:"anon.";s:5:"roles";a:0:{}}}s:4:"dump";C:60:"Symfony\Component\HttpKernel\DataCollector\DumpDataCollector":738188:{a:1:{i:0;a:5:{s:4:"data";O:39:"Symfony\Component\VarDumper\Cloner\Data":4:{s:45:" Symfony\Component\VarDumper\Cloner\Data data";a:593:{i:0;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:51:"Symfony\Component\HttpKernel\Event\GetResponseEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:209;s:8:"refCount";i:0;s:8:"position";i:1;}}i:1;a:7:{s:61:" Symfony\Component\HttpKernel\Event\GetResponseEvent response";N;s:54:" Symfony\Component\HttpKernel\Event\KernelEvent kernel";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:73:"Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:224;s:8:"refCount";i:1;s:8:"position";i:2;}s:55:" Symfony\Component\HttpKernel\Event\KernelEvent request";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:40:"Symfony\Component\HttpFoundation\Request";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:9;s:8:"refCount";i:3;s:8:"position";i:3;}s:59:" Symfony\Component\HttpKernel\Event\KernelEvent requestType";i:1;s:59:" Symfony\Component\EventDispatcher\Event propagationStopped";b:0;s:51:" Symfony\Component\EventDispatcher\Event dispatcher";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:63:"Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:222;s:8:"refCount";i:1;s:8:"position";i:4;}s:45:" Symfony\Component\EventDispatcher\Event name";s:14:"kernel.request";}i:2;a:4:{s:12:" * container";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:27:"appDevDebugProjectContainer";s:5:"value";N;s:3:"cut";i:12;s:6:"handle";i:227;s:8:"refCount";i:23;s:8:"position";i:0;}s:13:" * dispatcher";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:59:"Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:223;s:8:"refCount";i:15;s:8:"position";i:5;}s:11:" * resolver";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:67:"Symfony\Component\HttpKernel\Controller\TraceableControllerResolver";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:214;s:8:"refCount";i:0;s:8:"position";i:6;}s:15:" * requestStack";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:45:"Symfony\Component\HttpFoundation\RequestStack";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:210;s:8:"refCount";i:5;s:8:"position";i:7;}}i:3;a:21:{s:10:"attributes";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:45:"Symfony\Component\HttpFoundation\ParameterBag";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:12;s:8:"refCount";i:0;s:8:"position";i:8;}s:7:"request";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:45:"Symfony\Component\HttpFoundation\ParameterBag";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:10;s:8:"refCount";i:0;s:8:"position";i:9;}s:5:"query";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:45:"Symfony\Component\HttpFoundation\ParameterBag";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:11;s:8:"refCount";i:0;s:8:"position";i:10;}s:6:"server";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\HttpFoundation\ServerBag";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:15;s:8:"refCount";i:0;s:8:"position";i:11;}s:5:"files";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:40:"Symfony\Component\HttpFoundation\FileBag";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:14;s:8:"refCount";i:0;s:8:"position";i:12;}s:7:"cookies";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:45:"Symfony\Component\HttpFoundation\ParameterBag";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:13;s:8:"refCount";i:0;s:8:"position";i:13;}s:7:"headers";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\HttpFoundation\HeaderBag";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:16;s:8:"refCount";i:0;s:8:"position";i:14;}s:10:" * content";N;s:12:" * languages";N;s:11:" * charsets";N;s:12:" * encodings";N;s:25:" * acceptableContentTypes";N;s:11:" * pathInfo";s:1:"/";s:13:" * requestUri";s:12:"/app_dev.php";s:10:" * baseUrl";s:12:"/app_dev.php";s:11:" * basePath";N;s:9:" * method";s:3:"GET";s:9:" * format";N;s:10:" * session";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:48:"Symfony\Component\HttpFoundation\Session\Session";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:137;s:8:"refCount";i:0;s:8:"position";i:15;}s:9:" * locale";N;s:16:" * defaultLocale";s:2:"en";}i:4;a:5:{s:74:" Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher container";r:1126;s:76:" Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher listenerIds";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:8;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:16;}s:74:" Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher listeners";a:0:{}s:57:" Symfony\Component\EventDispatcher\EventDispatcher sorted";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:17;}s:60:" Symfony\Component\EventDispatcher\EventDispatcher listeners";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:18;}}i:5;a:5:{s:9:" * logger";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:29:"Symfony\Bridge\Monolog\Logger";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:219;s:8:"refCount";i:0;s:8:"position";i:19;}s:12:" * stopwatch";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:37:"Symfony\Component\Stopwatch\Stopwatch";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:221;s:8:"refCount";i:14;s:8:"position";i:20;}s:72:" Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher called";a:0:{}s:76:" Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher dispatcher";r:1116;s:82:" Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher wrappedListeners";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:21;}}i:6;a:2:{s:77:" Symfony\Component\HttpKernel\Controller\TraceableControllerResolver resolver";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:60:"Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:213;s:8:"refCount";i:0;s:8:"position";i:22;}s:78:" Symfony\Component\HttpKernel\Controller\TraceableControllerResolver stopwatch";r:1272;}i:7;a:1:{s:55:" Symfony\Component\HttpFoundation\RequestStack requests";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:23;}}i:8;a:1:{s:13:" * parameters";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:24;}}i:9;a:1:{s:13:" * parameters";a:0:{}}i:10;a:1:{s:13:" * parameters";a:0:{}}i:11;a:1:{s:13:" * parameters";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:40;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:25;}}i:12;a:1:{s:13:" * parameters";a:0:{}}i:13;a:1:{s:13:" * parameters";a:0:{}}i:14;a:2:{s:10:" * headers";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:14;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:26;}s:15:" * cacheControl";a:0:{}}i:15;a:3:{s:10:" * storage";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:69:"Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:136;s:8:"refCount";i:0;s:8:"position";i:27;}s:59:" Symfony\Component\HttpFoundation\Session\Session flashName";s:7:"flashes";s:63:" Symfony\Component\HttpFoundation\Session\Session attributeName";s:10:"attributes";}i:16;a:8:{s:17:"kernel.controller";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:7;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:28;}s:15:"kernel.response";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:7;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:29;}s:21:"kernel.finish_request";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:30;}s:16:"kernel.exception";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:31;}s:16:"kernel.terminate";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:32;}s:15:"console.command";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:33;}s:17:"console.terminate";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:34;}s:11:"kernel.view";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:35;}}i:17;a:2:{s:14:"kernel.request";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:11;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:36;}s:31:"security.authentication.success";a:0:{}}i:18;a:3:{s:14:"kernel.request";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:9;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:37;}s:16:"kernel.exception";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:38;}s:15:"kernel.response";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:39;}}i:19;a:4:{s:7:" * name";s:5:"event";s:11:" * handlers";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:40;}s:13:" * processors";a:0:{}s:24:" * microsecondTimestamps";b:1;}i:20;a:2:{s:47:" Symfony\Component\Stopwatch\Stopwatch sections";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:41;}s:53:" Symfony\Component\Stopwatch\Stopwatch activeSections";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:42;}}i:21;a:1:{s:14:"kernel.request";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:11;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:43;}}i:22;a:3:{s:12:" * container";r:1126;s:9:" * parser";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:62:"Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:212;s:8:"refCount";i:0;s:8:"position";i:44;}s:66:" Symfony\Component\HttpKernel\Controller\ControllerResolver logger";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:29:"Symfony\Bridge\Monolog\Logger";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:211;s:8:"refCount";i:1;s:8:"position";i:45;}}i:23;a:1:{i:0;r:1106;}i:24;a:3:{s:11:"_controller";s:52:"AppBundle\Controller\DinosaurController::indexAction";s:6:"_route";s:13:"dinosaur_list";s:13:"_route_params";a:0:{}}i:25;a:40:{s:10:"SCRIPT_URL";s:12:"/app_dev.php";s:10:"SCRIPT_URI";s:34:"http://web.site.docker/app_dev.php";s:18:"HTTP_AUTHORIZATION";s:0:"";s:9:"HTTP_HOST";s:15:"web.site.docker";s:15:"HTTP_CONNECTION";s:5:"close";s:14:"HTTP_X_REAL_IP";s:10:"172.19.0.1";s:20:"HTTP_X_FORWARDED_FOR";s:10:"172.19.0.1";s:22:"HTTP_X_FORWARDED_PROTO";s:4:"http";s:20:"HTTP_X_FORWARDED_SSL";s:3:"off";s:21:"HTTP_X_FORWARDED_PORT";s:2:"80";s:15:"HTTP_USER_AGENT";s:76:"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:51.0) Gecko/20100101 Firefox/51.0";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.5";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:30:"HTTP_UPGRADE_INSECURE_REQUESTS";s:1:"1";s:4:"PATH";s:60:"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin";s:16:"SERVER_SIGNATURE";s:76:"<address>Apache/2.4.10 (Debian) Server at web.site.docker Port 80</address>
";s:15:"SERVER_SOFTWARE";s:22:"Apache/2.4.10 (Debian)";s:11:"SERVER_NAME";s:15:"web.site.docker";s:11:"SERVER_ADDR";s:10:"172.19.0.5";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:10:"172.19.0.3";s:13:"DOCUMENT_ROOT";s:17:"/var/www/html/web";s:14:"REQUEST_SCHEME";s:4:"http";s:14:"CONTEXT_PREFIX";s:0:"";s:21:"CONTEXT_DOCUMENT_ROOT";s:17:"/var/www/html/web";s:12:"SERVER_ADMIN";s:18:"[no address given]";s:15:"SCRIPT_FILENAME";s:29:"/var/www/html/web/app_dev.php";s:11:"REMOTE_PORT";s:5:"36550";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.1";s:14:"REQUEST_METHOD";s:3:"GET";s:12:"QUERY_STRING";s:0:"";s:11:"REQUEST_URI";s:12:"/app_dev.php";s:11:"SCRIPT_NAME";s:12:"/app_dev.php";s:8:"PHP_SELF";s:12:"/app_dev.php";s:18:"REQUEST_TIME_FLOAT";d:1515351069.2809999;s:12:"REQUEST_TIME";i:1515351069;s:4:"argv";a:0:{}s:4:"argc";i:0;}i:26;a:14:{s:13:"authorization";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:46;}s:4:"host";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:47;}s:10:"connection";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:48;}s:9:"x-real-ip";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:49;}s:15:"x-forwarded-for";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:50;}s:17:"x-forwarded-proto";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:51;}s:15:"x-forwarded-ssl";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:52;}s:16:"x-forwarded-port";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:53;}s:10:"user-agent";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:54;}s:6:"accept";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:55;}s:15:"accept-language";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:56;}s:15:"accept-encoding";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:57;}s:25:"upgrade-insecure-requests";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:58;}s:14:"x-php-ob-level";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:59;}}i:27;a:5:{s:7:" * bags";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:60;}s:10:" * started";b:0;s:9:" * closed";b:0;s:14:" * saveHandler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:74:"Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:134;s:8:"refCount";i:0;s:8:"position";i:61;}s:14:" * metadataBag";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:60:"Symfony\Component\HttpFoundation\Session\Storage\MetadataBag";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:135;s:8:"refCount";i:0;s:8:"position";i:62;}}i:28;a:7:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:63;}i:1;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:64;}i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:65;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:66;}i:4;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:67;}i:5;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:68;}i:6;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:69;}}i:29;a:7:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:70;}i:1;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:71;}i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:72;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:73;}i:4;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:74;}i:5;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:75;}i:6;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:76;}}i:30;a:4:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:77;}i:1;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:78;}i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:79;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:80;}}i:31;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:81;}i:1;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:82;}}i:32;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:83;}i:1;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:84;}}i:33;a:3:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:85;}i:1;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:86;}i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:87;}}i:34;a:3:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:88;}i:1;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:89;}i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:90;}}i:35;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:91;}}i:36;a:11:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:159;s:8:"refCount";i:2;s:8:"position";i:92;}i:1;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:158;s:8:"refCount";i:2;s:8:"position";i:93;}i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:157;s:8:"refCount";i:2;s:8:"position";i:94;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:156;s:8:"refCount";i:2;s:8:"position";i:95;}i:4;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:155;s:8:"refCount";i:2;s:8:"position";i:96;}i:5;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:154;s:8:"refCount";i:2;s:8:"position";i:97;}i:6;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:153;s:8:"refCount";i:2;s:8:"position";i:98;}i:7;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:152;s:8:"refCount";i:2;s:8:"position";i:99;}i:8;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:151;s:8:"refCount";i:2;s:8:"position";i:100;}i:9;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:150;s:8:"refCount";i:2;s:8:"position";i:101;}i:10;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:149;s:8:"refCount";i:2;s:8:"position";i:102;}}i:37;a:9:{i:2048;a:0:{}i:1024;a:0:{}i:128;a:0:{}i:48;a:0:{}i:32;a:0:{}i:16;a:0:{}i:10;a:0:{}i:8;a:0:{}i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:11;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:103;}}i:38;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:104;}}i:39;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:105;}}i:40;a:3:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:43:"Symfony\Bridge\Monolog\Handler\DebugHandler";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:215;s:8:"refCount";i:5;s:8:"position";i:106;}i:1;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:29:"Monolog\Handler\StreamHandler";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:216;s:8:"refCount";i:5;s:8:"position";i:107;}i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:45:"Symfony\Bridge\Monolog\Handler\ConsoleHandler";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:218;s:8:"refCount";i:5;s:8:"position";i:108;}}i:41;a:1:{s:8:"__root__";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:35:"Symfony\Component\Stopwatch\Section";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:220;s:8:"refCount";i:1;s:8:"position";i:109;}}i:42;a:2:{s:8:"__root__";r:2089;i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:35:"Symfony\Component\Stopwatch\Section";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:147;s:8:"refCount";i:1;s:8:"position";i:110;}}i:43;a:11:{i:0;r:1940;i:1;r:1948;i:2;r:1956;i:3;r:1964;i:4;r:1972;i:5;r:1980;i:6;r:1988;i:7;r:1996;i:8;r:2004;i:9;r:2012;i:10;r:2020;}i:44;a:1:{s:9:" * kernel";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:9:"AppKernel";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:8;s:8:"refCount";i:2;s:8:"position";i:111;}}i:45;a:4:{s:7:" * name";s:7:"request";s:11:" * handlers";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:112;}s:13:" * processors";a:0:{}s:24:" * microsecondTimestamps";b:1;}i:46;a:1:{i:0;s:0:"";}i:47;a:1:{i:0;s:15:"web.site.docker";}i:48;a:1:{i:0;s:5:"close";}i:49;a:1:{i:0;s:10:"172.19.0.1";}i:50;a:1:{i:0;s:10:"172.19.0.1";}i:51;a:1:{i:0;s:4:"http";}i:52;a:1:{i:0;s:3:"off";}i:53;a:1:{i:0;s:2:"80";}i:54;a:1:{i:0;s:76:"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:51.0) Gecko/20100101 Firefox/51.0";}i:55;a:1:{i:0;s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";}i:56;a:1:{i:0;s:14:"en-US,en;q=0.5";}i:57;a:1:{i:0;s:13:"gzip, deflate";}i:58;a:1:{i:0;s:1:"1";}i:59;a:1:{i:0;i:0;}i:60;a:2:{s:10:"attributes";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:63:"Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:132;s:8:"refCount";i:0;s:8:"position";i:113;}s:7:"flashes";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:55:"Symfony\Component\HttpFoundation\Session\Flash\FlashBag";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:131;s:8:"refCount";i:0;s:8:"position";i:114;}}i:61;a:4:{s:10:" * handler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:14:"SessionHandler";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:133;s:8:"refCount";i:0;s:8:"position";i:0;}s:10:" * wrapper";b:1;s:9:" * active";b:0;s:18:" * saveHandlerName";s:5:"files";}i:62;a:5:{s:66:" Symfony\Component\HttpFoundation\Session\Storage\MetadataBag name";s:10:"__metadata";s:72:" Symfony\Component\HttpFoundation\Session\Storage\MetadataBag storageKey";s:9:"_sf2_meta";s:7:" * meta";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:115;}s:70:" Symfony\Component\HttpFoundation\Session\Storage\MetadataBag lastUsed";N;s:77:" Symfony\Component\HttpFoundation\Session\Storage\MetadataBag updateThreshold";s:1:"0";}i:63;a:3:{i:0;s:21:"data_collector.router";i:1;s:18:"onKernelController";i:2;i:0;}i:64;a:3:{i:0;s:22:"data_collector.request";i:1;s:18:"onKernelController";i:2;i:0;}i:65;a:3:{i:0;s:42:"sensio_framework_extra.controller.listener";i:1;s:18:"onKernelController";i:2;i:0;}i:66;a:3:{i:0;s:41:"sensio_framework_extra.converter.listener";i:1;s:18:"onKernelController";i:2;i:0;}i:67;a:3:{i:0;s:36:"sensio_framework_extra.view.listener";i:1;s:18:"onKernelController";i:2;i:-128;}i:68;a:3:{i:0;s:37:"sensio_framework_extra.cache.listener";i:1;s:18:"onKernelController";i:2;i:0;}i:69;a:3:{i:0;s:40:"sensio_framework_extra.security.listener";i:1;s:18:"onKernelController";i:2;i:0;}i:70;a:3:{i:0;s:17:"response_listener";i:1;s:16:"onKernelResponse";i:2;i:0;}i:71;a:3:{i:0;s:26:"streamed_response_listener";i:1;s:16:"onKernelResponse";i:2;i:-1024;}i:72;a:3:{i:0;s:21:"session.save_listener";i:1;s:16:"onKernelResponse";i:2;i:-1000;}i:73;a:3:{i:0;s:17:"profiler_listener";i:1;s:16:"onKernelResponse";i:2;i:-100;}i:74;a:3:{i:0;s:37:"security.rememberme.response_listener";i:1;s:16:"onKernelResponse";i:2;i:0;}i:75;a:3:{i:0;s:37:"sensio_framework_extra.cache.listener";i:1;s:16:"onKernelResponse";i:2;i:0;}i:76;a:3:{i:0;s:26:"web_profiler.debug_toolbar";i:1;s:16:"onKernelResponse";i:2;i:-128;}i:77;a:3:{i:0;s:15:"locale_listener";i:1;s:21:"onKernelFinishRequest";i:2;i:0;}i:78;a:3:{i:0;s:19:"translator_listener";i:1;s:21:"onKernelFinishRequest";i:2;i:0;}i:79;a:3:{i:0;s:15:"router_listener";i:1;s:21:"onKernelFinishRequest";i:2;i:0;}i:80;a:3:{i:0;s:17:"security.firewall";i:1;s:21:"onKernelFinishRequest";i:2;i:0;}i:81;a:3:{i:0;s:17:"profiler_listener";i:1;s:17:"onKernelException";i:2;i:0;}i:82;a:3:{i:0;s:23:"twig.exception_listener";i:1;s:17:"onKernelException";i:2;i:-128;}i:83;a:3:{i:0;s:17:"profiler_listener";i:1;s:17:"onKernelTerminate";i:2;i:-1024;}i:84;a:3:{i:0;s:33:"swiftmailer.email_sender.listener";i:1;s:11:"onTerminate";i:2;i:0;}i:85;a:3:{i:0;s:29:"debug.debug_handlers_listener";i:1;s:9:"configure";i:2;i:2048;}i:86;a:3:{i:0;s:23:"monolog.handler.console";i:1;s:9:"onCommand";i:2;i:255;}i:87;a:3:{i:0;s:36:"monolog.handler.console_very_verbose";i:1;s:9:"onCommand";i:2;i:255;}i:88;a:3:{i:0;s:23:"monolog.handler.console";i:1;s:11:"onTerminate";i:2;i:-255;}i:89;a:3:{i:0;s:36:"monolog.handler.console_very_verbose";i:1;s:11:"onTerminate";i:2;i:-255;}i:90;a:3:{i:0;s:33:"swiftmailer.email_sender.listener";i:1;s:11:"onTerminate";i:2;i:0;}i:91;a:3:{i:0;s:36:"sensio_framework_extra.view.listener";i:1;s:12:"onKernelView";i:2;i:0;}i:92;a:6:{s:65:" Symfony\Component\EventDispatcher\Debug\WrappedListener listener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:116;}s:61:" Symfony\Component\EventDispatcher\Debug\WrappedListener name";s:64:"Symfony\Component\HttpKernel\EventListener\DebugHandlersListener";s:63:" Symfony\Component\EventDispatcher\Debug\WrappedListener called";b:1;s:75:" Symfony\Component\EventDispatcher\Debug\WrappedListener stoppedPropagation";b:0;s:66:" Symfony\Component\EventDispatcher\Debug\WrappedListener stopwatch";r:1272;s:67:" Symfony\Component\EventDispatcher\Debug\WrappedListener dispatcher";r:1134;}i:93;a:6:{s:65:" Symfony\Component\EventDispatcher\Debug\WrappedListener listener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:117;}s:61:" Symfony\Component\EventDispatcher\Debug\WrappedListener name";s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";s:63:" Symfony\Component\EventDispatcher\Debug\WrappedListener called";b:1;s:75:" Symfony\Component\EventDispatcher\Debug\WrappedListener stoppedPropagation";b:0;s:66:" Symfony\Component\EventDispatcher\Debug\WrappedListener stopwatch";r:1272;s:67:" Symfony\Component\EventDispatcher\Debug\WrappedListener dispatcher";r:1134;}i:94;a:6:{s:65:" Symfony\Component\EventDispatcher\Debug\WrappedListener listener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:118;}s:61:" Symfony\Component\EventDispatcher\Debug\WrappedListener name";s:55:"Symfony\Component\HttpKernel\EventListener\DumpListener";s:63:" Symfony\Component\EventDispatcher\Debug\WrappedListener called";b:1;s:75:" Symfony\Component\EventDispatcher\Debug\WrappedListener stoppedPropagation";b:0;s:66:" Symfony\Component\EventDispatcher\Debug\WrappedListener stopwatch";r:1272;s:67:" Symfony\Component\EventDispatcher\Debug\WrappedListener dispatcher";r:1134;}i:95;a:6:{s:65:" Symfony\Component\EventDispatcher\Debug\WrappedListener listener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:119;}s:61:" Symfony\Component\EventDispatcher\Debug\WrappedListener name";s:60:"Symfony\Bundle\FrameworkBundle\EventListener\SessionListener";s:63:" Symfony\Component\EventDispatcher\Debug\WrappedListener called";b:1;s:75:" Symfony\Component\EventDispatcher\Debug\WrappedListener stoppedPropagation";b:0;s:66:" Symfony\Component\EventDispatcher\Debug\WrappedListener stopwatch";r:1272;s:67:" Symfony\Component\EventDispatcher\Debug\WrappedListener dispatcher";r:1134;}i:96;a:6:{s:65:" Symfony\Component\EventDispatcher\Debug\WrappedListener listener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:120;}s:61:" Symfony\Component\EventDispatcher\Debug\WrappedListener name";s:59:"Symfony\Component\HttpKernel\EventListener\FragmentListener";s:63:" Symfony\Component\EventDispatcher\Debug\WrappedListener called";b:1;s:75:" Symfony\Component\EventDispatcher\Debug\WrappedListener stoppedPropagation";b:0;s:66:" Symfony\Component\EventDispatcher\Debug\WrappedListener stopwatch";r:1272;s:67:" Symfony\Component\EventDispatcher\Debug\WrappedListener dispatcher";r:1134;}i:97;a:6:{s:65:" Symfony\Component\EventDispatcher\Debug\WrappedListener listener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:121;}s:61:" Symfony\Component\EventDispatcher\Debug\WrappedListener name";s:57:"Symfony\Component\HttpKernel\EventListener\RouterListener";s:63:" Symfony\Component\EventDispatcher\Debug\WrappedListener called";b:1;s:75:" Symfony\Component\EventDispatcher\Debug\WrappedListener stoppedPropagation";b:0;s:66:" Symfony\Component\EventDispatcher\Debug\WrappedListener stopwatch";r:1272;s:67:" Symfony\Component\EventDispatcher\Debug\WrappedListener dispatcher";r:1134;}i:98;a:6:{s:65:" Symfony\Component\EventDispatcher\Debug\WrappedListener listener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:122;}s:61:" Symfony\Component\EventDispatcher\Debug\WrappedListener name";s:57:"Symfony\Component\HttpKernel\EventListener\LocaleListener";s:63:" Symfony\Component\EventDispatcher\Debug\WrappedListener called";b:1;s:75:" Symfony\Component\EventDispatcher\Debug\WrappedListener stoppedPropagation";b:0;s:66:" Symfony\Component\EventDispatcher\Debug\WrappedListener stopwatch";r:1272;s:67:" Symfony\Component\EventDispatcher\Debug\WrappedListener dispatcher";r:1134;}i:99;a:6:{s:65:" Symfony\Component\EventDispatcher\Debug\WrappedListener listener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:123;}s:61:" Symfony\Component\EventDispatcher\Debug\WrappedListener name";s:61:"Symfony\Component\HttpKernel\EventListener\TranslatorListener";s:63:" Symfony\Component\EventDispatcher\Debug\WrappedListener called";b:1;s:75:" Symfony\Component\EventDispatcher\Debug\WrappedListener stoppedPropagation";b:0;s:66:" Symfony\Component\EventDispatcher\Debug\WrappedListener stopwatch";r:1272;s:67:" Symfony\Component\EventDispatcher\Debug\WrappedListener dispatcher";r:1134;}i:100;a:6:{s:65:" Symfony\Component\EventDispatcher\Debug\WrappedListener listener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:124;}s:61:" Symfony\Component\EventDispatcher\Debug\WrappedListener name";s:40:"Symfony\Component\Security\Http\Firewall";s:63:" Symfony\Component\EventDispatcher\Debug\WrappedListener called";b:1;s:75:" Symfony\Component\EventDispatcher\Debug\WrappedListener stoppedPropagation";b:0;s:66:" Symfony\Component\EventDispatcher\Debug\WrappedListener stopwatch";r:1272;s:67:" Symfony\Component\EventDispatcher\Debug\WrappedListener dispatcher";r:1134;}i:101;a:6:{s:65:" Symfony\Component\EventDispatcher\Debug\WrappedListener listener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:125;}s:61:" Symfony\Component\EventDispatcher\Debug\WrappedListener name";s:58:"Symfony\Bundle\AsseticBundle\EventListener\RequestListener";s:63:" Symfony\Component\EventDispatcher\Debug\WrappedListener called";b:1;s:75:" Symfony\Component\EventDispatcher\Debug\WrappedListener stoppedPropagation";b:0;s:66:" Symfony\Component\EventDispatcher\Debug\WrappedListener stopwatch";r:1272;s:67:" Symfony\Component\EventDispatcher\Debug\WrappedListener dispatcher";r:1134;}i:102;a:6:{s:65:" Symfony\Component\EventDispatcher\Debug\WrappedListener listener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:126;}s:61:" Symfony\Component\EventDispatcher\Debug\WrappedListener name";s:43:"AppBundle\EventListener\UserAgentSubscriber";s:63:" Symfony\Component\EventDispatcher\Debug\WrappedListener called";b:1;s:75:" Symfony\Component\EventDispatcher\Debug\WrappedListener stoppedPropagation";b:0;s:66:" Symfony\Component\EventDispatcher\Debug\WrappedListener stopwatch";r:1272;s:67:" Symfony\Component\EventDispatcher\Debug\WrappedListener dispatcher";r:1134;}i:103;a:11:{i:2;r:1940;i:3;r:1948;i:4;r:1956;i:5;r:1964;i:6;r:1972;i:7;r:1980;i:8;r:1988;i:9;r:1996;i:10;r:2004;i:11;r:2012;i:12;r:2020;}i:104;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:127;}}i:105;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:128;}}i:106;a:6:{s:10:" * records";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:129;}s:17:" * recordsByLevel";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:130;}s:8:" * level";i:100;s:9:" * bubble";b:1;s:12:" * formatter";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:31:"Monolog\Formatter\LineFormatter";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:106;s:8:"refCount";i:0;s:8:"position";i:131;}s:13:" * processors";a:0:{}}i:107;a:10:{s:9:" * stream";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:8:"resource";s:5:"class";s:6:"stream";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:223;s:8:"refCount";i:0;s:8:"position";i:132;}s:6:" * url";s:30:"/var/www/html/app/logs/dev.log";s:43:" Monolog\Handler\StreamHandler errorMessage";N;s:17:" * filePermission";N;s:13:" * useLocking";b:0;s:41:" Monolog\Handler\StreamHandler dirCreated";b:1;s:8:" * level";i:100;s:9:" * bubble";b:1;s:12:" * formatter";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:31:"Monolog\Formatter\LineFormatter";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:107;s:8:"refCount";i:0;s:8:"position";i:133;}s:13:" * processors";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:134;}}i:108;a:6:{s:53:" Symfony\Bridge\Monolog\Handler\ConsoleHandler output";N;s:64:" Symfony\Bridge\Monolog\Handler\ConsoleHandler verbosityLevelMap";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:135;}s:8:" * level";i:100;s:9:" * bubble";b:0;s:12:" * formatter";N;s:13:" * processors";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:136;}}i:109;a:4:{s:43:" Symfony\Component\Stopwatch\Section events";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:137;}s:43:" Symfony\Component\Stopwatch\Section origin";N;s:39:" Symfony\Component\Stopwatch\Section id";N;s:45:" Symfony\Component\Stopwatch\Section children";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:138;}}i:110;a:4:{s:43:" Symfony\Component\Stopwatch\Section events";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:14;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:139;}s:43:" Symfony\Component\Stopwatch\Section origin";d:1515351069815.8928;s:39:" Symfony\Component\Stopwatch\Section id";N;s:45:" Symfony\Component\Stopwatch\Section children";a:0:{}}i:111;a:10:{s:10:" * bundles";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:15;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:140;}s:12:" * bundleMap";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:15;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:141;}s:12:" * container";r:1126;s:10:" * rootDir";s:17:"/var/www/html/app";s:14:" * environment";s:3:"dev";s:8:" * debug";b:1;s:9:" * booted";b:1;s:7:" * name";s:3:"app";s:12:" * startTime";d:1515351069.529839;s:17:" * loadClassCache";N;}i:112;a:3:{i:0;r:2064;i:1;r:2072;i:2;r:2080;}i:113;a:3:{s:69:" Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag name";s:10:"attributes";s:75:" Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag storageKey";s:15:"_sf2_attributes";s:13:" * attributes";a:0:{}}i:114;a:3:{s:61:" Symfony\Component\HttpFoundation\Session\Flash\FlashBag name";s:7:"flashes";s:64:" Symfony\Component\HttpFoundation\Session\Flash\FlashBag flashes";a:0:{}s:67:" Symfony\Component\HttpFoundation\Session\Flash\FlashBag storageKey";s:12:"_sf2_flashes";}i:115;a:3:{s:1:"c";i:0;s:1:"u";i:0;s:1:"l";i:0;}i:116;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:64:"Symfony\Component\HttpKernel\EventListener\DebugHandlersListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:167;s:8:"refCount";i:0;s:8:"position";i:142;}i:1;s:9:"configure";}i:117;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:195;s:8:"refCount";i:0;s:8:"position";i:143;}i:1;s:15:"onKernelRequest";}i:118;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:55:"Symfony\Component\HttpKernel\EventListener\DumpListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:161;s:8:"refCount";i:0;s:8:"position";i:144;}i:1;s:9:"configure";}i:119;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:60:"Symfony\Bundle\FrameworkBundle\EventListener\SessionListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:198;s:8:"refCount";i:0;s:8:"position";i:145;}i:1;s:15:"onKernelRequest";}i:120;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:59:"Symfony\Component\HttpKernel\EventListener\FragmentListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:197;s:8:"refCount";i:0;s:8:"position";i:146;}i:1;s:15:"onKernelRequest";}i:121;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:57:"Symfony\Component\HttpKernel\EventListener\RouterListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:168;s:8:"refCount";i:0;s:8:"position";i:147;}i:1;s:15:"onKernelRequest";}i:122;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:57:"Symfony\Component\HttpKernel\EventListener\LocaleListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:205;s:8:"refCount";i:0;s:8:"position";i:148;}i:1;s:15:"onKernelRequest";}i:123;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:61:"Symfony\Component\HttpKernel\EventListener\TranslatorListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:201;s:8:"refCount";i:0;s:8:"position";i:149;}i:1;s:15:"onKernelRequest";}i:124;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:40:"Symfony\Component\Security\Http\Firewall";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:165;s:8:"refCount";i:0;s:8:"position";i:150;}i:1;s:15:"onKernelRequest";}i:125;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:58:"Symfony\Bundle\AsseticBundle\EventListener\RequestListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:208;s:8:"refCount";i:0;s:8:"position";i:0;}i:1;s:15:"onKernelRequest";}i:126;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:43:"AppBundle\EventListener\UserAgentSubscriber";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:207;s:8:"refCount";i:0;s:8:"position";i:151;}i:1;s:15:"onKernelRequest";}i:127;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:58:"Symfony\Component\Security\Http\Firewall\ExceptionListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:81;s:8:"refCount";i:1;s:8:"position";i:152;}i:1;s:17:"onKernelException";}i:128;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:56:"Symfony\Component\Security\Http\Firewall\ContextListener";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:85;s:8:"refCount";i:0;s:8:"position";i:153;}i:1;s:16:"onKernelResponse";}i:129;a:3:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:8;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:154;}i:1;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:8;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:155;}i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:8;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:156;}}i:130;a:1:{i:200;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:157;}}i:131;a:5:{s:9:" * format";s:65:"[%datetime%] %channel%.%level_name%: %message% %context% %extra%
";s:24:" * allowInlineLineBreaks";b:0;s:29:" * ignoreEmptyContextAndExtra";b:0;s:21:" * includeStacktraces";N;s:13:" * dateFormat";s:11:"Y-m-d H:i:s";}i:132;a:10:{s:9:"timed_out";b:0;s:7:"blocked";b:1;s:3:"eof";b:0;s:12:"wrapper_type";s:9:"plainfile";s:11:"stream_type";s:5:"STDIO";s:4:"mode";s:1:"a";s:12:"unread_bytes";i:0;s:8:"seekable";b:1;s:3:"uri";s:30:"/var/www/html/app/logs/dev.log";s:7:"options";a:0:{}}i:133;a:5:{s:9:" * format";s:65:"[%datetime%] %channel%.%level_name%: %message% %context% %extra%
";s:24:" * allowInlineLineBreaks";b:0;s:29:" * ignoreEmptyContextAndExtra";b:0;s:21:" * includeStacktraces";N;s:13:" * dateFormat";s:11:"Y-m-d H:i:s";}i:134;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:40:"Monolog\Processor\PsrLogMessageProcessor";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:217;s:8:"refCount";i:1;s:8:"position";i:0;}}i:135;a:4:{i:2;i:200;i:3;i:100;i:1;i:300;i:4;i:100;}i:136;a:1:{i:0;r:2851;}i:137;a:1:{s:17:"__section__.child";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:148;s:8:"refCount";i:0;s:8:"position";i:158;}}i:138;a:1:{i:0;r:2099;}i:139;a:14:{s:11:"__section__";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:146;s:8:"refCount";i:0;s:8:"position";i:159;}s:14:"kernel.request";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:145;s:8:"refCount";i:0;s:8:"position";i:160;}s:64:"Symfony\Component\HttpKernel\EventListener\DebugHandlersListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:144;s:8:"refCount";i:0;s:8:"position";i:161;}s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:142;s:8:"refCount";i:0;s:8:"position";i:162;}s:55:"Symfony\Component\HttpKernel\EventListener\DumpListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:140;s:8:"refCount";i:0;s:8:"position";i:163;}s:60:"Symfony\Bundle\FrameworkBundle\EventListener\SessionListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:138;s:8:"refCount";i:0;s:8:"position";i:164;}s:59:"Symfony\Component\HttpKernel\EventListener\FragmentListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:129;s:8:"refCount";i:0;s:8:"position";i:165;}s:57:"Symfony\Component\HttpKernel\EventListener\RouterListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:127;s:8:"refCount";i:0;s:8:"position";i:166;}s:57:"Symfony\Component\HttpKernel\EventListener\LocaleListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:109;s:8:"refCount";i:0;s:8:"position";i:167;}s:61:"Symfony\Component\HttpKernel\EventListener\TranslatorListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:111;s:8:"refCount";i:0;s:8:"position";i:168;}s:40:"Symfony\Component\Security\Http\Firewall";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:113;s:8:"refCount";i:0;s:8:"position";i:169;}s:31:"security.authentication.success";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:77;s:8:"refCount";i:0;s:8:"position";i:170;}s:58:"Symfony\Bundle\AsseticBundle\EventListener\RequestListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:74;s:8:"refCount";i:0;s:8:"position";i:171;}s:43:"AppBundle\EventListener\UserAgentSubscriber";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:72;s:8:"refCount";i:0;s:8:"position";i:172;}}i:140;a:15:{s:15:"FrameworkBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:46:"Symfony\Bundle\FrameworkBundle\FrameworkBundle";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:17;s:8:"refCount";i:1;s:8:"position";i:173;}s:14:"SecurityBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:44:"Symfony\Bundle\SecurityBundle\SecurityBundle";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:18;s:8:"refCount";i:1;s:8:"position";i:174;}s:10:"TwigBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:36:"Symfony\Bundle\TwigBundle\TwigBundle";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:19;s:8:"refCount";i:1;s:8:"position";i:175;}s:13:"MonologBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Bundle\MonologBundle\MonologBundle";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:20;s:8:"refCount";i:1;s:8:"position";i:176;}s:17:"SwiftmailerBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:50:"Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:21;s:8:"refCount";i:1;s:8:"position";i:177;}s:13:"AsseticBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Symfony\Bundle\AsseticBundle\AsseticBundle";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:22;s:8:"refCount";i:1;s:8:"position";i:178;}s:14:"DoctrineBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:45:"Doctrine\Bundle\DoctrineBundle\DoctrineBundle";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:23;s:8:"refCount";i:1;s:8:"position";i:179;}s:26:"SensioFrameworkExtraBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:61:"Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:24;s:8:"refCount";i:1;s:8:"position";i:180;}s:9:"AppBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:19:"AppBundle\AppBundle";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:25;s:8:"refCount";i:1;s:8:"position";i:181;}s:11:"DebugBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:38:"Symfony\Bundle\DebugBundle\DebugBundle";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:26;s:8:"refCount";i:1;s:8:"position";i:182;}s:17:"WebProfilerBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:50:"Symfony\Bundle\WebProfilerBundle\WebProfilerBundle";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:27;s:8:"refCount";i:1;s:8:"position";i:183;}s:24:"SensioDistributionBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:57:"Sensio\Bundle\DistributionBundle\SensioDistributionBundle";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:28;s:8:"refCount";i:1;s:8:"position";i:184;}s:21:"SensioGeneratorBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:51:"Sensio\Bundle\GeneratorBundle\SensioGeneratorBundle";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:29;s:8:"refCount";i:1;s:8:"position";i:185;}s:22:"DoctrineFixturesBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:53:"Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:30;s:8:"refCount";i:1;s:8:"position";i:186;}s:20:"HautelookAliceBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:42:"Hautelook\AliceBundle\HautelookAliceBundle";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:31;s:8:"refCount";i:1;s:8:"position";i:187;}}i:141;a:15:{s:15:"FrameworkBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:188;}s:14:"SecurityBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:189;}s:10:"TwigBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:190;}s:13:"MonologBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:191;}s:17:"SwiftmailerBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:192;}s:13:"AsseticBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:193;}s:14:"DoctrineBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:194;}s:26:"SensioFrameworkExtraBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:195;}s:9:"AppBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:196;}s:11:"DebugBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:197;}s:17:"WebProfilerBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:198;}s:24:"SensioDistributionBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:199;}s:21:"SensioGeneratorBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:200;}s:22:"DoctrineFixturesBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:201;}s:20:"HautelookAliceBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:202;}}i:142;a:7:{s:82:" Symfony\Component\HttpKernel\EventListener\DebugHandlersListener exceptionHandler";N;s:72:" Symfony\Component\HttpKernel\EventListener\DebugHandlersListener logger";N;s:72:" Symfony\Component\HttpKernel\EventListener\DebugHandlersListener levels";N;s:73:" Symfony\Component\HttpKernel\EventListener\DebugHandlersListener throwAt";N;s:72:" Symfony\Component\HttpKernel\EventListener\DebugHandlersListener scream";b:1;s:80:" Symfony\Component\HttpKernel\EventListener\DebugHandlersListener fileLinkFormat";b:0;s:75:" Symfony\Component\HttpKernel\EventListener\DebugHandlersListener firstCall";b:0;}i:143;a:9:{s:11:" * profiler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:46:"Symfony\Component\HttpKernel\Profiler\Profiler";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:189;s:8:"refCount";i:0;s:8:"position";i:203;}s:10:" * matcher";N;s:16:" * onlyException";b:0;s:21:" * onlyMasterRequests";b:0;s:12:" * exception";N;s:11:" * requests";a:0:{}s:11:" * profiles";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:16:"SplObjectStorage";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:170;s:8:"refCount";i:0;s:8:"position";i:204;}s:15:" * requestStack";r:1150;s:10:" * parents";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:16:"SplObjectStorage";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:169;s:8:"refCount";i:0;s:8:"position";i:205;}}i:144;a:2:{s:63:" Symfony\Component\HttpKernel\EventListener\DumpListener cloner";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:44:"Symfony\Component\VarDumper\Cloner\VarCloner";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:160;s:8:"refCount";i:0;s:8:"position";i:206;}s:63:" Symfony\Component\HttpKernel\EventListener\DumpListener dumper";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:60:"Symfony\Component\HttpKernel\DataCollector\DumpDataCollector";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:171;s:8:"refCount";i:1;s:8:"position";i:207;}}i:145;a:1:{s:71:" Symfony\Bundle\FrameworkBundle\EventListener\SessionListener container";r:1126;}i:146;a:2:{s:67:" Symfony\Component\HttpKernel\EventListener\FragmentListener signer";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:38:"Symfony\Component\HttpKernel\UriSigner";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:196;s:8:"refCount";i:0;s:8:"position";i:208;}s:73:" Symfony\Component\HttpKernel\EventListener\FragmentListener fragmentPath";s:10:"/_fragment";}i:147;a:5:{s:66:" Symfony\Component\HttpKernel\EventListener\RouterListener matcher";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:45:"Symfony\Bundle\FrameworkBundle\Routing\Router";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:204;s:8:"refCount";i:3;s:8:"position";i:209;}s:66:" Symfony\Component\HttpKernel\EventListener\RouterListener context";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:40:"Symfony\Component\Routing\RequestContext";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:203;s:8:"refCount";i:2;s:8:"position";i:210;}s:65:" Symfony\Component\HttpKernel\EventListener\RouterListener logger";r:1504;s:66:" Symfony\Component\HttpKernel\EventListener\RouterListener request";r:1106;s:71:" Symfony\Component\HttpKernel\EventListener\RouterListener requestStack";r:1150;}i:148;a:3:{s:65:" Symfony\Component\HttpKernel\EventListener\LocaleListener router";r:3301;s:72:" Symfony\Component\HttpKernel\EventListener\LocaleListener defaultLocale";s:2:"en";s:71:" Symfony\Component\HttpKernel\EventListener\LocaleListener requestStack";r:1150;}i:149;a:2:{s:73:" Symfony\Component\HttpKernel\EventListener\TranslatorListener translator";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:48:"Symfony\Component\Translation\IdentityTranslator";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:200;s:8:"refCount";i:0;s:8:"position";i:211;}s:75:" Symfony\Component\HttpKernel\EventListener\TranslatorListener requestStack";r:1150;}i:150;a:3:{s:45:" Symfony\Component\Security\Http\Firewall map";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:50:"Symfony\Bundle\SecurityBundle\Security\FirewallMap";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:164;s:8:"refCount";i:0;s:8:"position";i:212;}s:52:" Symfony\Component\Security\Http\Firewall dispatcher";r:1134;s:60:" Symfony\Component\Security\Http\Firewall exceptionListeners";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:16:"SplObjectStorage";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:162;s:8:"refCount";i:0;s:8:"position";i:213;}}i:151;a:1:{s:51:" AppBundle\EventListener\UserAgentSubscriber logger";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:29:"Symfony\Bridge\Monolog\Logger";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:206;s:8:"refCount";i:0;s:8:"position";i:214;}}i:152;a:8:{s:67:" Symfony\Component\Security\Http\Firewall\ExceptionListener context";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:47:"Symfony\Component\Security\Core\SecurityContext";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:122;s:8:"refCount";i:1;s:8:"position";i:215;}s:71:" Symfony\Component\Security\Http\Firewall\ExceptionListener providerKey";s:7:"default";s:79:" Symfony\Component\Security\Http\Firewall\ExceptionListener accessDeniedHandler";N;s:84:" Symfony\Component\Security\Http\Firewall\ExceptionListener authenticationEntryPoint";N;s:87:" Symfony\Component\Security\Http\Firewall\ExceptionListener authenticationTrustResolver";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:74:"Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:116;s:8:"refCount";i:2;s:8:"position";i:216;}s:69:" Symfony\Component\Security\Http\Firewall\ExceptionListener errorPage";N;s:66:" Symfony\Component\Security\Http\Firewall\ExceptionListener logger";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:29:"Symfony\Bridge\Monolog\Logger";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:112;s:8:"refCount";i:1;s:8:"position";i:217;}s:69:" Symfony\Component\Security\Http\Firewall\ExceptionListener httpUtils";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:41:"Symfony\Component\Security\Http\HttpUtils";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:80;s:8:"refCount";i:0;s:8:"position";i:218;}}i:153;a:6:{s:65:" Symfony\Component\Security\Http\Firewall\ContextListener context";r:3362;s:68:" Symfony\Component\Security\Http\Firewall\ContextListener contextKey";s:7:"default";s:64:" Symfony\Component\Security\Http\Firewall\ContextListener logger";r:3382;s:71:" Symfony\Component\Security\Http\Firewall\ContextListener userProviders";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:219;}s:68:" Symfony\Component\Security\Http\Firewall\ContextListener dispatcher";r:1134;s:68:" Symfony\Component\Security\Http\Firewall\ContextListener registered";b:1;}i:154;a:8:{s:7:"message";s:140:"Matched route "dinosaur_list" (parameters: "_controller": "AppBundle\Controller\DinosaurController::indexAction", "_route": "dinosaur_list")";s:7:"context";a:0:{}s:5:"level";i:200;s:10:"level_name";s:4:"INFO";s:7:"channel";s:7:"request";s:8:"datetime";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:8:"DateTime";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:105;s:8:"refCount";i:1;s:8:"position";i:220;}s:5:"extra";a:0:{}s:9:"formatted";s:183:"[2018-01-07 18:51:09] request.INFO: Matched route "dinosaur_list" (parameters: "_controller": "AppBundle\Controller\DinosaurController::indexAction", "_route": "dinosaur_list") [] []
";}i:155;a:8:{s:7:"message";s:49:"Populated SecurityContext with an anonymous Token";s:7:"context";a:0:{}s:5:"level";i:200;s:10:"level_name";s:4:"INFO";s:7:"channel";s:8:"security";s:8:"datetime";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:8:"DateTime";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:78;s:8:"refCount";i:1;s:8:"position";i:221;}s:5:"extra";a:0:{}s:9:"formatted";s:93:"[2018-01-07 18:51:09] security.INFO: Populated SecurityContext with an anonymous Token [] []
";}i:156;a:8:{s:7:"message";s:20:"RAAAAAAAWWWWWWWWWWWW";s:7:"context";a:0:{}s:5:"level";i:200;s:10:"level_name";s:4:"INFO";s:7:"channel";s:3:"app";s:8:"datetime";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:8:"DateTime";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:71;s:8:"refCount";i:1;s:8:"position";i:222;}s:5:"extra";a:0:{}s:9:"formatted";s:59:"[2018-01-07 18:51:09] app.INFO: RAAAAAAAWWWWWWWWWWWW [] []
";}i:157;a:3:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:8;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:223;}i:1;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:8;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:224;}i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:8;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:225;}}i:158;a:4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:0:{}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"section";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:226;}}i:159;a:4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:0:{}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"default";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:227;}}i:160;a:4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:0:{}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"section";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:228;}}i:161;a:4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:229;}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}i:162;a:4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:230;}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}i:163;a:4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:231;}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}i:164;a:4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:232;}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}i:165;a:4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:233;}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}i:166;a:4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:234;}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}i:167;a:4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:235;}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}i:168;a:4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:236;}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}i:169;a:4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:237;}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}i:170;a:4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:238;}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:7:"section";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}i:171;a:4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:239;}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";a:0:{}}i:172;a:4:{s:51:" Symfony\Component\Stopwatch\StopwatchEvent periods";a:0:{}s:50:" Symfony\Component\Stopwatch\StopwatchEvent origin";d:1515351069815.8999;s:52:" Symfony\Component\Stopwatch\StopwatchEvent category";s:14:"event_listener";s:51:" Symfony\Component\Stopwatch\StopwatchEvent started";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:240;}}i:173;a:4:{s:7:" * name";s:15:"FrameworkBundle";s:12:" * extension";N;s:7:" * path";N;s:12:" * container";r:1126;}i:174;a:4:{s:7:" * name";s:14:"SecurityBundle";s:12:" * extension";N;s:7:" * path";N;s:12:" * container";r:1126;}i:175;a:4:{s:7:" * name";s:10:"TwigBundle";s:12:" * extension";N;s:7:" * path";N;s:12:" * container";r:1126;}i:176;a:4:{s:7:" * name";s:13:"MonologBundle";s:12:" * extension";N;s:7:" * path";N;s:12:" * container";r:1126;}i:177;a:4:{s:7:" * name";s:17:"SwiftmailerBundle";s:12:" * extension";N;s:7:" * path";N;s:12:" * container";r:1126;}i:178;a:4:{s:7:" * name";s:13:"AsseticBundle";s:12:" * extension";N;s:7:" * path";N;s:12:" * container";r:1126;}i:179;a:5:{s:57:" Doctrine\Bundle\DoctrineBundle\DoctrineBundle autoloader";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:7:"Closure";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:226;s:8:"refCount";i:0;s:8:"position";i:241;}s:7:" * name";s:14:"DoctrineBundle";s:12:" * extension";N;s:7:" * path";N;s:12:" * container";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:3:"ref";s:5:"class";s:0:"";s:5:"value";r:1126;s:3:"cut";i:0;s:6:"handle";i:1;s:8:"refCount";i:0;s:8:"position";i:0;}}i:180;a:4:{s:7:" * name";s:26:"SensioFrameworkExtraBundle";s:12:" * extension";N;s:7:" * path";N;s:12:" * container";r:1126;}i:181;a:4:{s:7:" * name";s:9:"AppBundle";s:12:" * extension";N;s:7:" * path";N;s:12:" * container";r:1126;}i:182;a:4:{s:7:" * name";s:11:"DebugBundle";s:12:" * extension";N;s:7:" * path";N;s:12:" * container";r:1126;}i:183;a:4:{s:7:" * name";s:17:"WebProfilerBundle";s:12:" * extension";N;s:7:" * path";N;s:12:" * container";r:1126;}i:184;a:4:{s:7:" * name";s:24:"SensioDistributionBundle";s:12:" * extension";N;s:7:" * path";N;s:12:" * container";r:1126;}i:185;a:4:{s:7:" * name";s:21:"SensioGeneratorBundle";s:12:" * extension";N;s:7:" * path";N;s:12:" * container";r:1126;}i:186;a:4:{s:7:" * name";s:22:"DoctrineFixturesBundle";s:12:" * extension";N;s:7:" * path";N;s:12:" * container";r:1126;}i:187;a:4:{s:7:" * name";s:20:"HautelookAliceBundle";s:12:" * extension";N;s:7:" * path";N;s:12:" * container";r:1126;}i:188;a:1:{i:0;r:2991;}i:189;a:1:{i:0;r:2999;}i:190;a:1:{i:0;r:3007;}i:191;a:1:{i:0;r:3015;}i:192;a:1:{i:0;r:3023;}i:193;a:1:{i:0;r:3031;}i:194;a:1:{i:0;r:3039;}i:195;a:1:{i:0;r:3047;}i:196;a:1:{i:0;r:3055;}i:197;a:1:{i:0;r:3063;}i:198;a:1:{i:0;r:3071;}i:199;a:1:{i:0;r:3079;}i:200;a:1:{i:0;r:3087;}i:201;a:1:{i:0;r:3095;}i:202;a:1:{i:0;r:3103;}i:203;a:4:{s:55:" Symfony\Component\HttpKernel\Profiler\Profiler storage";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:57:"Symfony\Component\HttpKernel\Profiler\FileProfilerStorage";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:188;s:8:"refCount";i:0;s:8:"position";i:242;}s:58:" Symfony\Component\HttpKernel\Profiler\Profiler collectors";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:14;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:243;}s:54:" Symfony\Component\HttpKernel\Profiler\Profiler logger";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:29:"Symfony\Bridge\Monolog\Logger";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:194;s:8:"refCount";i:1;s:8:"position";i:244;}s:55:" Symfony\Component\HttpKernel\Profiler\Profiler enabled";b:1;}i:204;a:1:{s:10:" ~ storage";a:0:{}}i:205;a:1:{s:10:" ~ storage";a:0:{}}i:206;a:6:{s:11:" * maxItems";i:2500;s:12:" * maxString";i:-1;s:9:" * useExt";b:0;s:58:" Symfony\Component\VarDumper\Cloner\AbstractCloner casters";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:51;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:245;}s:67:" Symfony\Component\VarDumper\Cloner\AbstractCloner prevErrorHandler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:246;}s:60:" Symfony\Component\VarDumper\Cloner\AbstractCloner classInfo";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:63;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:247;}}i:207;a:13:{s:71:" Symfony\Component\HttpKernel\DataCollector\DumpDataCollector stopwatch";r:1272;s:76:" Symfony\Component\HttpKernel\DataCollector\DumpDataCollector fileLinkFormat";b:0;s:71:" Symfony\Component\HttpKernel\DataCollector\DumpDataCollector dataCount";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:3:"ref";s:5:"class";s:0:"";s:5:"value";i:0;s:3:"cut";i:0;s:6:"handle";i:2;s:8:"refCount";i:1;s:8:"position";i:0;}s:73:" Symfony\Component\HttpKernel\DataCollector\DumpDataCollector isCollected";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:3:"ref";s:5:"class";s:0:"";s:5:"value";b:1;s:3:"cut";i:0;s:6:"handle";i:3;s:8:"refCount";i:1;s:8:"position";i:0;}s:73:" Symfony\Component\HttpKernel\DataCollector\DumpDataCollector clonesCount";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:3:"ref";s:5:"class";s:0:"";s:5:"value";i:0;s:3:"cut";i:0;s:6:"handle";i:4;s:8:"refCount";i:1;s:8:"position";i:0;}s:73:" Symfony\Component\HttpKernel\DataCollector\DumpDataCollector clonesIndex";i:0;s:70:" Symfony\Component\HttpKernel\DataCollector\DumpDataCollector rootRefs";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:248;}s:69:" Symfony\Component\HttpKernel\DataCollector\DumpDataCollector charset";s:5:"UTF-8";s:68:" Symfony\Component\HttpKernel\DataCollector\DumpDataCollector dumper";N;s:78:" Symfony\Component\HttpKernel\DataCollector\DumpDataCollector dumperIsInjected";b:0;s:7:" * data";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:3:"ref";s:5:"class";s:0:"";s:5:"value";a:0:{}s:3:"cut";i:0;s:6:"handle";i:5;s:8:"refCount";i:1;s:8:"position";i:0;}s:71:" Symfony\Component\HttpKernel\DataCollector\DataCollector valueExporter";N;s:15:" + requestStack";r:1150;}i:208;a:1:{s:46:" Symfony\Component\HttpKernel\UriSigner secret";s:30:"ThisTokenIsNotSoSecretChangeIt";}i:209;a:10:{s:56:" Symfony\Bundle\FrameworkBundle\Routing\Router container";r:1126;s:10:" * matcher";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:16:"appDevUrlMatcher";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:104;s:8:"refCount";i:0;s:8:"position";i:249;}s:12:" * generator";N;s:10:" * context";r:3309;s:9:" * loader";N;s:13:" * collection";N;s:11:" * resource";s:47:"/var/www/html/app/cache/dev/assetic/routing.yml";s:10:" * options";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:12;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:250;}s:9:" * logger";N;s:61:" Symfony\Component\Routing\Router expressionLanguageProviders";a:0:{}}i:210;a:9:{s:49:" Symfony\Component\Routing\RequestContext baseUrl";s:12:"/app_dev.php";s:50:" Symfony\Component\Routing\RequestContext pathInfo";s:1:"/";s:48:" Symfony\Component\Routing\RequestContext method";s:3:"GET";s:46:" Symfony\Component\Routing\RequestContext host";s:15:"web.site.docker";s:48:" Symfony\Component\Routing\RequestContext scheme";s:4:"http";s:50:" Symfony\Component\Routing\RequestContext httpPort";i:80;s:51:" Symfony\Component\Routing\RequestContext httpsPort";i:443;s:53:" Symfony\Component\Routing\RequestContext queryString";s:0:"";s:52:" Symfony\Component\Routing\RequestContext parameters";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:251;}}i:211;a:2:{s:58:" Symfony\Component\Translation\IdentityTranslator selector";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:45:"Symfony\Component\Translation\MessageSelector";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:199;s:8:"refCount";i:0;s:8:"position";i:0;}s:56:" Symfony\Component\Translation\IdentityTranslator locale";s:2:"en";}i:212;a:2:{s:12:" * container";r:1126;s:6:" * map";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:252;}}i:213;a:1:{s:10:" ~ storage";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:253;}}i:214;a:4:{s:7:" * name";s:3:"app";s:11:" * handlers";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:254;}s:13:" * processors";a:0:{}s:24:" * microsecondTimestamps";b:1;}i:215;a:2:{s:61:" Symfony\Component\Security\Core\SecurityContext tokenStorage";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:73:"Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:172;s:8:"refCount";i:2;s:8:"position";i:255;}s:69:" Symfony\Component\Security\Core\SecurityContext authorizationChecker";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:66:"Symfony\Component\Security\Core\Authorization\AuthorizationChecker";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:121;s:8:"refCount";i:0;s:8:"position";i:256;}}i:216;a:2:{s:90:" Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver anonymousClass";s:67:"Symfony\Component\Security\Core\Authentication\Token\AnonymousToken";s:91:" Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver rememberMeClass";s:68:"Symfony\Component\Security\Core\Authentication\Token\RememberMeToken";}i:217;a:4:{s:7:" * name";s:8:"security";s:11:" * handlers";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:257;}s:13:" * processors";a:0:{}s:24:" * microsecondTimestamps";b:1;}i:218;a:2:{s:55:" Symfony\Component\Security\Http\HttpUtils urlGenerator";r:3301;s:53:" Symfony\Component\Security\Http\HttpUtils urlMatcher";r:3301;}i:219;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:57:"Symfony\Component\Security\Core\User\InMemoryUserProvider";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:84;s:8:"refCount";i:0;s:8:"position";i:258;}}i:220;a:3:{s:7:" + date";s:26:"2018-01-07 18:51:09.837731";s:16:" + timezone_type";i:3;s:11:" + timezone";s:3:"UTC";}i:221;a:3:{s:7:" + date";s:26:"2018-01-07 18:51:09.861827";s:16:" + timezone_type";i:3;s:11:" + timezone";s:3:"UTC";}i:222;a:3:{s:7:" + date";s:26:"2018-01-07 18:51:09.861989";s:16:" + timezone_type";i:3;s:11:" + timezone";s:3:"UTC";}i:223;a:8:{s:7:"message";s:140:"Matched route "dinosaur_list" (parameters: "_controller": "AppBundle\Controller\DinosaurController::indexAction", "_route": "dinosaur_list")";s:7:"context";a:0:{}s:5:"level";i:200;s:10:"level_name";s:4:"INFO";s:7:"channel";s:7:"request";s:8:"datetime";r:3418;s:5:"extra";a:0:{}s:9:"formatted";s:183:"[2018-01-07 18:51:09] request.INFO: Matched route "dinosaur_list" (parameters: "_controller": "AppBundle\Controller\DinosaurController::indexAction", "_route": "dinosaur_list") [] []
";}i:224;a:8:{s:7:"message";s:49:"Populated SecurityContext with an anonymous Token";s:7:"context";a:0:{}s:5:"level";i:200;s:10:"level_name";s:4:"INFO";s:7:"channel";s:8:"security";s:8:"datetime";r:3434;s:5:"extra";a:0:{}s:9:"formatted";s:93:"[2018-01-07 18:51:09] security.INFO: Populated SecurityContext with an anonymous Token [] []
";}i:225;a:8:{s:7:"message";s:20:"RAAAAAAAWWWWWWWWWWWW";s:7:"context";a:0:{}s:5:"level";i:200;s:10:"level_name";s:4:"INFO";s:7:"channel";s:3:"app";s:8:"datetime";r:3450;s:5:"extra";a:0:{}s:9:"formatted";s:59:"[2018-01-07 18:51:09] app.INFO: RAAAAAAAWWWWWWWWWWWW [] []
";}i:226;a:1:{i:0;d:-0;}i:227;a:1:{i:0;d:0;}i:228;a:1:{i:0;d:0;}i:229;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:43:"Symfony\Component\Stopwatch\StopwatchPeriod";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:143;s:8:"refCount";i:0;s:8:"position";i:259;}}i:230;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:43:"Symfony\Component\Stopwatch\StopwatchPeriod";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:141;s:8:"refCount";i:0;s:8:"position";i:260;}}i:231;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:43:"Symfony\Component\Stopwatch\StopwatchPeriod";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:225;s:8:"refCount";i:0;s:8:"position";i:261;}}i:232;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:43:"Symfony\Component\Stopwatch\StopwatchPeriod";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:130;s:8:"refCount";i:0;s:8:"position";i:262;}}i:233;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:43:"Symfony\Component\Stopwatch\StopwatchPeriod";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:128;s:8:"refCount";i:0;s:8:"position";i:263;}}i:234;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:43:"Symfony\Component\Stopwatch\StopwatchPeriod";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:108;s:8:"refCount";i:0;s:8:"position";i:264;}}i:235;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:43:"Symfony\Component\Stopwatch\StopwatchPeriod";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:110;s:8:"refCount";i:0;s:8:"position";i:265;}}i:236;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:43:"Symfony\Component\Stopwatch\StopwatchPeriod";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:114;s:8:"refCount";i:0;s:8:"position";i:266;}}i:237;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:43:"Symfony\Component\Stopwatch\StopwatchPeriod";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:75;s:8:"refCount";i:0;s:8:"position";i:267;}}i:238;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:43:"Symfony\Component\Stopwatch\StopwatchPeriod";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:76;s:8:"refCount";i:0;s:8:"position";i:268;}}i:239;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:43:"Symfony\Component\Stopwatch\StopwatchPeriod";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:73;s:8:"refCount";i:0;s:8:"position";i:269;}}i:240;a:1:{i:0;d:46.100000000000001;}i:241;a:1:{s:13:" ~ reflection";s:389:"Closure [ <user, prototype Closure> public method Doctrine\Common\Proxy\{closure} ] {
  @@ /var/www/html/vendor/doctrine/common/lib/Doctrine/Common/Proxy/Autoloader.php 80 - 90

  - Bound Variables [3] {
      Variable #0 [ $proxyDir ]
      Variable #1 [ $proxyNamespace ]
      Variable #2 [ $notFoundCallback ]
  }

  - Parameters [1] {
    Parameter #0 [ <required> $className ]
  }
}
";}i:242;a:1:{s:65:" Symfony\Component\HttpKernel\Profiler\FileProfilerStorage folder";s:36:"/var/www/html/app/cache/dev/profiler";}i:243;a:14:{s:6:"config";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:62:"Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:193;s:8:"refCount";i:0;s:8:"position";i:270;}s:7:"request";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:63:"Symfony\Component\HttpKernel\DataCollector\RequestDataCollector";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:187;s:8:"refCount";i:0;s:8:"position";i:271;}s:4:"ajax";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:62:"Symfony\Bundle\FrameworkBundle\DataCollector\AjaxDataCollector";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:185;s:8:"refCount";i:0;s:8:"position";i:272;}s:9:"exception";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:65:"Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:184;s:8:"refCount";i:0;s:8:"position";i:273;}s:6:"events";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:61:"Symfony\Component\HttpKernel\DataCollector\EventDataCollector";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:183;s:8:"refCount";i:0;s:8:"position";i:274;}s:6:"logger";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:62:"Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:182;s:8:"refCount";i:0;s:8:"position";i:275;}s:4:"time";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:60:"Symfony\Component\HttpKernel\DataCollector\TimeDataCollector";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:181;s:8:"refCount";i:0;s:8:"position";i:276;}s:6:"memory";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:62:"Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:180;s:8:"refCount";i:0;s:8:"position";i:277;}s:6:"router";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:64:"Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:179;s:8:"refCount";i:0;s:8:"position";i:278;}s:4:"form";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:64:"Symfony\Component\Form\Extension\DataCollector\FormDataCollector";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:177;s:8:"refCount";i:0;s:8:"position";i:279;}s:2:"db";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:66:"Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:192;s:8:"refCount";i:0;s:8:"position";i:280;}s:11:"swiftmailer";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:67:"Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:174;s:8:"refCount";i:0;s:8:"position";i:281;}s:8:"security";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:65:"Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:173;s:8:"refCount";i:0;s:8:"position";i:282;}s:4:"dump";r:3280;}i:244;a:4:{s:7:" * name";s:8:"profiler";s:11:" * handlers";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:283;}s:13:" * processors";a:0:{}s:24:" * microsecondTimestamps";b:1;}i:245;a:51:{s:42:"symfony\component\vardumper\caster\cutstub";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:284;}s:44:"symfony\component\vardumper\caster\conststub";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:285;}s:7:"closure";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:286;}s:9:"reflector";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:287;}s:41:"doctrine\common\persistence\objectmanager";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:288;}s:27:"doctrine\common\proxy\proxy";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:289;}s:24:"doctrine\orm\proxy\proxy";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:290;}s:33:"doctrine\orm\persistentcollection";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:291;}s:12:"domexception";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:292;}s:13:"domstringlist";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:293;}s:11:"domnamelist";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:294;}s:17:"domimplementation";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:295;}s:21:"domimplementationlist";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:296;}s:7:"domnode";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:297;}s:16:"domnamespacenode";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:298;}s:11:"domdocument";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:299;}s:11:"domnodelist";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:300;}s:15:"domnamednodemap";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:301;}s:16:"domcharacterdata";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:302;}s:7:"domattr";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:303;}s:10:"domelement";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:304;}s:7:"domtext";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:305;}s:11:"domtypeinfo";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:306;}s:11:"domdomerror";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:307;}s:10:"domlocator";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:308;}s:15:"domdocumenttype";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:309;}s:11:"domnotation";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:310;}s:9:"domentity";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:311;}s:24:"domprocessinginstruction";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:312;}s:8:"domxpath";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:313;}s:14:"errorexception";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:314;}s:9:"exception";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:315;}s:5:"error";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:316;}s:56:"symfony\component\dependencyinjection\containerinterface";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:317;}s:61:"symfony\component\vardumper\exception\throwingcasterexception";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:318;}s:3:"pdo";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:319;}s:12:"pdostatement";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:320;}s:11:"arrayobject";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:321;}s:19:"spldoublylinkedlist";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:322;}s:13:"splfixedarray";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:323;}s:7:"splheap";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:324;}s:16:"splobjectstorage";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:325;}s:16:"splpriorityqueue";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:326;}s:5:":curl";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:327;}s:4:":dba";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:328;}s:15:":dba persistent";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:329;}s:3:":gd";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:330;}s:11:":mysql link";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:331;}s:8:":process";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:332;}s:7:":stream";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:333;}s:15:":stream-context";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:334;}}i:246;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:36:"Symfony\Component\Debug\ErrorHandler";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:2;s:8:"refCount";i:0;s:8:"position";i:335;}i:1;s:11:"handleError";}i:247;a:63:{s:51:"Symfony\Component\HttpKernel\Event\GetResponseEvent";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:336;}s:73:"Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:337;}s:40:"Symfony\Component\HttpFoundation\Request";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:338;}s:63:"Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:339;}s:27:"appDevDebugProjectContainer";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:340;}s:59:"Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:341;}s:67:"Symfony\Component\HttpKernel\Controller\TraceableControllerResolver";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:342;}s:45:"Symfony\Component\HttpFoundation\RequestStack";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:343;}s:45:"Symfony\Component\HttpFoundation\ParameterBag";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:344;}s:42:"Symfony\Component\HttpFoundation\ServerBag";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:345;}s:40:"Symfony\Component\HttpFoundation\FileBag";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:346;}s:42:"Symfony\Component\HttpFoundation\HeaderBag";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:347;}s:48:"Symfony\Component\HttpFoundation\Session\Session";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:348;}s:29:"Symfony\Bridge\Monolog\Logger";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:349;}s:37:"Symfony\Component\Stopwatch\Stopwatch";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:350;}s:60:"Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:351;}s:69:"Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:352;}s:62:"Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:353;}s:74:"Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:354;}s:60:"Symfony\Component\HttpFoundation\Session\Storage\MetadataBag";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:355;}s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:356;}s:43:"Symfony\Bridge\Monolog\Handler\DebugHandler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:357;}s:29:"Monolog\Handler\StreamHandler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:358;}s:45:"Symfony\Bridge\Monolog\Handler\ConsoleHandler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:359;}s:35:"Symfony\Component\Stopwatch\Section";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:360;}s:9:"AppKernel";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:361;}s:63:"Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:362;}s:55:"Symfony\Component\HttpFoundation\Session\Flash\FlashBag";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:363;}s:14:"SessionHandler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:364;}s:31:"Monolog\Formatter\LineFormatter";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:365;}s:64:"Symfony\Component\HttpKernel\EventListener\DebugHandlersListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:366;}s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:367;}s:55:"Symfony\Component\HttpKernel\EventListener\DumpListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:368;}s:60:"Symfony\Bundle\FrameworkBundle\EventListener\SessionListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:369;}s:59:"Symfony\Component\HttpKernel\EventListener\FragmentListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:370;}s:57:"Symfony\Component\HttpKernel\EventListener\RouterListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:371;}s:57:"Symfony\Component\HttpKernel\EventListener\LocaleListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:372;}s:61:"Symfony\Component\HttpKernel\EventListener\TranslatorListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:373;}s:40:"Symfony\Component\Security\Http\Firewall";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:374;}s:58:"Symfony\Bundle\AsseticBundle\EventListener\RequestListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:375;}s:43:"AppBundle\EventListener\UserAgentSubscriber";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:376;}s:58:"Symfony\Component\Security\Http\Firewall\ExceptionListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:377;}s:56:"Symfony\Component\Security\Http\Firewall\ContextListener";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:378;}s:40:"Monolog\Processor\PsrLogMessageProcessor";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:379;}s:42:"Symfony\Component\Stopwatch\StopwatchEvent";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:380;}s:46:"Symfony\Bundle\FrameworkBundle\FrameworkBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:381;}s:44:"Symfony\Bundle\SecurityBundle\SecurityBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:382;}s:36:"Symfony\Bundle\TwigBundle\TwigBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:383;}s:42:"Symfony\Bundle\MonologBundle\MonologBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:384;}s:50:"Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:385;}s:42:"Symfony\Bundle\AsseticBundle\AsseticBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:386;}s:45:"Doctrine\Bundle\DoctrineBundle\DoctrineBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:387;}s:61:"Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:388;}s:19:"AppBundle\AppBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:389;}s:38:"Symfony\Bundle\DebugBundle\DebugBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:390;}s:50:"Symfony\Bundle\WebProfilerBundle\WebProfilerBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:391;}s:57:"Sensio\Bundle\DistributionBundle\SensioDistributionBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:392;}s:51:"Sensio\Bundle\GeneratorBundle\SensioGeneratorBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:393;}s:53:"Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:394;}s:42:"Hautelook\AliceBundle\HautelookAliceBundle";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:395;}s:46:"Symfony\Component\HttpKernel\Profiler\Profiler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:396;}s:16:"SplObjectStorage";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:397;}s:44:"Symfony\Component\VarDumper\Cloner\VarCloner";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:398;}}i:248;a:4:{i:0;r:3882;i:1;r:3846;i:2;r:3854;i:3;r:3862;}i:249;a:6:{s:10:" * context";r:3309;s:8:" * allow";a:0:{}s:9:" * routes";N;s:10:" * request";N;s:21:" * expressionLanguage";N;s:30:" * expressionLanguageProviders";a:0:{}}i:250;a:12:{s:9:"cache_dir";s:27:"/var/www/html/app/cache/dev";s:5:"debug";b:1;s:15:"generator_class";s:48:"Symfony\Component\Routing\Generator\UrlGenerator";s:20:"generator_base_class";s:48:"Symfony\Component\Routing\Generator\UrlGenerator";s:22:"generator_dumper_class";s:61:"Symfony\Component\Routing\Generator\Dumper\PhpGeneratorDumper";s:21:"generator_cache_class";s:18:"appDevUrlGenerator";s:13:"matcher_class";s:61:"Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher";s:18:"matcher_base_class";s:61:"Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher";s:20:"matcher_dumper_class";s:57:"Symfony\Component\Routing\Matcher\Dumper\PhpMatcherDumper";s:19:"matcher_cache_class";s:16:"appDevUrlMatcher";s:13:"resource_type";s:4:"yaml";s:19:"strict_requirements";b:1;}i:251;a:1:{s:7:"_locale";s:2:"en";}i:252;a:2:{s:33:"security.firewall.map.context.dev";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:47:"Symfony\Component\HttpFoundation\RequestMatcher";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:163;s:8:"refCount";i:0;s:8:"position";i:399;}s:37:"security.firewall.map.context.default";N;}i:253;a:1:{s:32:"0000000029e6fbe40000000071a55249";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:400;}}i:254;a:3:{i:0;r:2064;i:1;r:2072;i:2;r:2080;}i:255;a:1:{s:80:" Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage token";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:67:"Symfony\Component\Security\Core\Authentication\Token\AnonymousToken";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:79;s:8:"refCount";i:0;s:8:"position";i:401;}}i:256;a:4:{s:80:" Symfony\Component\Security\Core\Authorization\AuthorizationChecker tokenStorage";r:3978;s:89:" Symfony\Component\Security\Core\Authorization\AuthorizationChecker accessDecisionManager";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:67:"Symfony\Component\Security\Core\Authorization\AccessDecisionManager";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:115;s:8:"refCount";i:0;s:8:"position";i:402;}s:89:" Symfony\Component\Security\Core\Authorization\AuthorizationChecker authenticationManager";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:76:"Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:120;s:8:"refCount";i:0;s:8:"position";i:403;}s:86:" Symfony\Component\Security\Core\Authorization\AuthorizationChecker alwaysAuthenticate";b:0;}i:257;a:3:{i:0;r:2064;i:1;r:2072;i:2;r:2080;}i:258;a:1:{s:64:" Symfony\Component\Security\Core\User\InMemoryUserProvider users";N;}i:259;a:3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:0;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:0;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:4194304;}i:260;a:3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:0;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:0;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:4194304;}i:261;a:3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:0;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:0;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:4194304;}i:262;a:3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:0;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:4;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:4194304;}i:263;a:3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:4;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:4;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:4194304;}i:264;a:3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:4;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:23;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}i:265;a:3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:23;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:23;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}i:266;a:3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:23;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:23;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}i:267;a:3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:23;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:46;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}i:268;a:3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:45;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:45;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}i:269;a:3:{s:50:" Symfony\Component\Stopwatch\StopwatchPeriod start";i:46;s:48:" Symfony\Component\Stopwatch\StopwatchPeriod end";i:46;s:51:" Symfony\Component\Stopwatch\StopwatchPeriod memory";i:6291456;}i:270;a:5:{s:70:" Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector kernel";r:2120;s:68:" Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector name";N;s:71:" Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector version";N;s:7:" * data";a:0:{}s:71:" Symfony\Component\HttpKernel\DataCollector\DataCollector valueExporter";N;}i:271;a:3:{s:14:" * controllers";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:16:"SplObjectStorage";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:186;s:8:"refCount";i:0;s:8:"position";i:404;}s:7:" * data";a:0:{}s:71:" Symfony\Component\HttpKernel\DataCollector\DataCollector valueExporter";N;}i:272;a:2:{s:7:" * data";a:0:{}s:71:" Symfony\Component\HttpKernel\DataCollector\DataCollector valueExporter";N;}i:273;a:2:{s:7:" * data";a:0:{}s:71:" Symfony\Component\HttpKernel\DataCollector\DataCollector valueExporter";N;}i:274;a:3:{s:13:" * dispatcher";r:1134;s:7:" * data";a:0:{}s:71:" Symfony\Component\HttpKernel\DataCollector\DataCollector valueExporter";N;}i:275;a:3:{s:70:" Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector logger";r:3802;s:7:" * data";a:0:{}s:71:" Symfony\Component\HttpKernel\DataCollector\DataCollector valueExporter";N;}i:276;a:4:{s:9:" * kernel";r:2120;s:12:" * stopwatch";r:1272;s:7:" * data";a:0:{}s:71:" Symfony\Component\HttpKernel\DataCollector\DataCollector valueExporter";N;}i:277;a:2:{s:7:" * data";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:405;}s:71:" Symfony\Component\HttpKernel\DataCollector\DataCollector valueExporter";N;}i:278;a:3:{s:14:" * controllers";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:16:"SplObjectStorage";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:178;s:8:"refCount";i:0;s:8:"position";i:406;}s:7:" * data";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:407;}s:71:" Symfony\Component\HttpKernel\DataCollector\DataCollector valueExporter";N;}i:279;a:6:{s:79:" Symfony\Component\Form\Extension\DataCollector\FormDataCollector dataExtractor";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:64:"Symfony\Component\Form\Extension\DataCollector\FormDataExtractor";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:176;s:8:"refCount";i:0;s:8:"position";i:408;}s:76:" Symfony\Component\Form\Extension\DataCollector\FormDataCollector dataByForm";N;s:76:" Symfony\Component\Form\Extension\DataCollector\FormDataCollector dataByView";N;s:77:" Symfony\Component\Form\Extension\DataCollector\FormDataCollector formsByView";N;s:7:" * data";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:409;}s:71:" Symfony\Component\HttpKernel\DataCollector\DataCollector valueExporter";N;}i:280;a:8:{s:76:" Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector registry";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:39:"Doctrine\Bundle\DoctrineBundle\Registry";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:191;s:8:"refCount";i:1;s:8:"position";i:410;}s:86:" Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector invalidEntityCount";N;s:72:" Symfony\Bridge\Doctrine\DataCollector\DoctrineDataCollector connections";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:411;}s:69:" Symfony\Bridge\Doctrine\DataCollector\DoctrineDataCollector managers";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:412;}s:68:" Symfony\Bridge\Doctrine\DataCollector\DoctrineDataCollector loggers";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:413;}s:7:" * data";a:0:{}s:71:" Symfony\Component\HttpKernel\DataCollector\DataCollector valueExporter";N;s:69:" Symfony\Bridge\Doctrine\DataCollector\DoctrineDataCollector registry";r:5427;}i:281;a:3:{s:78:" Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector container";r:1126;s:7:" * data";a:0:{}s:71:" Symfony\Component\HttpKernel\DataCollector\DataCollector valueExporter";N;}i:282;a:3:{s:79:" Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector tokenStorage";r:3978;s:7:" * data";a:0:{}s:71:" Symfony\Component\HttpKernel\DataCollector\DataCollector valueExporter";N;}i:283;a:3:{i:0;r:2064;i:1;r:2072;i:2;r:2080;}i:284;a:1:{i:0;s:55:"Symfony\Component\VarDumper\Caster\StubCaster::castStub";}i:285;a:1:{i:0;s:55:"Symfony\Component\VarDumper\Caster\StubCaster::castStub";}i:286;a:1:{i:0;s:64:"Symfony\Component\VarDumper\Caster\ReflectionCaster::castClosure";}i:287;a:1:{i:0;s:66:"Symfony\Component\VarDumper\Caster\ReflectionCaster::castReflector";}i:288;a:1:{i:0;s:59:"Symfony\Component\VarDumper\Caster\StubCaster::cutInternals";}i:289;a:1:{i:0;s:66:"Symfony\Component\VarDumper\Caster\DoctrineCaster::castCommonProxy";}i:290;a:1:{i:0;s:63:"Symfony\Component\VarDumper\Caster\DoctrineCaster::castOrmProxy";}i:291;a:1:{i:0;s:75:"Symfony\Component\VarDumper\Caster\DoctrineCaster::castPersistentCollection";}i:292;a:1:{i:0;s:59:"Symfony\Component\VarDumper\Caster\DOMCaster::castException";}i:293;a:1:{i:0;s:56:"Symfony\Component\VarDumper\Caster\DOMCaster::castLength";}i:294;a:1:{i:0;s:56:"Symfony\Component\VarDumper\Caster\DOMCaster::castLength";}i:295;a:1:{i:0;s:64:"Symfony\Component\VarDumper\Caster\DOMCaster::castImplementation";}i:296;a:1:{i:0;s:56:"Symfony\Component\VarDumper\Caster\DOMCaster::castLength";}i:297;a:1:{i:0;s:54:"Symfony\Component\VarDumper\Caster\DOMCaster::castNode";}i:298;a:1:{i:0;s:63:"Symfony\Component\VarDumper\Caster\DOMCaster::castNameSpaceNode";}i:299;a:1:{i:0;s:58:"Symfony\Component\VarDumper\Caster\DOMCaster::castDocument";}i:300;a:1:{i:0;s:56:"Symfony\Component\VarDumper\Caster\DOMCaster::castLength";}i:301;a:1:{i:0;s:56:"Symfony\Component\VarDumper\Caster\DOMCaster::castLength";}i:302;a:1:{i:0;s:63:"Symfony\Component\VarDumper\Caster\DOMCaster::castCharacterData";}i:303;a:1:{i:0;s:54:"Symfony\Component\VarDumper\Caster\DOMCaster::castAttr";}i:304;a:1:{i:0;s:57:"Symfony\Component\VarDumper\Caster\DOMCaster::castElement";}i:305;a:1:{i:0;s:54:"Symfony\Component\VarDumper\Caster\DOMCaster::castText";}i:306;a:1:{i:0;s:58:"Symfony\Component\VarDumper\Caster\DOMCaster::castTypeinfo";}i:307;a:1:{i:0;s:58:"Symfony\Component\VarDumper\Caster\DOMCaster::castDomError";}i:308;a:1:{i:0;s:57:"Symfony\Component\VarDumper\Caster\DOMCaster::castLocator";}i:309;a:1:{i:0;s:62:"Symfony\Component\VarDumper\Caster\DOMCaster::castDocumentType";}i:310;a:1:{i:0;s:58:"Symfony\Component\VarDumper\Caster\DOMCaster::castNotation";}i:311;a:1:{i:0;s:56:"Symfony\Component\VarDumper\Caster\DOMCaster::castEntity";}i:312;a:1:{i:0;s:71:"Symfony\Component\VarDumper\Caster\DOMCaster::castProcessingInstruction";}i:313;a:1:{i:0;s:55:"Symfony\Component\VarDumper\Caster\DOMCaster::castXPath";}i:314;a:1:{i:0;s:70:"Symfony\Component\VarDumper\Caster\ExceptionCaster::castErrorException";}i:315;a:1:{i:0;s:65:"Symfony\Component\VarDumper\Caster\ExceptionCaster::castException";}i:316;a:1:{i:0;s:61:"Symfony\Component\VarDumper\Caster\ExceptionCaster::castError";}i:317;a:1:{i:0;s:59:"Symfony\Component\VarDumper\Caster\StubCaster::cutInternals";}i:318;a:1:{i:0;s:79:"Symfony\Component\VarDumper\Caster\ExceptionCaster::castThrowingCasterException";}i:319;a:1:{i:0;s:53:"Symfony\Component\VarDumper\Caster\PdoCaster::castPdo";}i:320;a:1:{i:0;s:62:"Symfony\Component\VarDumper\Caster\PdoCaster::castPdoStatement";}i:321;a:1:{i:0;s:61:"Symfony\Component\VarDumper\Caster\SplCaster::castArrayObject";}i:322;a:1:{i:0;s:66:"Symfony\Component\VarDumper\Caster\SplCaster::castDoublyLinkedList";}i:323;a:1:{i:0;s:60:"Symfony\Component\VarDumper\Caster\SplCaster::castFixedArray";}i:324;a:1:{i:0;s:54:"Symfony\Component\VarDumper\Caster\SplCaster::castHeap";}i:325;a:1:{i:0;s:63:"Symfony\Component\VarDumper\Caster\SplCaster::castObjectStorage";}i:326;a:1:{i:0;s:54:"Symfony\Component\VarDumper\Caster\SplCaster::castHeap";}i:327;a:1:{i:0;s:59:"Symfony\Component\VarDumper\Caster\ResourceCaster::castCurl";}i:328;a:1:{i:0;s:58:"Symfony\Component\VarDumper\Caster\ResourceCaster::castDba";}i:329;a:1:{i:0;s:58:"Symfony\Component\VarDumper\Caster\ResourceCaster::castDba";}i:330;a:1:{i:0;s:57:"Symfony\Component\VarDumper\Caster\ResourceCaster::castGd";}i:331;a:1:{i:0;s:64:"Symfony\Component\VarDumper\Caster\ResourceCaster::castMysqlLink";}i:332;a:1:{i:0;s:62:"Symfony\Component\VarDumper\Caster\ResourceCaster::castProcess";}i:333;a:1:{i:0;s:61:"Symfony\Component\VarDumper\Caster\ResourceCaster::castStream";}i:334;a:1:{i:0;s:68:"Symfony\Component\VarDumper\Caster\ResourceCaster::castStreamContext";}i:335;a:11:{s:44:" Symfony\Component\Debug\ErrorHandler levels";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:15;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:414;}s:45:" Symfony\Component\Debug\ErrorHandler loggers";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:15;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:415;}s:50:" Symfony\Component\Debug\ErrorHandler thrownErrors";i:-24577;s:50:" Symfony\Component\Debug\ErrorHandler scopedErrors";i:8191;s:50:" Symfony\Component\Debug\ErrorHandler tracedErrors";i:30715;s:52:" Symfony\Component\Debug\ErrorHandler screamedErrors";i:32767;s:50:" Symfony\Component\Debug\ErrorHandler loggedErrors";i:32767;s:50:" Symfony\Component\Debug\ErrorHandler loggedTraces";a:0:{}s:49:" Symfony\Component\Debug\ErrorHandler isRecursive";i:0;s:54:" Symfony\Component\Debug\ErrorHandler exceptionHandler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:416;}s:51:" Symfony\Component\Debug\ErrorHandler displayErrors";i:-24577;}i:336;a:4:{i:0;s:51:"Symfony\Component\HttpKernel\Event\GetResponseEvent";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:68;s:8:"refCount";i:0;s:8:"position";i:417;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:418;}}i:337;a:4:{i:0;s:73:"Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:66;s:8:"refCount";i:0;s:8:"position";i:419;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:420;}}i:338;a:4:{i:0;s:40:"Symfony\Component\HttpFoundation\Request";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:64;s:8:"refCount";i:0;s:8:"position";i:421;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:422;}}i:339;a:4:{i:0;s:63:"Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:62;s:8:"refCount";i:0;s:8:"position";i:423;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:424;}}i:340;a:4:{i:0;s:27:"appDevDebugProjectContainer";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:60;s:8:"refCount";i:0;s:8:"position";i:425;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:426;}}i:341;a:4:{i:0;s:59:"Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:58;s:8:"refCount";i:0;s:8:"position";i:427;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:428;}}i:342;a:4:{i:0;s:67:"Symfony\Component\HttpKernel\Controller\TraceableControllerResolver";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:56;s:8:"refCount";i:0;s:8:"position";i:429;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:430;}}i:343;a:4:{i:0;s:45:"Symfony\Component\HttpFoundation\RequestStack";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:54;s:8:"refCount";i:0;s:8:"position";i:431;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:432;}}i:344;a:4:{i:0;s:45:"Symfony\Component\HttpFoundation\ParameterBag";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:52;s:8:"refCount";i:0;s:8:"position";i:433;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:434;}}i:345;a:4:{i:0;s:42:"Symfony\Component\HttpFoundation\ServerBag";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:48;s:8:"refCount";i:0;s:8:"position";i:435;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:436;}}i:346;a:4:{i:0;s:40:"Symfony\Component\HttpFoundation\FileBag";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:46;s:8:"refCount";i:0;s:8:"position";i:437;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:438;}}i:347;a:4:{i:0;s:42:"Symfony\Component\HttpFoundation\HeaderBag";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:43;s:8:"refCount";i:0;s:8:"position";i:439;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:440;}}i:348;a:4:{i:0;s:48:"Symfony\Component\HttpFoundation\Session\Session";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:41;s:8:"refCount";i:0;s:8:"position";i:441;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:442;}}i:349;a:4:{i:0;s:29:"Symfony\Bridge\Monolog\Logger";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:36;s:8:"refCount";i:0;s:8:"position";i:443;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:444;}}i:350;a:4:{i:0;s:37:"Symfony\Component\Stopwatch\Stopwatch";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:34;s:8:"refCount";i:0;s:8:"position";i:445;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:446;}}i:351;a:4:{i:0;s:60:"Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:229;s:8:"refCount";i:0;s:8:"position";i:447;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:448;}}i:352;a:4:{i:0;s:69:"Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:235;s:8:"refCount";i:0;s:8:"position";i:449;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:450;}}i:353;a:4:{i:0;s:62:"Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:253;s:8:"refCount";i:0;s:8:"position";i:451;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:452;}}i:354;a:4:{i:0;s:74:"Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:271;s:8:"refCount";i:0;s:8:"position";i:453;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:454;}}i:355;a:4:{i:0;s:60:"Symfony\Component\HttpFoundation\Session\Storage\MetadataBag";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:273;s:8:"refCount";i:0;s:8:"position";i:455;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:456;}}i:356;a:4:{i:0;s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:304;s:8:"refCount";i:0;s:8:"position";i:457;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:458;}}i:357;a:4:{i:0;s:43:"Symfony\Bridge\Monolog\Handler\DebugHandler";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:319;s:8:"refCount";i:0;s:8:"position";i:459;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:6;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:460;}}i:358;a:4:{i:0;s:29:"Monolog\Handler\StreamHandler";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:321;s:8:"refCount";i:0;s:8:"position";i:461;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:4;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:462;}}i:359;a:4:{i:0;s:45:"Symfony\Bridge\Monolog\Handler\ConsoleHandler";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:323;s:8:"refCount";i:0;s:8:"position";i:463;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:464;}}i:360;a:4:{i:0;s:35:"Symfony\Component\Stopwatch\Section";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:325;s:8:"refCount";i:0;s:8:"position";i:465;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:466;}}i:361;a:4:{i:0;s:9:"AppKernel";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:328;s:8:"refCount";i:0;s:8:"position";i:467;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:6;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:468;}}i:362;a:4:{i:0;s:63:"Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:331;s:8:"refCount";i:0;s:8:"position";i:469;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:6;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:470;}}i:363;a:4:{i:0;s:55:"Symfony\Component\HttpFoundation\Session\Flash\FlashBag";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:333;s:8:"refCount";i:0;s:8:"position";i:471;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:472;}}i:364;a:4:{i:0;s:14:"SessionHandler";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:335;s:8:"refCount";i:0;s:8:"position";i:473;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:474;}}i:365;a:4:{i:0;s:31:"Monolog\Formatter\LineFormatter";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:353;s:8:"refCount";i:0;s:8:"position";i:475;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:476;}}i:366;a:4:{i:0;s:64:"Symfony\Component\HttpKernel\EventListener\DebugHandlersListener";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:365;s:8:"refCount";i:0;s:8:"position";i:477;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:478;}}i:367;a:4:{i:0;s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:367;s:8:"refCount";i:0;s:8:"position";i:479;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:480;}}i:368;a:4:{i:0;s:55:"Symfony\Component\HttpKernel\EventListener\DumpListener";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:369;s:8:"refCount";i:0;s:8:"position";i:481;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:482;}}i:369;a:4:{i:0;s:60:"Symfony\Bundle\FrameworkBundle\EventListener\SessionListener";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:371;s:8:"refCount";i:0;s:8:"position";i:483;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:484;}}i:370;a:4:{i:0;s:59:"Symfony\Component\HttpKernel\EventListener\FragmentListener";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:373;s:8:"refCount";i:0;s:8:"position";i:485;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:486;}}i:371;a:4:{i:0;s:57:"Symfony\Component\HttpKernel\EventListener\RouterListener";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:375;s:8:"refCount";i:0;s:8:"position";i:487;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:488;}}i:372;a:4:{i:0;s:57:"Symfony\Component\HttpKernel\EventListener\LocaleListener";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:377;s:8:"refCount";i:0;s:8:"position";i:489;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:490;}}i:373;a:4:{i:0;s:61:"Symfony\Component\HttpKernel\EventListener\TranslatorListener";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:379;s:8:"refCount";i:0;s:8:"position";i:491;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:492;}}i:374;a:4:{i:0;s:40:"Symfony\Component\Security\Http\Firewall";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:381;s:8:"refCount";i:0;s:8:"position";i:493;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:494;}}i:375;a:4:{i:0;s:58:"Symfony\Bundle\AsseticBundle\EventListener\RequestListener";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:383;s:8:"refCount";i:0;s:8:"position";i:495;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:496;}}i:376;a:4:{i:0;s:43:"AppBundle\EventListener\UserAgentSubscriber";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:385;s:8:"refCount";i:0;s:8:"position";i:497;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:498;}}i:377;a:4:{i:0;s:58:"Symfony\Component\Security\Http\Firewall\ExceptionListener";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:387;s:8:"refCount";i:0;s:8:"position";i:499;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:500;}}i:378;a:4:{i:0;s:56:"Symfony\Component\Security\Http\Firewall\ContextListener";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:389;s:8:"refCount";i:0;s:8:"position";i:501;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:502;}}i:379;a:4:{i:0;s:40:"Monolog\Processor\PsrLogMessageProcessor";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:395;s:8:"refCount";i:0;s:8:"position";i:503;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:504;}}i:380;a:4:{i:0;s:42:"Symfony\Component\Stopwatch\StopwatchEvent";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:397;s:8:"refCount";i:0;s:8:"position";i:505;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:506;}}i:381;a:4:{i:0;s:46:"Symfony\Bundle\FrameworkBundle\FrameworkBundle";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:413;s:8:"refCount";i:0;s:8:"position";i:507;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:508;}}i:382;a:4:{i:0;s:44:"Symfony\Bundle\SecurityBundle\SecurityBundle";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:415;s:8:"refCount";i:0;s:8:"position";i:509;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:510;}}i:383;a:4:{i:0;s:36:"Symfony\Bundle\TwigBundle\TwigBundle";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:417;s:8:"refCount";i:0;s:8:"position";i:511;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:512;}}i:384;a:4:{i:0;s:42:"Symfony\Bundle\MonologBundle\MonologBundle";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:419;s:8:"refCount";i:0;s:8:"position";i:513;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:514;}}i:385;a:4:{i:0;s:50:"Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:421;s:8:"refCount";i:0;s:8:"position";i:515;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:516;}}i:386;a:4:{i:0;s:42:"Symfony\Bundle\AsseticBundle\AsseticBundle";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:423;s:8:"refCount";i:0;s:8:"position";i:517;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:518;}}i:387;a:4:{i:0;s:45:"Doctrine\Bundle\DoctrineBundle\DoctrineBundle";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:425;s:8:"refCount";i:0;s:8:"position";i:519;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:520;}}i:388;a:4:{i:0;s:61:"Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:427;s:8:"refCount";i:0;s:8:"position";i:521;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:522;}}i:389;a:4:{i:0;s:19:"AppBundle\AppBundle";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:429;s:8:"refCount";i:0;s:8:"position";i:523;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:524;}}i:390;a:4:{i:0;s:38:"Symfony\Bundle\DebugBundle\DebugBundle";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:431;s:8:"refCount";i:0;s:8:"position";i:525;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:526;}}i:391;a:4:{i:0;s:50:"Symfony\Bundle\WebProfilerBundle\WebProfilerBundle";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:433;s:8:"refCount";i:0;s:8:"position";i:527;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:528;}}i:392;a:4:{i:0;s:57:"Sensio\Bundle\DistributionBundle\SensioDistributionBundle";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:435;s:8:"refCount";i:0;s:8:"position";i:529;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:530;}}i:393;a:4:{i:0;s:51:"Sensio\Bundle\GeneratorBundle\SensioGeneratorBundle";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:437;s:8:"refCount";i:0;s:8:"position";i:531;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:532;}}i:394;a:4:{i:0;s:53:"Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:439;s:8:"refCount";i:0;s:8:"position";i:533;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:534;}}i:395;a:4:{i:0;s:42:"Hautelook\AliceBundle\HautelookAliceBundle";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:441;s:8:"refCount";i:0;s:8:"position";i:535;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:5;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:536;}}i:396;a:4:{i:0;s:46:"Symfony\Component\HttpKernel\Profiler\Profiler";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:458;s:8:"refCount";i:0;s:8:"position";i:537;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:538;}}i:397;a:4:{i:0;s:16:"SplObjectStorage";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:460;s:8:"refCount";i:0;s:8:"position";i:539;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:6;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:540;}}i:398;a:4:{i:0;s:44:"Symfony\Component\VarDumper\Cloner\VarCloner";i:1;b:0;i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:15:"ReflectionClass";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:463;s:8:"refCount";i:0;s:8:"position";i:541;}i:3;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:542;}}i:399;a:6:{s:53:" Symfony\Component\HttpFoundation\RequestMatcher path";s:34:"^/(_(profiler|wdt)|css|images|js)/";s:53:" Symfony\Component\HttpFoundation\RequestMatcher host";N;s:56:" Symfony\Component\HttpFoundation\RequestMatcher methods";a:0:{}s:52:" Symfony\Component\HttpFoundation\RequestMatcher ips";a:0:{}s:59:" Symfony\Component\HttpFoundation\RequestMatcher attributes";a:0:{}s:56:" Symfony\Component\HttpFoundation\RequestMatcher schemes";a:0:{}}i:400;a:2:{s:6:"object";r:1106;s:4:"info";r:2774;}i:401;a:5:{s:72:" Symfony\Component\Security\Core\Authentication\Token\AnonymousToken key";s:23:"5a5250c0970492.68176224";s:72:" Symfony\Component\Security\Core\Authentication\Token\AbstractToken user";s:5:"anon.";s:73:" Symfony\Component\Security\Core\Authentication\Token\AbstractToken roles";a:0:{}s:81:" Symfony\Component\Security\Core\Authentication\Token\AbstractToken authenticated";b:1;s:78:" Symfony\Component\Security\Core\Authentication\Token\AbstractToken attributes";a:0:{}}i:402;a:4:{s:75:" Symfony\Component\Security\Core\Authorization\AccessDecisionManager voters";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:543;}s:77:" Symfony\Component\Security\Core\Authorization\AccessDecisionManager strategy";s:17:"decideAffirmative";s:95:" Symfony\Component\Security\Core\Authorization\AccessDecisionManager allowIfAllAbstainDecisions";b:0;s:103:" Symfony\Component\Security\Core\Authorization\AccessDecisionManager allowIfEqualGrantedDeniedDecisions";b:1;}i:403;a:3:{s:87:" Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager providers";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:544;}s:94:" Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager eraseCredentials";b:1;s:93:" Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager eventDispatcher";r:1134;}i:404;a:1:{s:10:" ~ storage";a:0:{}}i:405;a:2:{s:6:"memory";i:0;s:12:"memory_limit";i:134217728;}i:406;a:1:{s:10:" ~ storage";a:0:{}}i:407;a:3:{s:8:"redirect";b:0;s:3:"url";N;s:5:"route";N;}i:408;a:1:{s:79:" Symfony\Component\Form\Extension\DataCollector\FormDataExtractor valueExporter";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:61:"Symfony\Component\HttpKernel\DataCollector\Util\ValueExporter";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:175;s:8:"refCount";i:0;s:8:"position";i:0;}}i:409;a:3:{s:5:"forms";a:0:{}s:13:"forms_by_hash";a:0:{}s:9:"nb_errors";i:0;}i:410;a:7:{s:12:" * container";r:1126;s:57:" Doctrine\Common\Persistence\AbstractManagerRegistry name";s:3:"ORM";s:64:" Doctrine\Common\Persistence\AbstractManagerRegistry connections";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:545;}s:61:" Doctrine\Common\Persistence\AbstractManagerRegistry managers";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:1;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:546;}s:70:" Doctrine\Common\Persistence\AbstractManagerRegistry defaultConnection";s:7:"default";s:67:" Doctrine\Common\Persistence\AbstractManagerRegistry defaultManager";s:7:"default";s:71:" Doctrine\Common\Persistence\AbstractManagerRegistry proxyInterfaceName";s:24:"Doctrine\ORM\Proxy\Proxy";}i:411;a:1:{s:7:"default";s:32:"doctrine.dbal.default_connection";}i:412;a:1:{s:7:"default";s:35:"doctrine.orm.default_entity_manager";}i:413;a:1:{s:7:"default";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:32:"Doctrine\DBAL\Logging\DebugStack";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:190;s:8:"refCount";i:0;s:8:"position";i:547;}}i:414;a:15:{i:8192;s:10:"Deprecated";i:16384;s:15:"User Deprecated";i:8;s:6:"Notice";i:1024;s:11:"User Notice";i:2048;s:14:"Runtime Notice";i:2;s:7:"Warning";i:512;s:12:"User Warning";i:128;s:15:"Compile Warning";i:32;s:12:"Core Warning";i:256;s:10:"User Error";i:4096;s:21:"Catchable Fatal Error";i:64;s:13:"Compile Error";i:4;s:11:"Parse Error";i:1;s:5:"Error";i:16;s:10:"Core Error";}i:415;a:15:{i:8192;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:548;}i:16384;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:549;}i:8;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:550;}i:1024;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:551;}i:2048;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:552;}i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:553;}i:512;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:554;}i:128;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:555;}i:32;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:556;}i:256;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:557;}i:4096;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:558;}i:64;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:559;}i:4;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:560;}i:1;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:561;}i:16;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:562;}}i:416;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:40:"Symfony\Component\Debug\ExceptionHandler";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:4;s:8:"refCount";i:0;s:8:"position";i:563;}i:1;s:6:"handle";}i:417;a:2:{s:4:"name";s:51:"Symfony\Component\HttpKernel\Event\GetResponseEvent";s:13:" ~ reflection";s:6714:"/**
 * Allows to create a response for a request.
 *
 * Call setResponse() to set the response that will be returned for the
 * current request. The propagation of this event is stopped as soon as a
 * response is set.
 *
 * @author Bernhard Schussek <bschussek@gmail.com>
 *
 * @api
 */
Class [ <user> class Symfony\Component\HttpKernel\Event\GetResponseEvent extends Symfony\Component\HttpKernel\Event\KernelEvent ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Event/GetResponseEvent.php 27-73

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [1] {
    Property [ <default> private $response ]
  }

  - Methods [14] {
    /**
     * Returns the response object.
     *
     * @return Response
     *
     * @api
     */
    Method [ <user> public method getResponse ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Event/GetResponseEvent.php 43 - 46
    }

    /**
     * Sets a response and stops event propagation.
     *
     * @param Response $response
     *
     * @api
     */
    Method [ <user> public method setResponse ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Event/GetResponseEvent.php 55 - 60

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Response $response ]
      }
    }

    /**
     * Returns whether a response was set.
     *
     * @return bool Whether a response was set
     *
     * @api
     */
    Method [ <user> public method hasResponse ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Event/GetResponseEvent.php 69 - 72
    }

    Method [ <user, inherits Symfony\Component\HttpKernel\Event\KernelEvent, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Event/KernelEvent.php 49 - 54

      - Parameters [3] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\HttpKernelInterface $kernel ]
        Parameter #1 [ <required> Symfony\Component\HttpFoundation\Request $request ]
        Parameter #2 [ <required> $requestType ]
      }
    }

    /**
     * Returns the kernel in which this event was thrown.
     *
     * @return HttpKernelInterface
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Event\KernelEvent> public method getKernel ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Event/KernelEvent.php 63 - 66
    }

    /**
     * Returns the request the kernel is currently processing.
     *
     * @return Request
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Event\KernelEvent> public method getRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Event/KernelEvent.php 75 - 78
    }

    /**
     * Returns the request type the kernel is currently processing.
     *
     * @return int One of HttpKernelInterface::MASTER_REQUEST and
     *             HttpKernelInterface::SUB_REQUEST
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Event\KernelEvent> public method getRequestType ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Event/KernelEvent.php 88 - 91
    }

    /**
     * Checks if this is a master request.
     *
     * @return bool True if the request is a master request
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Event\KernelEvent> public method isMasterRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Event/KernelEvent.php 100 - 103
    }

    /**
     * Returns whether further event listeners should be triggered.
     *
     * @see Event::stopPropagation()
     *
     * @return bool Whether propagation was already stopped for this event.
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Event> public method isPropagationStopped ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Event.php 56 - 59
    }

    /**
     * Stops the propagation of the event to further event listeners.
     *
     * If multiple event listeners are connected to the same event, no
     * further event listener will be triggered once any trigger calls
     * stopPropagation().
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Event> public method stopPropagation ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Event.php 70 - 73
    }

    /**
     * Stores the EventDispatcher that dispatches this Event.
     *
     * @param EventDispatcherInterface $dispatcher
     *
     * @deprecated Deprecated in 2.4, to be removed in 3.0. The event dispatcher is passed to the listener call.
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Event> public method setDispatcher ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Event.php 84 - 87

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher ]
      }
    }

    /**
     * Returns the EventDispatcher that dispatches this Event.
     *
     * @return EventDispatcherInterface
     *
     * @deprecated Deprecated in 2.4, to be removed in 3.0. The event dispatcher is passed to the listener call.
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Event> public method getDispatcher ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Event.php 98 - 101
    }

    /**
     * Gets the event's name.
     *
     * @return string
     *
     * @deprecated Deprecated in 2.4, to be removed in 3.0. The event name is passed to the listener call.
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Event> public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Event.php 112 - 115
    }

    /**
     * Sets the event's name property.
     *
     * @param string $name The event name.
     *
     * @deprecated Deprecated in 2.4, to be removed in 3.0. The event name is passed to the listener call.
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Event> public method setName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Event.php 126 - 129

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }
  }
}
";}i:418;a:3:{s:39:"Symfony\Component\EventDispatcher\Event";s:39:"Symfony\Component\EventDispatcher\Event";s:46:"Symfony\Component\HttpKernel\Event\KernelEvent";s:46:"Symfony\Component\HttpKernel\Event\KernelEvent";s:51:"Symfony\Component\HttpKernel\Event\GetResponseEvent";s:51:"Symfony\Component\HttpKernel\Event\GetResponseEvent";}i:419;a:2:{s:4:"name";s:73:"Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel";s:13:" ~ reflection";s:3613:"/**
 * Adds a managed request scope.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */
Class [ <user> class Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel extends Symfony\Component\HttpKernel\HttpKernel implements Symfony\Component\HttpKernel\TerminableInterface, Symfony\Component\HttpKernel\HttpKernelInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/DependencyInjection/ContainerAwareHttpKernel.php 29-77

  - Constants [2] {
    Constant [ integer MASTER_REQUEST ] { 1 }
    Constant [ integer SUB_REQUEST ] { 2 }
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> protected $container ]
    Property [ <default> protected $dispatcher ]
    Property [ <default> protected $resolver ]
    Property [ <default> protected $requestStack ]
  }

  - Methods [4] {
    /**
     * Constructor.
     *
     * @param EventDispatcherInterface    $dispatcher         An EventDispatcherInterface instance
     * @param ContainerInterface          $container          A ContainerInterface instance
     * @param ControllerResolverInterface $controllerResolver A ControllerResolverInterface instance
     * @param RequestStack                $requestStack       A stack for master/sub requests
     */
    Method [ <user, overwrites Symfony\Component\HttpKernel\HttpKernel, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/DependencyInjection/ContainerAwareHttpKernel.php 41 - 51

      - Parameters [4] {
        Parameter #0 [ <required> Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher ]
        Parameter #1 [ <required> Symfony\Component\DependencyInjection\ContainerInterface $container ]
        Parameter #2 [ <required> Symfony\Component\HttpKernel\Controller\ControllerResolverInterface $controllerResolver ]
        Parameter #3 [ <optional> Symfony\Component\HttpFoundation\RequestStack or NULL $requestStack = NULL ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Symfony\Component\HttpKernel\HttpKernel, prototype Symfony\Component\HttpKernel\HttpKernelInterface> public method handle ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/DependencyInjection/ContainerAwareHttpKernel.php 56 - 76

      - Parameters [3] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
        Parameter #1 [ <optional> $type = 1 ]
        Parameter #2 [ <optional> $catch = true ]
      }
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\HttpKernel, prototype Symfony\Component\HttpKernel\TerminableInterface> public method terminate ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/HttpKernel.php 83 - 86

      - Parameters [2] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
        Parameter #1 [ <required> Symfony\Component\HttpFoundation\Response $response ]
      }
    }

    /**
     * @throws \LogicException If the request stack is empty
     *
     * @internal
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\HttpKernel> public method terminateWithException ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/HttpKernel.php 93 - 105

      - Parameters [1] {
        Parameter #0 [ <required> Exception $exception ]
      }
    }
  }
}
";}i:420;a:4:{s:48:"Symfony\Component\HttpKernel\HttpKernelInterface";s:48:"Symfony\Component\HttpKernel\HttpKernelInterface";s:48:"Symfony\Component\HttpKernel\TerminableInterface";s:48:"Symfony\Component\HttpKernel\TerminableInterface";s:39:"Symfony\Component\HttpKernel\HttpKernel";s:39:"Symfony\Component\HttpKernel\HttpKernel";s:73:"Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel";s:73:"Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel";}i:421;a:2:{s:4:"name";s:40:"Symfony\Component\HttpFoundation\Request";s:13:" ~ reflection";s:37950:"/**
 * Request represents an HTTP request.
 *
 * The methods dealing with URL accept / return a raw path (% encoded):
 *   * getBasePath
 *   * getBaseUrl
 *   * getPathInfo
 *   * getRequestUri
 *   * getUri
 *   * getUriForPath
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */
Class [ <user> class Symfony\Component\HttpFoundation\Request ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 31-1954

  - Constants [14] {
    Constant [ string HEADER_CLIENT_IP ] { client_ip }
    Constant [ string HEADER_CLIENT_HOST ] { client_host }
    Constant [ string HEADER_CLIENT_PROTO ] { client_proto }
    Constant [ string HEADER_CLIENT_PORT ] { client_port }
    Constant [ string METHOD_HEAD ] { HEAD }
    Constant [ string METHOD_GET ] { GET }
    Constant [ string METHOD_POST ] { POST }
    Constant [ string METHOD_PUT ] { PUT }
    Constant [ string METHOD_PATCH ] { PATCH }
    Constant [ string METHOD_DELETE ] { DELETE }
    Constant [ string METHOD_PURGE ] { PURGE }
    Constant [ string METHOD_OPTIONS ] { OPTIONS }
    Constant [ string METHOD_TRACE ] { TRACE }
    Constant [ string METHOD_CONNECT ] { CONNECT }
  }

  - Static properties [7] {
    Property [ protected static $trustedProxies ]
    Property [ protected static $trustedHostPatterns ]
    Property [ protected static $trustedHosts ]
    Property [ protected static $trustedHeaders ]
    Property [ protected static $httpMethodParameterOverride ]
    Property [ protected static $formats ]
    Property [ protected static $requestFactory ]
  }

  - Static methods [14] {
    /**
     * Creates a new request with values from PHP's super globals.
     *
     * @return Request A new request
     *
     * @api
     */
    Method [ <user> static public method createFromGlobals ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 280 - 305
    }

    /**
     * Creates a Request based on a given URI and configuration.
     *
     * The information contained in the URI always take precedence
     * over the other information (server and parameters).
     *
     * @param string $uri        The URI
     * @param string $method     The HTTP method
     * @param array  $parameters The query (GET) or request (POST) parameters
     * @param array  $cookies    The request cookies ($_COOKIE)
     * @param array  $files      The request files ($_FILES)
     * @param array  $server     The server parameters ($_SERVER)
     * @param string $content    The raw body data
     *
     * @return Request A Request instance
     *
     * @api
     */
    Method [ <user> static public method create ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 325 - 415

      - Parameters [7] {
        Parameter #0 [ <required> $uri ]
        Parameter #1 [ <optional> $method = 'GET' ]
        Parameter #2 [ <optional> $parameters = Array ]
        Parameter #3 [ <optional> $cookies = Array ]
        Parameter #4 [ <optional> $files = Array ]
        Parameter #5 [ <optional> $server = Array ]
        Parameter #6 [ <optional> $content = NULL ]
      }
    }

    /**
     * Sets a callable able to create a Request instance.
     *
     * This is mainly useful when you need to override the Request class
     * to keep BC with an existing system. It should not be used for any
     * other purpose.
     *
     * @param callable|null $callable A PHP callable
     */
    Method [ <user> static public method setFactory ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 426 - 429

      - Parameters [1] {
        Parameter #0 [ <required> $callable ]
      }
    }

    /**
     * Sets a list of trusted proxies.
     *
     * You should only list the reverse proxies that you manage directly.
     *
     * @param array $proxies A list of trusted proxies
     *
     * @api
     */
    Method [ <user> static public method setTrustedProxies ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 571 - 574

      - Parameters [1] {
        Parameter #0 [ <required> array $proxies ]
      }
    }

    /**
     * Gets the list of trusted proxies.
     *
     * @return array An array of trusted proxies.
     */
    Method [ <user> static public method getTrustedProxies ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 581 - 584
    }

    /**
     * Sets a list of trusted host patterns.
     *
     * You should only list the hosts you manage using regexs.
     *
     * @param array $hostPatterns A list of trusted host patterns
     */
    Method [ <user> static public method setTrustedHosts ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 593 - 600

      - Parameters [1] {
        Parameter #0 [ <required> array $hostPatterns ]
      }
    }

    /**
     * Gets the list of trusted host patterns.
     *
     * @return array An array of trusted host patterns.
     */
    Method [ <user> static public method getTrustedHosts ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 607 - 610
    }

    /**
     * Sets the name for trusted headers.
     *
     * The following header keys are supported:
     *
     *  * Request::HEADER_CLIENT_IP:    defaults to X-Forwarded-For   (see getClientIp())
     *  * Request::HEADER_CLIENT_HOST:  defaults to X-Forwarded-Host  (see getHost())
     *  * Request::HEADER_CLIENT_PORT:  defaults to X-Forwarded-Port  (see getPort())
     *  * Request::HEADER_CLIENT_PROTO: defaults to X-Forwarded-Proto (see getScheme() and isSecure())
     *
     * Setting an empty value allows to disable the trusted header for the given key.
     *
     * @param string $key   The header key
     * @param string $value The header name
     *
     * @throws \InvalidArgumentException
     */
    Method [ <user> static public method setTrustedHeaderName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 629 - 636

      - Parameters [2] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <required> $value ]
      }
    }

    /**
     * Gets the trusted proxy header name.
     *
     * @param string $key The header key
     *
     * @return string The header name
     *
     * @throws \InvalidArgumentException
     */
    Method [ <user> static public method getTrustedHeaderName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 647 - 654

      - Parameters [1] {
        Parameter #0 [ <required> $key ]
      }
    }

    /**
     * Normalizes a query string.
     *
     * It builds a normalized query string, where keys/value pairs are alphabetized,
     * have consistent escaping and unneeded delimiters are removed.
     *
     * @param string $qs Query string
     *
     * @return string A normalized query string for the Request
     */
    Method [ <user> static public method normalizeQueryString ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 666 - 697

      - Parameters [1] {
        Parameter #0 [ <required> $qs ]
      }
    }

    /**
     * Enables support for the _method request parameter to determine the intended HTTP method.
     *
     * Be warned that enabling this feature might lead to CSRF issues in your code.
     * Check that you are using CSRF tokens when required.
     * If the HTTP method parameter override is enabled, an html-form with method "POST" can be altered
     * and used to send a "PUT" or "DELETE" request via the _method request parameter.
     * If these methods are not protected against CSRF, this presents a possible vulnerability.
     *
     * The HTTP method can only be overridden when the real HTTP method is POST.
     */
    Method [ <user> static public method enableHttpMethodParameterOverride ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 710 - 713
    }

    /**
     * Checks whether support for the _method request parameter is enabled.
     *
     * @return bool True when the _method request parameter is enabled, false otherwise
     */
    Method [ <user> static public method getHttpMethodParameterOverride ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 720 - 723
    }

    /**
     * Initializes HTTP request formats.
     */
    Method [ <user> static protected method initializeFormats ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1877 - 1891
    }

    Method [ <user> static private method createRequestFromFactory ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1935 - 1948

      - Parameters [7] {
        Parameter #0 [ <optional> array $query = Array ]
        Parameter #1 [ <optional> array $request = Array ]
        Parameter #2 [ <optional> array $attributes = Array ]
        Parameter #3 [ <optional> array $cookies = Array ]
        Parameter #4 [ <optional> array $files = Array ]
        Parameter #5 [ <optional> array $server = Array ]
        Parameter #6 [ <optional> $content = NULL ]
      }
    }
  }

  - Properties [21] {
    Property [ <default> public $attributes ]
    Property [ <default> public $request ]
    Property [ <default> public $query ]
    Property [ <default> public $server ]
    Property [ <default> public $files ]
    Property [ <default> public $cookies ]
    Property [ <default> public $headers ]
    Property [ <default> protected $content ]
    Property [ <default> protected $languages ]
    Property [ <default> protected $charsets ]
    Property [ <default> protected $encodings ]
    Property [ <default> protected $acceptableContentTypes ]
    Property [ <default> protected $pathInfo ]
    Property [ <default> protected $requestUri ]
    Property [ <default> protected $baseUrl ]
    Property [ <default> protected $basePath ]
    Property [ <default> protected $method ]
    Property [ <default> protected $format ]
    Property [ <default> protected $session ]
    Property [ <default> protected $locale ]
    Property [ <default> protected $defaultLocale ]
  }

  - Methods [61] {
    /**
     * Constructor.
     *
     * @param array           $query      The GET parameters
     * @param array           $request    The POST parameters
     * @param array           $attributes The request attributes (parameters parsed from the PATH_INFO, ...)
     * @param array           $cookies    The COOKIE parameters
     * @param array           $files      The FILES parameters
     * @param array           $server     The SERVER parameters
     * @param string|resource $content    The raw body data
     *
     * @api
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 230 - 233

      - Parameters [7] {
        Parameter #0 [ <optional> array $query = Array ]
        Parameter #1 [ <optional> array $request = Array ]
        Parameter #2 [ <optional> array $attributes = Array ]
        Parameter #3 [ <optional> array $cookies = Array ]
        Parameter #4 [ <optional> array $files = Array ]
        Parameter #5 [ <optional> array $server = Array ]
        Parameter #6 [ <optional> $content = NULL ]
      }
    }

    /**
     * Sets the parameters for this request.
     *
     * This method also re-initializes all properties.
     *
     * @param array           $query      The GET parameters
     * @param array           $request    The POST parameters
     * @param array           $attributes The request attributes (parameters parsed from the PATH_INFO, ...)
     * @param array           $cookies    The COOKIE parameters
     * @param array           $files      The FILES parameters
     * @param array           $server     The SERVER parameters
     * @param string|resource $content    The raw body data
     *
     * @api
     */
    Method [ <user> public method initialize ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 250 - 271

      - Parameters [7] {
        Parameter #0 [ <optional> array $query = Array ]
        Parameter #1 [ <optional> array $request = Array ]
        Parameter #2 [ <optional> array $attributes = Array ]
        Parameter #3 [ <optional> array $cookies = Array ]
        Parameter #4 [ <optional> array $files = Array ]
        Parameter #5 [ <optional> array $server = Array ]
        Parameter #6 [ <optional> $content = NULL ]
      }
    }

    /**
     * Clones a request and overrides some of its parameters.
     *
     * @param array $query      The GET parameters
     * @param array $request    The POST parameters
     * @param array $attributes The request attributes (parameters parsed from the PATH_INFO, ...)
     * @param array $cookies    The COOKIE parameters
     * @param array $files      The FILES parameters
     * @param array $server     The SERVER parameters
     *
     * @return Request The duplicated request
     *
     * @api
     */
    Method [ <user> public method duplicate ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 445 - 487

      - Parameters [6] {
        Parameter #0 [ <optional> array or NULL $query = NULL ]
        Parameter #1 [ <optional> array or NULL $request = NULL ]
        Parameter #2 [ <optional> array or NULL $attributes = NULL ]
        Parameter #3 [ <optional> array or NULL $cookies = NULL ]
        Parameter #4 [ <optional> array or NULL $files = NULL ]
        Parameter #5 [ <optional> array or NULL $server = NULL ]
      }
    }

    /**
     * Clones the current request.
     *
     * Note that the session is not cloned as duplicated requests
     * are most of the time sub-requests of the main one.
     */
    Method [ <user> public method __clone ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 495 - 504
    }

    /**
     * Returns the request as a string.
     *
     * @return string The request
     */
    Method [ <user> public method __toString ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 511 - 523
    }

    /**
     * Overrides the PHP global variables according to this request instance.
     *
     * It overrides $_GET, $_POST, $_REQUEST, $_SERVER, $_COOKIE.
     * $_FILES is never overridden, see rfc1867
     *
     * @api
     */
    Method [ <user> public method overrideGlobals ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 533 - 560
    }

    /**
     * Gets a "parameter" value.
     *
     * This method is mainly useful for libraries that want to provide some flexibility.
     *
     * Order of precedence: GET, PATH, POST
     *
     * Avoid using this method in controllers:
     *
     *  * slow
     *  * prefer to get from a "named" source
     *
     * It is better to explicitly get request parameters from the appropriate
     * public property instead (query, attributes, request).
     *
     * @param string $key     the key
     * @param mixed  $default the default value
     * @param bool   $deep    is parameter deep in multidimensional array
     *
     * @return mixed
     */
    Method [ <user> public method get ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 746 - 761

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = NULL ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Gets the Session.
     *
     * @return SessionInterface|null The session
     *
     * @api
     */
    Method [ <user> public method getSession ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 770 - 773
    }

    /**
     * Whether the request contains a Session which was started in one of the
     * previous requests.
     *
     * @return bool
     *
     * @api
     */
    Method [ <user> public method hasPreviousSession ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 783 - 787
    }

    /**
     * Whether the request contains a Session object.
     *
     * This method does not give any information about the state of the session object,
     * like whether the session is started or not. It is just a way to check if this Request
     * is associated with a Session instance.
     *
     * @return bool true when the Request contains a Session object, false otherwise
     *
     * @api
     */
    Method [ <user> public method hasSession ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 800 - 803
    }

    /**
     * Sets the Session.
     *
     * @param SessionInterface $session The Session
     *
     * @api
     */
    Method [ <user> public method setSession ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 812 - 815

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Session\SessionInterface $session ]
      }
    }

    /**
     * Returns the client IP addresses.
     *
     * In the returned array the most trusted IP address is first, and the
     * least trusted one last. The "real" client IP address is the last one,
     * but this is also the least trusted one. Trusted proxies are stripped.
     *
     * Use this method carefully; you should use getClientIp() instead.
     *
     * @return array The client IP addresses
     *
     * @see getClientIp()
     */
    Method [ <user> public method getClientIps ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 830 - 861
    }

    /**
     * Returns the client IP address.
     *
     * This method can read the client IP address from the "X-Forwarded-For" header
     * when trusted proxies were set via "setTrustedProxies()". The "X-Forwarded-For"
     * header value is a comma+space separated list of IP addresses, the left-most
     * being the original client, and each successive proxy that passed the request
     * adding the IP address where it received the request from.
     *
     * If your reverse proxy uses a different header name than "X-Forwarded-For",
     * ("Client-Ip" for instance), configure it via "setTrustedHeaderName()" with
     * the "client-ip" key.
     *
     * @return string The client IP address
     *
     * @see getClientIps()
     * @see http://en.wikipedia.org/wiki/X-Forwarded-For
     *
     * @api
     */
    Method [ <user> public method getClientIp ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 883 - 888
    }

    /**
     * Returns current script name.
     *
     * @return string
     *
     * @api
     */
    Method [ <user> public method getScriptName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 897 - 900
    }

    /**
     * Returns the path being requested relative to the executed script.
     *
     * The path info always starts with a /.
     *
     * Suppose this request is instantiated from /mysite on localhost:
     *
     *  * http://localhost/mysite              returns an empty string
     *  * http://localhost/mysite/about        returns '/about'
     *  * http://localhost/mysite/enco%20ded   returns '/enco%20ded'
     *  * http://localhost/mysite/about?var=1  returns '/about'
     *
     * @return string The raw path (i.e. not urldecoded)
     *
     * @api
     */
    Method [ <user> public method getPathInfo ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 918 - 925
    }

    /**
     * Returns the root path from which this request is executed.
     *
     * Suppose that an index.php file instantiates this request object:
     *
     *  * http://localhost/index.php         returns an empty string
     *  * http://localhost/index.php/page    returns an empty string
     *  * http://localhost/web/index.php     returns '/web'
     *  * http://localhost/we%20b/index.php  returns '/we%20b'
     *
     * @return string The raw path (i.e. not urldecoded)
     *
     * @api
     */
    Method [ <user> public method getBasePath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 941 - 948
    }

    /**
     * Returns the root URL from which this request is executed.
     *
     * The base URL never ends with a /.
     *
     * This is similar to getBasePath(), except that it also includes the
     * script filename (e.g. index.php) if one exists.
     *
     * @return string The raw URL (i.e. not urldecoded)
     *
     * @api
     */
    Method [ <user> public method getBaseUrl ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 962 - 969
    }

    /**
     * Gets the request's scheme.
     *
     * @return string
     *
     * @api
     */
    Method [ <user> public method getScheme ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 978 - 981
    }

    /**
     * Returns the port on which the request is made.
     *
     * This method can read the client port from the "X-Forwarded-Port" header
     * when trusted proxies were set via "setTrustedProxies()".
     *
     * The "X-Forwarded-Port" header must contain the client port.
     *
     * If your reverse proxy uses a different header name than "X-Forwarded-Port",
     * configure it via "setTrustedHeaderName()" with the "client-port" key.
     *
     * @return string
     *
     * @api
     */
    Method [ <user> public method getPort ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 998 - 1025
    }

    /**
     * Returns the user.
     *
     * @return string|null
     */
    Method [ <user> public method getUser ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1032 - 1035
    }

    /**
     * Returns the password.
     *
     * @return string|null
     */
    Method [ <user> public method getPassword ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1042 - 1045
    }

    /**
     * Gets the user info.
     *
     * @return string A user name and, optionally, scheme-specific information about how to gain authorization to access the server
     */
    Method [ <user> public method getUserInfo ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1052 - 1062
    }

    /**
     * Returns the HTTP host being requested.
     *
     * The port name will be appended to the host if it's non-standard.
     *
     * @return string
     *
     * @api
     */
    Method [ <user> public method getHttpHost ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1073 - 1083
    }

    /**
     * Returns the requested URI (path and query string).
     *
     * @return string The raw URI (i.e. not URI decoded)
     *
     * @api
     */
    Method [ <user> public method getRequestUri ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1092 - 1099
    }

    /**
     * Gets the scheme and HTTP host.
     *
     * If the URL was called with basic authentication, the user
     * and the password are not added to the generated string.
     *
     * @return string The scheme and HTTP host
     */
    Method [ <user> public method getSchemeAndHttpHost ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1109 - 1112
    }

    /**
     * Generates a normalized URI (URL) for the Request.
     *
     * @return string A normalized URI (URL) for the Request
     *
     * @see getQueryString()
     *
     * @api
     */
    Method [ <user> public method getUri ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1123 - 1130
    }

    /**
     * Generates a normalized URI for the given path.
     *
     * @param string $path A path to use instead of the current one
     *
     * @return string The normalized URI for the path
     *
     * @api
     */
    Method [ <user> public method getUriForPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1141 - 1144

      - Parameters [1] {
        Parameter #0 [ <required> $path ]
      }
    }

    /**
     * Generates the normalized query string for the Request.
     *
     * It builds a normalized query string, where keys/value pairs are alphabetized
     * and have consistent escaping.
     *
     * @return string|null A normalized query string for the Request
     *
     * @api
     */
    Method [ <user> public method getQueryString ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1156 - 1161
    }

    /**
     * Checks whether the request is secure or not.
     *
     * This method can read the client port from the "X-Forwarded-Proto" header
     * when trusted proxies were set via "setTrustedProxies()".
     *
     * The "X-Forwarded-Proto" header must contain the protocol: "https" or "http".
     *
     * If your reverse proxy uses a different header name than "X-Forwarded-Proto"
     * ("SSL_HTTPS" for instance), configure it via "setTrustedHeaderName()" with
     * the "client-proto" key.
     *
     * @return bool
     *
     * @api
     */
    Method [ <user> public method isSecure ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1179 - 1188
    }

    /**
     * Returns the host name.
     *
     * This method can read the client port from the "X-Forwarded-Host" header
     * when trusted proxies were set via "setTrustedProxies()".
     *
     * The "X-Forwarded-Host" header must contain the client host name.
     *
     * If your reverse proxy uses a different header name than "X-Forwarded-Host",
     * configure it via "setTrustedHeaderName()" with the "client-host" key.
     *
     * @return string
     *
     * @throws \UnexpectedValueException when the host name is invalid
     *
     * @api
     */
    Method [ <user> public method getHost ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1207 - 1249
    }

    /**
     * Sets the request method.
     *
     * @param string $method
     *
     * @api
     */
    Method [ <user> public method setMethod ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1258 - 1262

      - Parameters [1] {
        Parameter #0 [ <required> $method ]
      }
    }

    /**
     * Gets the request "intended" method.
     *
     * If the X-HTTP-Method-Override header is set, and if the method is a POST,
     * then it is used to determine the "real" intended HTTP method.
     *
     * The _method request parameter can also be used to determine the HTTP method,
     * but only if enableHttpMethodParameterOverride() has been called.
     *
     * The method is always an uppercased string.
     *
     * @return string The request method
     *
     * @api
     *
     * @see getRealMethod()
     */
    Method [ <user> public method getMethod ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1281 - 1296
    }

    /**
     * Gets the "real" request method.
     *
     * @return string The request method
     *
     * @see getMethod()
     */
    Method [ <user> public method getRealMethod ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1305 - 1308
    }

    /**
     * Gets the mime type associated with the format.
     *
     * @param string $format The format
     *
     * @return string The associated mime type (null if not found)
     *
     * @api
     */
    Method [ <user> public method getMimeType ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1319 - 1326

      - Parameters [1] {
        Parameter #0 [ <required> $format ]
      }
    }

    /**
     * Gets the format associated with the mime type.
     *
     * @param string $mimeType The associated mime type
     *
     * @return string|null The format (null if not found)
     *
     * @api
     */
    Method [ <user> public method getFormat ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1337 - 1352

      - Parameters [1] {
        Parameter #0 [ <required> $mimeType ]
      }
    }

    /**
     * Associates a format with mime types.
     *
     * @param string       $format    The format
     * @param string|array $mimeTypes The associated mime types (the preferred one must be the first as it will be used as the content type)
     *
     * @api
     */
    Method [ <user> public method setFormat ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1362 - 1369

      - Parameters [2] {
        Parameter #0 [ <required> $format ]
        Parameter #1 [ <required> $mimeTypes ]
      }
    }

    /**
     * Gets the request format.
     *
     * Here is the process to determine the format:
     *
     *  * format defined by the user (with setRequestFormat())
     *  * _format request parameter
     *  * $default
     *
     * @param string $default The default format
     *
     * @return string The request format
     *
     * @api
     */
    Method [ <user> public method getRequestFormat ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1386 - 1393

      - Parameters [1] {
        Parameter #0 [ <optional> $default = 'html' ]
      }
    }

    /**
     * Sets the request format.
     *
     * @param string $format The request format.
     *
     * @api
     */
    Method [ <user> public method setRequestFormat ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1402 - 1405

      - Parameters [1] {
        Parameter #0 [ <required> $format ]
      }
    }

    /**
     * Gets the format associated with the request.
     *
     * @return string|null The format (null if no content type is present)
     *
     * @api
     */
    Method [ <user> public method getContentType ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1414 - 1417
    }

    /**
     * Sets the default locale.
     *
     * @param string $locale
     *
     * @api
     */
    Method [ <user> public method setDefaultLocale ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1426 - 1433

      - Parameters [1] {
        Parameter #0 [ <required> $locale ]
      }
    }

    /**
     * Get the default locale.
     *
     * @return string
     */
    Method [ <user> public method getDefaultLocale ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1440 - 1443
    }

    /**
     * Sets the locale.
     *
     * @param string $locale
     *
     * @api
     */
    Method [ <user> public method setLocale ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1452 - 1455

      - Parameters [1] {
        Parameter #0 [ <required> $locale ]
      }
    }

    /**
     * Get the locale.
     *
     * @return string
     */
    Method [ <user> public method getLocale ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1462 - 1465
    }

    /**
     * Checks if the request method is of specified type.
     *
     * @param string $method Uppercase request method (GET, POST etc).
     *
     * @return bool
     */
    Method [ <user> public method isMethod ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1474 - 1477

      - Parameters [1] {
        Parameter #0 [ <required> $method ]
      }
    }

    /**
     * Checks whether the method is safe or not.
     *
     * @return bool
     *
     * @api
     */
    Method [ <user> public method isMethodSafe ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1486 - 1489
    }

    /**
     * Returns the request body content.
     *
     * @param bool $asResource If true, a resource will be returned
     *
     * @return string|resource The request body content or a resource to read the body stream.
     *
     * @throws \LogicException
     */
    Method [ <user> public method getContent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1500 - 1539

      - Parameters [1] {
        Parameter #0 [ <optional> $asResource = false ]
      }
    }

    /**
     * Gets the Etags.
     *
     * @return array The entity tags
     */
    Method [ <user> public method getETags ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1546 - 1549
    }

    /**
     * @return bool
     */
    Method [ <user> public method isNoCache ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1554 - 1557
    }

    /**
     * Returns the preferred language.
     *
     * @param array $locales An array of ordered available locales
     *
     * @return string|null The preferred locale
     *
     * @api
     */
    Method [ <user> public method getPreferredLanguage ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1568 - 1594

      - Parameters [1] {
        Parameter #0 [ <optional> array or NULL $locales = NULL ]
      }
    }

    /**
     * Gets a list of languages acceptable by the client browser.
     *
     * @return array Languages ordered in the user browser preferences
     *
     * @api
     */
    Method [ <user> public method getLanguages ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1603 - 1636
    }

    /**
     * Gets a list of charsets acceptable by the client browser.
     *
     * @return array List of charsets in preferable order
     *
     * @api
     */
    Method [ <user> public method getCharsets ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1645 - 1652
    }

    /**
     * Gets a list of encodings acceptable by the client browser.
     *
     * @return array List of encodings in preferable order
     */
    Method [ <user> public method getEncodings ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1659 - 1666
    }

    /**
     * Gets a list of content types acceptable by the client browser.
     *
     * @return array List of content types in preferable order
     *
     * @api
     */
    Method [ <user> public method getAcceptableContentTypes ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1675 - 1682
    }

    /**
     * Returns true if the request is a XMLHttpRequest.
     *
     * It works if your JavaScript library sets an X-Requested-With HTTP header.
     * It is known to work with common JavaScript frameworks:
     *
     * @link http://en.wikipedia.org/wiki/List_of_Ajax_frameworks#JavaScript
     *
     * @return bool true if the request is an XMLHttpRequest, false otherwise
     *
     * @api
     */
    Method [ <user> public method isXmlHttpRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1696 - 1699
    }

    Method [ <user> protected method prepareRequestUri ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1709 - 1749
    }

    /**
     * Prepares the base URL.
     *
     * @return string
     */
    Method [ <user> protected method prepareBaseUrl ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1756 - 1815
    }

    /**
     * Prepares the base path.
     *
     * @return string base path
     */
    Method [ <user> protected method prepareBasePath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1822 - 1841
    }

    /**
     * Prepares the path info.
     *
     * @return string path info
     */
    Method [ <user> protected method preparePathInfo ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1848 - 1872
    }

    /**
     * Sets the default PHP locale.
     *
     * @param string $locale
     */
    Method [ <user> private method setPhpDefaultLocale ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1898 - 1909

      - Parameters [1] {
        Parameter #0 [ <required> $locale ]
      }
    }

    Method [ <user> private method getUrlencodedPrefix ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1920 - 1933

      - Parameters [2] {
        Parameter #0 [ <required> $string ]
        Parameter #1 [ <required> $prefix ]
      }
    }

    Method [ <user> private method isFromTrustedProxy ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Request.php 1950 - 1953
    }
  }
}
";}i:422;a:1:{s:40:"Symfony\Component\HttpFoundation\Request";s:40:"Symfony\Component\HttpFoundation\Request";}i:423;a:2:{s:4:"name";s:63:"Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher";s:13:" ~ reflection";s:8096:"/**
 * Lazily loads listeners and subscribers from the dependency injection
 * container.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Bernhard Schussek <bschussek@gmail.com>
 * @author Jordan Alliot <jordan.alliot@gmail.com>
 */
Class [ <user> class Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher extends Symfony\Component\EventDispatcher\EventDispatcher implements Symfony\Component\EventDispatcher\EventDispatcherInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/ContainerAwareEventDispatcher.php 24-202

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [3] {
    Property [ <default> private $container ]
    Property [ <default> private $listenerIds ]
    Property [ <default> private $listeners ]
  }

  - Methods [13] {
    /**
     * Constructor.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/ContainerAwareEventDispatcher.php 52 - 55

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerInterface $container ]
      }
    }

    /**
     * Adds a service as event listener.
     *
     * @param string $eventName Event for which the listener is added
     * @param array  $callback  The service ID of the listener service & the method
     *                          name that has to be called
     * @param int    $priority  The higher this value, the earlier an event listener
     *                          will be triggered in the chain.
     *                          Defaults to 0.
     *
     * @throws \InvalidArgumentException
     */
    Method [ <user> public method addListenerService ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/ContainerAwareEventDispatcher.php 69 - 76

      - Parameters [3] {
        Parameter #0 [ <required> $eventName ]
        Parameter #1 [ <required> $callback ]
        Parameter #2 [ <optional> $priority = 0 ]
      }
    }

    Method [ <user, overwrites Symfony\Component\EventDispatcher\EventDispatcher, prototype Symfony\Component\EventDispatcher\EventDispatcherInterface> public method removeListener ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/ContainerAwareEventDispatcher.php 78 - 100

      - Parameters [2] {
        Parameter #0 [ <required> $eventName ]
        Parameter #1 [ <required> $listener ]
      }
    }

    /**
     * @see EventDispatcherInterface::hasListeners()
     */
    Method [ <user, overwrites Symfony\Component\EventDispatcher\EventDispatcher, prototype Symfony\Component\EventDispatcher\EventDispatcherInterface> public method hasListeners ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/ContainerAwareEventDispatcher.php 105 - 116

      - Parameters [1] {
        Parameter #0 [ <optional> $eventName = NULL ]
      }
    }

    /**
     * @see EventDispatcherInterface::getListeners()
     */
    Method [ <user, overwrites Symfony\Component\EventDispatcher\EventDispatcher, prototype Symfony\Component\EventDispatcher\EventDispatcherInterface> public method getListeners ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/ContainerAwareEventDispatcher.php 121 - 132

      - Parameters [1] {
        Parameter #0 [ <optional> $eventName = NULL ]
      }
    }

    /**
     * Adds a service as event subscriber.
     *
     * @param string $serviceId The service ID of the subscriber service
     * @param string $class     The service's class name (which must implement EventSubscriberInterface)
     */
    Method [ <user> public method addSubscriberService ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/ContainerAwareEventDispatcher.php 140 - 153

      - Parameters [2] {
        Parameter #0 [ <required> $serviceId ]
        Parameter #1 [ <required> $class ]
      }
    }

    /**
     * {@inheritdoc}
     *
     * Lazily loads listeners for this event from the dependency injection
     * container.
     *
     * @throws \InvalidArgumentException if the service is not defined
     */
    Method [ <user, overwrites Symfony\Component\EventDispatcher\EventDispatcher, prototype Symfony\Component\EventDispatcher\EventDispatcherInterface> public method dispatch ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/ContainerAwareEventDispatcher.php 163 - 168

      - Parameters [2] {
        Parameter #0 [ <required> $eventName ]
        Parameter #1 [ <optional> Symfony\Component\EventDispatcher\Event or NULL $event = NULL ]
      }
    }

    Method [ <user> public method getContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/ContainerAwareEventDispatcher.php 170 - 173
    }

    /**
     * Lazily loads listeners for this event from the dependency injection
     * container.
     *
     * @param string $eventName The name of the event to dispatch. The name of
     *                          the event is the name of the method that is
     *                          invoked on listeners.
     */
    Method [ <user> protected method lazyLoad ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/ContainerAwareEventDispatcher.php 183 - 201

      - Parameters [1] {
        Parameter #0 [ <required> $eventName ]
      }
    }

    /**
     * @see EventDispatcherInterface::addListener()
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\EventDispatcher, prototype Symfony\Component\EventDispatcher\EventDispatcherInterface> public method addListener ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/EventDispatcher.php 93 - 97

      - Parameters [3] {
        Parameter #0 [ <required> $eventName ]
        Parameter #1 [ <required> $listener ]
        Parameter #2 [ <optional> $priority = 0 ]
      }
    }

    /**
     * @see EventDispatcherInterface::addSubscriber()
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\EventDispatcher, prototype Symfony\Component\EventDispatcher\EventDispatcherInterface> public method addSubscriber ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/EventDispatcher.php 120 - 133

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\EventDispatcher\EventSubscriberInterface $subscriber ]
      }
    }

    /**
     * @see EventDispatcherInterface::removeSubscriber()
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\EventDispatcher, prototype Symfony\Component\EventDispatcher\EventDispatcherInterface> public method removeSubscriber ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/EventDispatcher.php 138 - 149

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\EventDispatcher\EventSubscriberInterface $subscriber ]
      }
    }

    /**
     * Triggers the listeners of an event.
     *
     * This method can be overridden to add functionality that is executed
     * for each listener.
     *
     * @param callable[] $listeners The event listeners.
     * @param string     $eventName The name of the event to dispatch.
     * @param Event      $event     The event object to pass to the event handlers/listeners.
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\EventDispatcher> protected method doDispatch ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/EventDispatcher.php 161 - 169

      - Parameters [3] {
        Parameter #0 [ <required> $listeners ]
        Parameter #1 [ <required> $eventName ]
        Parameter #2 [ <required> Symfony\Component\EventDispatcher\Event $event ]
      }
    }
  }
}
";}i:424;a:3:{s:58:"Symfony\Component\EventDispatcher\EventDispatcherInterface";s:58:"Symfony\Component\EventDispatcher\EventDispatcherInterface";s:49:"Symfony\Component\EventDispatcher\EventDispatcher";s:49:"Symfony\Component\EventDispatcher\EventDispatcher";s:63:"Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher";s:63:"Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher";}i:425;a:2:{s:4:"name";s:27:"appDevDebugProjectContainer";s:13:" ~ reflection";s:126038:"/**
 * appDevDebugProjectContainer.
 *
 * This class has been auto-generated
 * by the Symfony Dependency Injection Component.
 */
Class [ <user> class appDevDebugProjectContainer extends Symfony\Component\DependencyInjection\Container implements Symfony\Component\DependencyInjection\ContainerInterface, Symfony\Component\DependencyInjection\IntrospectableContainerInterface ] {
  @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 17-4503

  - Constants [5] {
    Constant [ integer EXCEPTION_ON_INVALID_REFERENCE ] { 1 }
    Constant [ integer NULL_ON_INVALID_REFERENCE ] { 2 }
    Constant [ integer IGNORE_ON_INVALID_REFERENCE ] { 3 }
    Constant [ string SCOPE_CONTAINER ] { container }
    Constant [ string SCOPE_PROTOTYPE ] { prototype }
  }

  - Static properties [0] {
  }

  - Static methods [2] {
    /**
     * Camelizes a string.
     *
     * @param string $id A string to camelize
     *
     * @return string The camelized string
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\Container> static public method camelize ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php 558 - 561

      - Parameters [1] {
        Parameter #0 [ <required> $id ]
      }
    }

    /**
     * A string to underscore.
     *
     * @param string $id The string to underscore
     *
     * @return string The underscored string
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\Container> static public method underscore ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php 570 - 573

      - Parameters [1] {
        Parameter #0 [ <required> $id ]
      }
    }
  }

  - Properties [11] {
    Property [ <default> private $parameters ]
    Property [ <default> private $targetDirs ]
    Property [ <default> protected $parameterBag ]
    Property [ <default> protected $services ]
    Property [ <default> protected $methodMap ]
    Property [ <default> protected $aliases ]
    Property [ <default> protected $scopes ]
    Property [ <default> protected $scopeChildren ]
    Property [ <default> protected $scopedServices ]
    Property [ <default> protected $scopeStacks ]
    Property [ <default> protected $loading ]
  }

  - Methods [251] {
    /**
     * Constructor.
     */
    Method [ <user, overwrites Symfony\Component\DependencyInjection\Container, ctor> public method __construct ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 25 - 295
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Symfony\Component\DependencyInjection\Container, prototype Symfony\Component\DependencyInjection\Container> public method compile ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 300 - 303
    }

    /**
     * Gets the 'annotation_reader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Annotations\FileCacheReader A Doctrine\Common\Annotations\FileCacheReader instance.
     */
    Method [ <user> protected method getAnnotationReaderService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 313 - 316
    }

    /**
     * Gets the 'assetic.asset_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Factory\LazyAssetManager A Assetic\Factory\LazyAssetManager instance.
     */
    Method [ <user> protected method getAssetic_AssetManagerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 326 - 333
    }

    /**
     * Gets the 'assetic.controller' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\Controller\AsseticController A Symfony\Bundle\AsseticBundle\Controller\AsseticController instance.
     */
    Method [ <user> protected method getAssetic_ControllerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 343 - 346
    }

    /**
     * Gets the 'assetic.filter.cssrewrite' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Assetic\Filter\CssRewriteFilter A Assetic\Filter\CssRewriteFilter instance.
     */
    Method [ <user> protected method getAssetic_Filter_CssrewriteService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 356 - 359
    }

    /**
     * Gets the 'assetic.filter_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\FilterManager A Symfony\Bundle\AsseticBundle\FilterManager instance.
     */
    Method [ <user> protected method getAssetic_FilterManagerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 369 - 372
    }

    /**
     * Gets the 'assetic.request_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\AsseticBundle\EventListener\RequestListener A Symfony\Bundle\AsseticBundle\EventListener\RequestListener instance.
     */
    Method [ <user> protected method getAssetic_RequestListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 382 - 385
    }

    /**
     * Gets the 'cache_clearer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer A Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer instance.
     */
    Method [ <user> protected method getCacheClearerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 395 - 398
    }

    /**
     * Gets the 'cache_warmer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate A Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate instance.
     */
    Method [ <user> protected method getCacheWarmerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 408 - 416
    }

    /**
     * Gets the 'data_collector.dump' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector A Symfony\Component\HttpKernel\DataCollector\DumpDataCollector instance.
     */
    Method [ <user> protected method getDataCollector_DumpService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 426 - 429
    }

    /**
     * Gets the 'data_collector.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataCollector A Symfony\Component\Form\Extension\DataCollector\FormDataCollector instance.
     */
    Method [ <user> protected method getDataCollector_FormService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 439 - 442
    }

    /**
     * Gets the 'data_collector.form.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor A Symfony\Component\Form\Extension\DataCollector\FormDataExtractor instance.
     */
    Method [ <user> protected method getDataCollector_Form_ExtractorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 452 - 455
    }

    /**
     * Gets the 'data_collector.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\RequestDataCollector A Symfony\Component\HttpKernel\DataCollector\RequestDataCollector instance.
     */
    Method [ <user> protected method getDataCollector_RequestService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 465 - 468
    }

    /**
     * Gets the 'data_collector.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector A Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector instance.
     */
    Method [ <user> protected method getDataCollector_RouterService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 478 - 481
    }

    /**
     * Gets the 'debug.controller_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver A Symfony\Component\HttpKernel\Controller\TraceableControllerResolver instance.
     */
    Method [ <user> protected method getDebug_ControllerResolverService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 491 - 494
    }

    /**
     * Gets the 'debug.debug_handlers_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener A Symfony\Component\HttpKernel\EventListener\DebugHandlersListener instance.
     */
    Method [ <user> protected method getDebug_DebugHandlersListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 504 - 507
    }

    /**
     * Gets the 'debug.dump_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DumpListener A Symfony\Component\HttpKernel\EventListener\DumpListener instance.
     */
    Method [ <user> protected method getDebug_DumpListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 517 - 520
    }

    /**
     * Gets the 'debug.event_dispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher A Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher instance.
     */
    Method [ <user> protected method getDebug_EventDispatcherService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 530 - 563
    }

    /**
     * Gets the 'debug.stopwatch' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Stopwatch\Stopwatch A Symfony\Component\Stopwatch\Stopwatch instance.
     */
    Method [ <user> protected method getDebug_StopwatchService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 573 - 576
    }

    /**
     * Gets the 'debug.templating.engine.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TimedPhpEngine A Symfony\Bundle\FrameworkBundle\Templating\TimedPhpEngine instance.
     */
    Method [ <user> protected method getDebug_Templating_Engine_PhpService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 586 - 594
    }

    /**
     * Gets the 'doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry A Doctrine\Bundle\DoctrineBundle\Registry instance.
     */
    Method [ <user> protected method getDoctrineService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 604 - 607
    }

    /**
     * Gets the 'doctrine.dbal.connection_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ConnectionFactory A Doctrine\Bundle\DoctrineBundle\ConnectionFactory instance.
     */
    Method [ <user> protected method getDoctrine_Dbal_ConnectionFactoryService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 617 - 620
    }

    /**
     * Gets the 'doctrine.dbal.default_connection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\DBAL\Connection A Doctrine\DBAL\Connection instance.
     */
    Method [ <user> protected method getDoctrine_Dbal_DefaultConnectionService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 630 - 643
    }

    /**
     * Gets the 'doctrine.orm.default_entity_listener_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ORM\Mapping\DefaultEntityListenerResolver A Doctrine\ORM\Mapping\DefaultEntityListenerResolver instance.
     */
    Method [ <user> protected method getDoctrine_Orm_DefaultEntityListenerResolverService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 653 - 656
    }

    /**
     * Gets the 'doctrine.orm.default_entity_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @param bool    $lazyLoad whether to try lazy-loading the service with a proxy
     *
     * @return \Doctrine\ORM\EntityManager A Doctrine\ORM\EntityManager instance.
     */
    Method [ <user> protected method getDoctrine_Orm_DefaultEntityManagerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 668 - 693

      - Parameters [1] {
        Parameter #0 [ <optional> $lazyLoad = true ]
      }
    }

    /**
     * Gets the 'doctrine.orm.default_listeners.attach_entity_listeners' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\ORM\Tools\AttachEntityListenersListener A Doctrine\ORM\Tools\AttachEntityListenersListener instance.
     */
    Method [ <user> protected method getDoctrine_Orm_DefaultListeners_AttachEntityListenersService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 703 - 706
    }

    /**
     * Gets the 'doctrine.orm.default_manager_configurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator A Doctrine\Bundle\DoctrineBundle\ManagerConfigurator instance.
     */
    Method [ <user> protected method getDoctrine_Orm_DefaultManagerConfiguratorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 716 - 719
    }

    /**
     * Gets the 'doctrine.orm.validator.unique' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator A Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator instance.
     */
    Method [ <user> protected method getDoctrine_Orm_Validator_UniqueService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 729 - 732
    }

    /**
     * Gets the 'doctrine.orm.validator_initializer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer A Symfony\Bridge\Doctrine\Validator\DoctrineInitializer instance.
     */
    Method [ <user> protected method getDoctrine_Orm_ValidatorInitializerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 742 - 745
    }

    /**
     * Gets the 'doctrine_cache.contains_command' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\ContainsCommand A Doctrine\Bundle\DoctrineCacheBundle\Command\ContainsCommand instance.
     */
    Method [ <user> protected method getDoctrineCache_ContainsCommandService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 755 - 758
    }

    /**
     * Gets the 'doctrine_cache.delete_command' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\DeleteCommand A Doctrine\Bundle\DoctrineCacheBundle\Command\DeleteCommand instance.
     */
    Method [ <user> protected method getDoctrineCache_DeleteCommandService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 768 - 771
    }

    /**
     * Gets the 'doctrine_cache.flush_command' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\FlushCommand A Doctrine\Bundle\DoctrineCacheBundle\Command\FlushCommand instance.
     */
    Method [ <user> protected method getDoctrineCache_FlushCommandService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 781 - 784
    }

    /**
     * Gets the 'doctrine_cache.providers.doctrine.orm.default_metadata_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance.
     */
    Method [ <user> protected method getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 794 - 801
    }

    /**
     * Gets the 'doctrine_cache.providers.doctrine.orm.default_query_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance.
     */
    Method [ <user> protected method getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 811 - 818
    }

    /**
     * Gets the 'doctrine_cache.providers.doctrine.orm.default_result_cache' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache A Doctrine\Common\Cache\ArrayCache instance.
     */
    Method [ <user> protected method getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 828 - 835
    }

    /**
     * Gets the 'doctrine_cache.stats_command' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\StatsCommand A Doctrine\Bundle\DoctrineCacheBundle\Command\StatsCommand instance.
     */
    Method [ <user> protected method getDoctrineCache_StatsCommandService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 845 - 848
    }

    /**
     * Gets the 'file_locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Config\FileLocator A Symfony\Component\HttpKernel\Config\FileLocator instance.
     */
    Method [ <user> protected method getFileLocatorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 858 - 861
    }

    /**
     * Gets the 'filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Filesystem\Filesystem A Symfony\Component\Filesystem\Filesystem instance.
     */
    Method [ <user> protected method getFilesystemService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 871 - 874
    }

    /**
     * Gets the 'form.csrf_provider' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\CsrfProvider\CsrfTokenManagerAdapter A Symfony\Component\Form\Extension\Csrf\CsrfProvider\CsrfTokenManagerAdapter instance.
     */
    Method [ <user> protected method getForm_CsrfProviderService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 884 - 887
    }

    /**
     * Gets the 'form.factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\FormFactory A Symfony\Component\Form\FormFactory instance.
     */
    Method [ <user> protected method getForm_FactoryService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 897 - 900
    }

    /**
     * Gets the 'form.registry' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\FormRegistry A Symfony\Component\Form\FormRegistry instance.
     */
    Method [ <user> protected method getForm_RegistryService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 910 - 913
    }

    /**
     * Gets the 'form.resolved_type_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy A Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy instance.
     */
    Method [ <user> protected method getForm_ResolvedTypeFactoryService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 923 - 926
    }

    /**
     * Gets the 'form.type.birthday' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\BirthdayType A Symfony\Component\Form\Extension\Core\Type\BirthdayType instance.
     */
    Method [ <user> protected method getForm_Type_BirthdayService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 936 - 939
    }

    /**
     * Gets the 'form.type.button' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ButtonType A Symfony\Component\Form\Extension\Core\Type\ButtonType instance.
     */
    Method [ <user> protected method getForm_Type_ButtonService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 949 - 952
    }

    /**
     * Gets the 'form.type.checkbox' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CheckboxType A Symfony\Component\Form\Extension\Core\Type\CheckboxType instance.
     */
    Method [ <user> protected method getForm_Type_CheckboxService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 962 - 965
    }

    /**
     * Gets the 'form.type.choice' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ChoiceType A Symfony\Component\Form\Extension\Core\Type\ChoiceType instance.
     */
    Method [ <user> protected method getForm_Type_ChoiceService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 975 - 978
    }

    /**
     * Gets the 'form.type.collection' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CollectionType A Symfony\Component\Form\Extension\Core\Type\CollectionType instance.
     */
    Method [ <user> protected method getForm_Type_CollectionService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 988 - 991
    }

    /**
     * Gets the 'form.type.country' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CountryType A Symfony\Component\Form\Extension\Core\Type\CountryType instance.
     */
    Method [ <user> protected method getForm_Type_CountryService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1001 - 1004
    }

    /**
     * Gets the 'form.type.currency' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CurrencyType A Symfony\Component\Form\Extension\Core\Type\CurrencyType instance.
     */
    Method [ <user> protected method getForm_Type_CurrencyService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1014 - 1017
    }

    /**
     * Gets the 'form.type.date' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateType A Symfony\Component\Form\Extension\Core\Type\DateType instance.
     */
    Method [ <user> protected method getForm_Type_DateService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1027 - 1030
    }

    /**
     * Gets the 'form.type.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateTimeType A Symfony\Component\Form\Extension\Core\Type\DateTimeType instance.
     */
    Method [ <user> protected method getForm_Type_DatetimeService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1040 - 1043
    }

    /**
     * Gets the 'form.type.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\EmailType A Symfony\Component\Form\Extension\Core\Type\EmailType instance.
     */
    Method [ <user> protected method getForm_Type_EmailService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1053 - 1056
    }

    /**
     * Gets the 'form.type.entity' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\Type\EntityType A Symfony\Bridge\Doctrine\Form\Type\EntityType instance.
     */
    Method [ <user> protected method getForm_Type_EntityService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1066 - 1069
    }

    /**
     * Gets the 'form.type.file' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FileType A Symfony\Component\Form\Extension\Core\Type\FileType instance.
     */
    Method [ <user> protected method getForm_Type_FileService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1079 - 1082
    }

    /**
     * Gets the 'form.type.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FormType A Symfony\Component\Form\Extension\Core\Type\FormType instance.
     */
    Method [ <user> protected method getForm_Type_FormService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1092 - 1095
    }

    /**
     * Gets the 'form.type.hidden' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\HiddenType A Symfony\Component\Form\Extension\Core\Type\HiddenType instance.
     */
    Method [ <user> protected method getForm_Type_HiddenService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1105 - 1108
    }

    /**
     * Gets the 'form.type.integer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\IntegerType A Symfony\Component\Form\Extension\Core\Type\IntegerType instance.
     */
    Method [ <user> protected method getForm_Type_IntegerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1118 - 1121
    }

    /**
     * Gets the 'form.type.language' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LanguageType A Symfony\Component\Form\Extension\Core\Type\LanguageType instance.
     */
    Method [ <user> protected method getForm_Type_LanguageService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1131 - 1134
    }

    /**
     * Gets the 'form.type.locale' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LocaleType A Symfony\Component\Form\Extension\Core\Type\LocaleType instance.
     */
    Method [ <user> protected method getForm_Type_LocaleService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1144 - 1147
    }

    /**
     * Gets the 'form.type.money' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\MoneyType A Symfony\Component\Form\Extension\Core\Type\MoneyType instance.
     */
    Method [ <user> protected method getForm_Type_MoneyService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1157 - 1160
    }

    /**
     * Gets the 'form.type.number' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\NumberType A Symfony\Component\Form\Extension\Core\Type\NumberType instance.
     */
    Method [ <user> protected method getForm_Type_NumberService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1170 - 1173
    }

    /**
     * Gets the 'form.type.password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PasswordType A Symfony\Component\Form\Extension\Core\Type\PasswordType instance.
     */
    Method [ <user> protected method getForm_Type_PasswordService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1183 - 1186
    }

    /**
     * Gets the 'form.type.percent' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PercentType A Symfony\Component\Form\Extension\Core\Type\PercentType instance.
     */
    Method [ <user> protected method getForm_Type_PercentService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1196 - 1199
    }

    /**
     * Gets the 'form.type.radio' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RadioType A Symfony\Component\Form\Extension\Core\Type\RadioType instance.
     */
    Method [ <user> protected method getForm_Type_RadioService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1209 - 1212
    }

    /**
     * Gets the 'form.type.repeated' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RepeatedType A Symfony\Component\Form\Extension\Core\Type\RepeatedType instance.
     */
    Method [ <user> protected method getForm_Type_RepeatedService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1222 - 1225
    }

    /**
     * Gets the 'form.type.reset' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ResetType A Symfony\Component\Form\Extension\Core\Type\ResetType instance.
     */
    Method [ <user> protected method getForm_Type_ResetService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1235 - 1238
    }

    /**
     * Gets the 'form.type.search' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SearchType A Symfony\Component\Form\Extension\Core\Type\SearchType instance.
     */
    Method [ <user> protected method getForm_Type_SearchService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1248 - 1251
    }

    /**
     * Gets the 'form.type.submit' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SubmitType A Symfony\Component\Form\Extension\Core\Type\SubmitType instance.
     */
    Method [ <user> protected method getForm_Type_SubmitService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1261 - 1264
    }

    /**
     * Gets the 'form.type.text' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextType A Symfony\Component\Form\Extension\Core\Type\TextType instance.
     */
    Method [ <user> protected method getForm_Type_TextService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1274 - 1277
    }

    /**
     * Gets the 'form.type.textarea' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextareaType A Symfony\Component\Form\Extension\Core\Type\TextareaType instance.
     */
    Method [ <user> protected method getForm_Type_TextareaService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1287 - 1290
    }

    /**
     * Gets the 'form.type.time' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimeType A Symfony\Component\Form\Extension\Core\Type\TimeType instance.
     */
    Method [ <user> protected method getForm_Type_TimeService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1300 - 1303
    }

    /**
     * Gets the 'form.type.timezone' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimezoneType A Symfony\Component\Form\Extension\Core\Type\TimezoneType instance.
     */
    Method [ <user> protected method getForm_Type_TimezoneService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1313 - 1316
    }

    /**
     * Gets the 'form.type.url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\UrlType A Symfony\Component\Form\Extension\Core\Type\UrlType instance.
     */
    Method [ <user> protected method getForm_Type_UrlService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1326 - 1329
    }

    /**
     * Gets the 'form.type_extension.csrf' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension A Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension instance.
     */
    Method [ <user> protected method getForm_TypeExtension_CsrfService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1339 - 1342
    }

    /**
     * Gets the 'form.type_extension.form.data_collector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension A Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension instance.
     */
    Method [ <user> protected method getForm_TypeExtension_Form_DataCollectorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1352 - 1355
    }

    /**
     * Gets the 'form.type_extension.form.http_foundation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension A Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension instance.
     */
    Method [ <user> protected method getForm_TypeExtension_Form_HttpFoundationService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1365 - 1368
    }

    /**
     * Gets the 'form.type_extension.form.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension instance.
     */
    Method [ <user> protected method getForm_TypeExtension_Form_ValidatorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1378 - 1381
    }

    /**
     * Gets the 'form.type_extension.repeated.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension instance.
     */
    Method [ <user> protected method getForm_TypeExtension_Repeated_ValidatorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1391 - 1394
    }

    /**
     * Gets the 'form.type_extension.submit.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension A Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension instance.
     */
    Method [ <user> protected method getForm_TypeExtension_Submit_ValidatorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1404 - 1407
    }

    /**
     * Gets the 'form.type_guesser.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser A Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser instance.
     */
    Method [ <user> protected method getForm_TypeGuesser_DoctrineService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1417 - 1420
    }

    /**
     * Gets the 'form.type_guesser.validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser A Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser instance.
     */
    Method [ <user> protected method getForm_TypeGuesser_ValidatorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1430 - 1433
    }

    /**
     * Gets the 'fragment.handler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\FragmentHandler A Symfony\Component\HttpKernel\Fragment\FragmentHandler instance.
     */
    Method [ <user> protected method getFragment_HandlerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1443 - 1453
    }

    /**
     * Gets the 'fragment.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener A Symfony\Component\HttpKernel\EventListener\FragmentListener instance.
     */
    Method [ <user> protected method getFragment_ListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1463 - 1466
    }

    /**
     * Gets the 'fragment.renderer.esi' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer A Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer instance.
     */
    Method [ <user> protected method getFragment_Renderer_EsiService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1476 - 1483
    }

    /**
     * Gets the 'fragment.renderer.hinclude' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Fragment\ContainerAwareHIncludeFragmentRenderer A Symfony\Bundle\FrameworkBundle\Fragment\ContainerAwareHIncludeFragmentRenderer instance.
     */
    Method [ <user> protected method getFragment_Renderer_HincludeService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1493 - 1500
    }

    /**
     * Gets the 'fragment.renderer.inline' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer A Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer instance.
     */
    Method [ <user> protected method getFragment_Renderer_InlineService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1510 - 1517
    }

    /**
     * Gets the 'fragment.renderer.ssi' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer A Symfony\Component\HttpKernel\Fragment\SsiFragmentRenderer instance.
     */
    Method [ <user> protected method getFragment_Renderer_SsiService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1527 - 1534
    }

    /**
     * Gets the 'hautelook_alice.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Hautelook\AliceBundle\Alice\Loader A Hautelook\AliceBundle\Alice\Loader instance.
     */
    Method [ <user> protected method getHautelookAlice_LoaderService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1544 - 1547
    }

    /**
     * Gets the 'hautelook_alice.loader.yaml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Nelmio\Alice\Loader\Yaml A Nelmio\Alice\Loader\Yaml instance.
     */
    Method [ <user> protected method getHautelookAlice_Loader_YamlService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1557 - 1560
    }

    /**
     * Gets the 'hautelook_alice.solarium.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Hautelook\AliceBundle\Solarium\Loader A Hautelook\AliceBundle\Solarium\Loader instance.
     */
    Method [ <user> protected method getHautelookAlice_Solarium_LoaderService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1570 - 1573
    }

    /**
     * Gets the 'http_kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel A Symfony\Component\HttpKernel\DependencyInjection\ContainerAwareHttpKernel instance.
     */
    Method [ <user> protected method getHttpKernelService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1583 - 1586
    }

    /**
     * Gets the 'kernel' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    Method [ <user> protected method getKernelService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1596 - 1599
    }

    /**
     * Gets the 'locale_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener A Symfony\Component\HttpKernel\EventListener\LocaleListener instance.
     */
    Method [ <user> protected method getLocaleListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1609 - 1612
    }

    /**
     * Gets the 'logger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    Method [ <user> protected method getLoggerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1622 - 1632
    }

    /**
     * Gets the 'monolog.handler.console' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler A Symfony\Bridge\Monolog\Handler\ConsoleHandler instance.
     */
    Method [ <user> protected method getMonolog_Handler_ConsoleService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1642 - 1649
    }

    /**
     * Gets the 'monolog.handler.console_very_verbose' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler A Symfony\Bridge\Monolog\Handler\ConsoleHandler instance.
     */
    Method [ <user> protected method getMonolog_Handler_ConsoleVeryVerboseService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1659 - 1666
    }

    /**
     * Gets the 'monolog.handler.debug' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\DebugHandler A Symfony\Bridge\Monolog\Handler\DebugHandler instance.
     */
    Method [ <user> protected method getMonolog_Handler_DebugService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1676 - 1679
    }

    /**
     * Gets the 'monolog.handler.main' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Monolog\Handler\StreamHandler A Monolog\Handler\StreamHandler instance.
     */
    Method [ <user> protected method getMonolog_Handler_MainService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1689 - 1696
    }

    /**
     * Gets the 'monolog.handler.null_internal' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Monolog\Handler\NullHandler A Monolog\Handler\NullHandler instance.
     */
    Method [ <user> protected method getMonolog_Handler_NullInternalService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1706 - 1709
    }

    /**
     * Gets the 'monolog.logger.assetic' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    Method [ <user> protected method getMonolog_Logger_AsseticService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1719 - 1728
    }

    /**
     * Gets the 'monolog.logger.doctrine' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    Method [ <user> protected method getMonolog_Logger_DoctrineService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1738 - 1747
    }

    /**
     * Gets the 'monolog.logger.event' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    Method [ <user> protected method getMonolog_Logger_EventService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1757 - 1766
    }

    /**
     * Gets the 'monolog.logger.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    Method [ <user> protected method getMonolog_Logger_PhpService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1776 - 1785
    }

    /**
     * Gets the 'monolog.logger.profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    Method [ <user> protected method getMonolog_Logger_ProfilerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1795 - 1804
    }

    /**
     * Gets the 'monolog.logger.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    Method [ <user> protected method getMonolog_Logger_RequestService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1814 - 1823
    }

    /**
     * Gets the 'monolog.logger.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    Method [ <user> protected method getMonolog_Logger_RouterService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1833 - 1842
    }

    /**
     * Gets the 'monolog.logger.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    Method [ <user> protected method getMonolog_Logger_SecurityService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1852 - 1861
    }

    /**
     * Gets the 'monolog.logger.templating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    Method [ <user> protected method getMonolog_Logger_TemplatingService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1871 - 1880
    }

    /**
     * Gets the 'monolog.logger.translation' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Monolog\Logger A Symfony\Bridge\Monolog\Logger instance.
     */
    Method [ <user> protected method getMonolog_Logger_TranslationService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1890 - 1899
    }

    /**
     * Gets the 'profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\Profiler\Profiler A Symfony\Component\HttpKernel\Profiler\Profiler instance.
     */
    Method [ <user> protected method getProfilerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1909 - 1940
    }

    /**
     * Gets the 'profiler_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ProfilerListener A Symfony\Component\HttpKernel\EventListener\ProfilerListener instance.
     */
    Method [ <user> protected method getProfilerListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1950 - 1953
    }

    /**
     * Gets the 'property_accessor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor A Symfony\Component\PropertyAccess\PropertyAccessor instance.
     */
    Method [ <user> protected method getPropertyAccessorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1963 - 1966
    }

    /**
     * Gets the 'request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     * @throws InactiveScopeException when the 'request' service is requested while the 'request' scope is not active
     */
    Method [ <user> protected method getRequestService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1977 - 1984
    }

    /**
     * Gets the 'request_stack' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack A Symfony\Component\HttpFoundation\RequestStack instance.
     */
    Method [ <user> protected method getRequestStackService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 1994 - 1997
    }

    /**
     * Gets the 'response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ResponseListener A Symfony\Component\HttpKernel\EventListener\ResponseListener instance.
     */
    Method [ <user> protected method getResponseListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2007 - 2010
    }

    /**
     * Gets the 'router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router A Symfony\Bundle\FrameworkBundle\Routing\Router instance.
     */
    Method [ <user> protected method getRouterService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2020 - 2023
    }

    /**
     * Gets the 'router_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener A Symfony\Component\HttpKernel\EventListener\RouterListener instance.
     */
    Method [ <user> protected method getRouterListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2033 - 2036
    }

    /**
     * Gets the 'routing.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader A Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader instance.
     */
    Method [ <user> protected method getRouting_LoaderService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2046 - 2063
    }

    /**
     * Gets the 'security.authentication_utils' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\Authentication\AuthenticationUtils A Symfony\Component\Security\Http\Authentication\AuthenticationUtils instance.
     */
    Method [ <user> protected method getSecurity_AuthenticationUtilsService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2073 - 2076
    }

    /**
     * Gets the 'security.authorization_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker A Symfony\Component\Security\Core\Authorization\AuthorizationChecker instance.
     */
    Method [ <user> protected method getSecurity_AuthorizationCheckerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2086 - 2089
    }

    /**
     * Gets the 'security.context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\SecurityContext A Symfony\Component\Security\Core\SecurityContext instance.
     */
    Method [ <user> protected method getSecurity_ContextService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2099 - 2102
    }

    /**
     * Gets the 'security.csrf.token_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Csrf\CsrfTokenManager A Symfony\Component\Security\Csrf\CsrfTokenManager instance.
     */
    Method [ <user> protected method getSecurity_Csrf_TokenManagerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2112 - 2115
    }

    /**
     * Gets the 'security.encoder_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\EncoderFactory A Symfony\Component\Security\Core\Encoder\EncoderFactory instance.
     */
    Method [ <user> protected method getSecurity_EncoderFactoryService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2125 - 2128
    }

    /**
     * Gets the 'security.firewall' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\Firewall A Symfony\Component\Security\Http\Firewall instance.
     */
    Method [ <user> protected method getSecurity_FirewallService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2138 - 2141
    }

    /**
     * Gets the 'security.firewall.map.context.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    Method [ <user> protected method getSecurity_Firewall_Map_Context_DefaultService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2151 - 2161
    }

    /**
     * Gets the 'security.firewall.map.context.dev' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext A Symfony\Bundle\SecurityBundle\Security\FirewallContext instance.
     */
    Method [ <user> protected method getSecurity_Firewall_Map_Context_DevService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2171 - 2174
    }

    /**
     * Gets the 'security.password_encoder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\UserPasswordEncoder A Symfony\Component\Security\Core\Encoder\UserPasswordEncoder instance.
     */
    Method [ <user> protected method getSecurity_PasswordEncoderService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2184 - 2187
    }

    /**
     * Gets the 'security.rememberme.response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Http\RememberMe\ResponseListener A Symfony\Component\Security\Http\RememberMe\ResponseListener instance.
     */
    Method [ <user> protected method getSecurity_Rememberme_ResponseListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2197 - 2200
    }

    /**
     * Gets the 'security.secure_random' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Util\SecureRandom A Symfony\Component\Security\Core\Util\SecureRandom instance.
     */
    Method [ <user> protected method getSecurity_SecureRandomService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2210 - 2213
    }

    /**
     * Gets the 'security.token_storage' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage A Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage instance.
     */
    Method [ <user> protected method getSecurity_TokenStorageService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2223 - 2226
    }

    /**
     * Gets the 'security.validator.user_password' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator A Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator instance.
     */
    Method [ <user> protected method getSecurity_Validator_UserPasswordService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2236 - 2239
    }

    /**
     * Gets the 'sensio_distribution.security_checker' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \SensioLabs\Security\SecurityChecker A SensioLabs\Security\SecurityChecker instance.
     */
    Method [ <user> protected method getSensioDistribution_SecurityCheckerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2249 - 2252
    }

    /**
     * Gets the 'sensio_distribution.security_checker.command' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \SensioLabs\Security\Command\SecurityCheckerCommand A SensioLabs\Security\Command\SecurityCheckerCommand instance.
     */
    Method [ <user> protected method getSensioDistribution_SecurityChecker_CommandService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2262 - 2265
    }

    /**
     * Gets the 'sensio_distribution.webconfigurator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\DistributionBundle\Configurator\Configurator A Sensio\Bundle\DistributionBundle\Configurator\Configurator instance.
     */
    Method [ <user> protected method getSensioDistribution_WebconfiguratorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2275 - 2283
    }

    /**
     * Gets the 'sensio_framework_extra.cache.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener instance.
     */
    Method [ <user> protected method getSensioFrameworkExtra_Cache_ListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2293 - 2296
    }

    /**
     * Gets the 'sensio_framework_extra.controller.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener instance.
     */
    Method [ <user> protected method getSensioFrameworkExtra_Controller_ListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2306 - 2309
    }

    /**
     * Gets the 'sensio_framework_extra.converter.datetime' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter instance.
     */
    Method [ <user> protected method getSensioFrameworkExtra_Converter_DatetimeService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2319 - 2322
    }

    /**
     * Gets the 'sensio_framework_extra.converter.doctrine.orm' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter instance.
     */
    Method [ <user> protected method getSensioFrameworkExtra_Converter_Doctrine_OrmService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2332 - 2335
    }

    /**
     * Gets the 'sensio_framework_extra.converter.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener instance.
     */
    Method [ <user> protected method getSensioFrameworkExtra_Converter_ListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2345 - 2348
    }

    /**
     * Gets the 'sensio_framework_extra.converter.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager A Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager instance.
     */
    Method [ <user> protected method getSensioFrameworkExtra_Converter_ManagerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2358 - 2366
    }

    /**
     * Gets the 'sensio_framework_extra.security.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener instance.
     */
    Method [ <user> protected method getSensioFrameworkExtra_Security_ListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2376 - 2379
    }

    /**
     * Gets the 'sensio_framework_extra.view.guesser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser A Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser instance.
     */
    Method [ <user> protected method getSensioFrameworkExtra_View_GuesserService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2389 - 2392
    }

    /**
     * Gets the 'sensio_framework_extra.view.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener A Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener instance.
     */
    Method [ <user> protected method getSensioFrameworkExtra_View_ListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2402 - 2405
    }

    /**
     * Gets the 'service_container' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @throws RuntimeException always since this service is expected to be injected dynamically
     */
    Method [ <user> protected method getServiceContainerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2415 - 2418
    }

    /**
     * Gets the 'session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Session A Symfony\Component\HttpFoundation\Session\Session instance.
     */
    Method [ <user> protected method getSessionService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2428 - 2431
    }

    /**
     * Gets the 'session.save_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SaveSessionListener A Symfony\Component\HttpKernel\EventListener\SaveSessionListener instance.
     */
    Method [ <user> protected method getSession_SaveListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2441 - 2444
    }

    /**
     * Gets the 'session.storage.filesystem' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage instance.
     */
    Method [ <user> protected method getSession_Storage_FilesystemService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2454 - 2457
    }

    /**
     * Gets the 'session.storage.native' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage instance.
     */
    Method [ <user> protected method getSession_Storage_NativeService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2467 - 2470
    }

    /**
     * Gets the 'session.storage.php_bridge' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage A Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage instance.
     */
    Method [ <user> protected method getSession_Storage_PhpBridgeService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2480 - 2483
    }

    /**
     * Gets the 'session_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\EventListener\SessionListener A Symfony\Bundle\FrameworkBundle\EventListener\SessionListener instance.
     */
    Method [ <user> protected method getSessionListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2493 - 2496
    }

    /**
     * Gets the 'streamed_response_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener A Symfony\Component\HttpKernel\EventListener\StreamedResponseListener instance.
     */
    Method [ <user> protected method getStreamedResponseListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2506 - 2509
    }

    /**
     * Gets the 'swiftmailer.email_sender.listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener A Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener instance.
     */
    Method [ <user> protected method getSwiftmailer_EmailSender_ListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2519 - 2522
    }

    /**
     * Gets the 'swiftmailer.mailer.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Mailer A Swift_Mailer instance.
     */
    Method [ <user> protected method getSwiftmailer_Mailer_DefaultService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2532 - 2535
    }

    /**
     * Gets the 'swiftmailer.mailer.default.plugin.messagelogger' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Plugins_MessageLogger A Swift_Plugins_MessageLogger instance.
     */
    Method [ <user> protected method getSwiftmailer_Mailer_Default_Plugin_MessageloggerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2545 - 2548
    }

    /**
     * Gets the 'swiftmailer.mailer.default.spool' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_MemorySpool A Swift_MemorySpool instance.
     */
    Method [ <user> protected method getSwiftmailer_Mailer_Default_SpoolService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2558 - 2561
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Transport_SpoolTransport A Swift_Transport_SpoolTransport instance.
     */
    Method [ <user> protected method getSwiftmailer_Mailer_Default_TransportService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2571 - 2578
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport.real' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Swift_Transport_EsmtpTransport A Swift_Transport_EsmtpTransport instance.
     */
    Method [ <user> protected method getSwiftmailer_Mailer_Default_Transport_RealService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2588 - 2604
    }

    /**
     * Gets the 'templating' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Debug\TimedTwigEngine A Symfony\Bundle\TwigBundle\Debug\TimedTwigEngine instance.
     */
    Method [ <user> protected method getTemplatingService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2614 - 2617
    }

    /**
     * Gets the 'templating.asset.package_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Asset\PackageFactory A Symfony\Bundle\FrameworkBundle\Templating\Asset\PackageFactory instance.
     */
    Method [ <user> protected method getTemplating_Asset_PackageFactoryService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2627 - 2630
    }

    /**
     * Gets the 'templating.filename_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser instance.
     */
    Method [ <user> protected method getTemplating_FilenameParserService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2640 - 2643
    }

    /**
     * Gets the 'templating.globals' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\GlobalVariables A Symfony\Bundle\FrameworkBundle\Templating\GlobalVariables instance.
     */
    Method [ <user> protected method getTemplating_GlobalsService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2653 - 2656
    }

    /**
     * Gets the 'templating.helper.actions' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\ActionsHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\ActionsHelper instance.
     */
    Method [ <user> protected method getTemplating_Helper_ActionsService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2666 - 2669
    }

    /**
     * Gets the 'templating.helper.assets' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Templating\Helper\CoreAssetsHelper A Symfony\Component\Templating\Helper\CoreAssetsHelper instance.
     * 
     * @throws InactiveScopeException when the 'templating.helper.assets' service is requested while the 'request' scope is not active
     */
    Method [ <user> protected method getTemplating_Helper_AssetsService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2681 - 2688
    }

    /**
     * Gets the 'templating.helper.code' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\CodeHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\CodeHelper instance.
     */
    Method [ <user> protected method getTemplating_Helper_CodeService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2698 - 2701
    }

    /**
     * Gets the 'templating.helper.form' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\FormHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\FormHelper instance.
     */
    Method [ <user> protected method getTemplating_Helper_FormService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2711 - 2714
    }

    /**
     * Gets the 'templating.helper.logout_url' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper instance.
     */
    Method [ <user> protected method getTemplating_Helper_LogoutUrlService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2724 - 2727
    }

    /**
     * Gets the 'templating.helper.request' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\RequestHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\RequestHelper instance.
     */
    Method [ <user> protected method getTemplating_Helper_RequestService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2737 - 2740
    }

    /**
     * Gets the 'templating.helper.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\RouterHelper instance.
     */
    Method [ <user> protected method getTemplating_Helper_RouterService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2750 - 2753
    }

    /**
     * Gets the 'templating.helper.security' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper A Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper instance.
     */
    Method [ <user> protected method getTemplating_Helper_SecurityService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2763 - 2766
    }

    /**
     * Gets the 'templating.helper.session' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\SessionHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\SessionHelper instance.
     */
    Method [ <user> protected method getTemplating_Helper_SessionService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2776 - 2779
    }

    /**
     * Gets the 'templating.helper.slots' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Templating\Helper\SlotsHelper A Symfony\Component\Templating\Helper\SlotsHelper instance.
     */
    Method [ <user> protected method getTemplating_Helper_SlotsService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2789 - 2792
    }

    /**
     * Gets the 'templating.helper.stopwatch' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\StopwatchHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\StopwatchHelper instance.
     */
    Method [ <user> protected method getTemplating_Helper_StopwatchService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2802 - 2805
    }

    /**
     * Gets the 'templating.helper.translator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Helper\TranslatorHelper A Symfony\Bundle\FrameworkBundle\Templating\Helper\TranslatorHelper instance.
     */
    Method [ <user> protected method getTemplating_Helper_TranslatorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2815 - 2818
    }

    /**
     * Gets the 'templating.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader A Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader instance.
     */
    Method [ <user> protected method getTemplating_LoaderService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2828 - 2831
    }

    /**
     * Gets the 'templating.name_parser' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser A Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser instance.
     */
    Method [ <user> protected method getTemplating_NameParserService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2841 - 2844
    }

    /**
     * Gets the 'translation.dumper.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\CsvFileDumper A Symfony\Component\Translation\Dumper\CsvFileDumper instance.
     */
    Method [ <user> protected method getTranslation_Dumper_CsvService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2854 - 2857
    }

    /**
     * Gets the 'translation.dumper.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\IniFileDumper A Symfony\Component\Translation\Dumper\IniFileDumper instance.
     */
    Method [ <user> protected method getTranslation_Dumper_IniService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2867 - 2870
    }

    /**
     * Gets the 'translation.dumper.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\JsonFileDumper A Symfony\Component\Translation\Dumper\JsonFileDumper instance.
     */
    Method [ <user> protected method getTranslation_Dumper_JsonService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2880 - 2883
    }

    /**
     * Gets the 'translation.dumper.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\MoFileDumper A Symfony\Component\Translation\Dumper\MoFileDumper instance.
     */
    Method [ <user> protected method getTranslation_Dumper_MoService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2893 - 2896
    }

    /**
     * Gets the 'translation.dumper.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\PhpFileDumper A Symfony\Component\Translation\Dumper\PhpFileDumper instance.
     */
    Method [ <user> protected method getTranslation_Dumper_PhpService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2906 - 2909
    }

    /**
     * Gets the 'translation.dumper.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\PoFileDumper A Symfony\Component\Translation\Dumper\PoFileDumper instance.
     */
    Method [ <user> protected method getTranslation_Dumper_PoService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2919 - 2922
    }

    /**
     * Gets the 'translation.dumper.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\QtFileDumper A Symfony\Component\Translation\Dumper\QtFileDumper instance.
     */
    Method [ <user> protected method getTranslation_Dumper_QtService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2932 - 2935
    }

    /**
     * Gets the 'translation.dumper.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\IcuResFileDumper A Symfony\Component\Translation\Dumper\IcuResFileDumper instance.
     */
    Method [ <user> protected method getTranslation_Dumper_ResService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2945 - 2948
    }

    /**
     * Gets the 'translation.dumper.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\XliffFileDumper A Symfony\Component\Translation\Dumper\XliffFileDumper instance.
     */
    Method [ <user> protected method getTranslation_Dumper_XliffService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2958 - 2961
    }

    /**
     * Gets the 'translation.dumper.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Dumper\YamlFileDumper A Symfony\Component\Translation\Dumper\YamlFileDumper instance.
     */
    Method [ <user> protected method getTranslation_Dumper_YmlService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2971 - 2974
    }

    /**
     * Gets the 'translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Extractor\ChainExtractor A Symfony\Component\Translation\Extractor\ChainExtractor instance.
     */
    Method [ <user> protected method getTranslation_ExtractorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 2984 - 2992
    }

    /**
     * Gets the 'translation.extractor.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor A Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor instance.
     */
    Method [ <user> protected method getTranslation_Extractor_PhpService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3002 - 3005
    }

    /**
     * Gets the 'translation.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader A Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader instance.
     */
    Method [ <user> protected method getTranslation_LoaderService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3015 - 3035
    }

    /**
     * Gets the 'translation.loader.csv' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\CsvFileLoader A Symfony\Component\Translation\Loader\CsvFileLoader instance.
     */
    Method [ <user> protected method getTranslation_Loader_CsvService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3045 - 3048
    }

    /**
     * Gets the 'translation.loader.dat' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuDatFileLoader A Symfony\Component\Translation\Loader\IcuDatFileLoader instance.
     */
    Method [ <user> protected method getTranslation_Loader_DatService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3058 - 3061
    }

    /**
     * Gets the 'translation.loader.ini' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IniFileLoader A Symfony\Component\Translation\Loader\IniFileLoader instance.
     */
    Method [ <user> protected method getTranslation_Loader_IniService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3071 - 3074
    }

    /**
     * Gets the 'translation.loader.json' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\JsonFileLoader A Symfony\Component\Translation\Loader\JsonFileLoader instance.
     */
    Method [ <user> protected method getTranslation_Loader_JsonService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3084 - 3087
    }

    /**
     * Gets the 'translation.loader.mo' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\MoFileLoader A Symfony\Component\Translation\Loader\MoFileLoader instance.
     */
    Method [ <user> protected method getTranslation_Loader_MoService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3097 - 3100
    }

    /**
     * Gets the 'translation.loader.php' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\PhpFileLoader A Symfony\Component\Translation\Loader\PhpFileLoader instance.
     */
    Method [ <user> protected method getTranslation_Loader_PhpService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3110 - 3113
    }

    /**
     * Gets the 'translation.loader.po' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\PoFileLoader A Symfony\Component\Translation\Loader\PoFileLoader instance.
     */
    Method [ <user> protected method getTranslation_Loader_PoService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3123 - 3126
    }

    /**
     * Gets the 'translation.loader.qt' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\QtFileLoader A Symfony\Component\Translation\Loader\QtFileLoader instance.
     */
    Method [ <user> protected method getTranslation_Loader_QtService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3136 - 3139
    }

    /**
     * Gets the 'translation.loader.res' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuResFileLoader A Symfony\Component\Translation\Loader\IcuResFileLoader instance.
     */
    Method [ <user> protected method getTranslation_Loader_ResService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3149 - 3152
    }

    /**
     * Gets the 'translation.loader.xliff' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\XliffFileLoader A Symfony\Component\Translation\Loader\XliffFileLoader instance.
     */
    Method [ <user> protected method getTranslation_Loader_XliffService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3162 - 3165
    }

    /**
     * Gets the 'translation.loader.yml' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Loader\YamlFileLoader A Symfony\Component\Translation\Loader\YamlFileLoader instance.
     */
    Method [ <user> protected method getTranslation_Loader_YmlService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3175 - 3178
    }

    /**
     * Gets the 'translation.writer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\Writer\TranslationWriter A Symfony\Component\Translation\Writer\TranslationWriter instance.
     */
    Method [ <user> protected method getTranslation_WriterService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3188 - 3204
    }

    /**
     * Gets the 'translator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Translation\IdentityTranslator A Symfony\Component\Translation\IdentityTranslator instance.
     */
    Method [ <user> protected method getTranslatorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3214 - 3217
    }

    /**
     * Gets the 'translator.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator A Symfony\Bundle\FrameworkBundle\Translation\Translator instance.
     */
    Method [ <user> protected method getTranslator_DefaultService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3227 - 3230
    }

    /**
     * Gets the 'translator_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\TranslatorListener A Symfony\Component\HttpKernel\EventListener\TranslatorListener instance.
     */
    Method [ <user> protected method getTranslatorListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3240 - 3243
    }

    /**
     * Gets the 'twig' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Twig_Environment A Twig_Environment instance.
     */
    Method [ <user> protected method getTwigService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3253 - 3278
    }

    /**
     * Gets the 'twig.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\ExceptionController A Symfony\Bundle\TwigBundle\Controller\ExceptionController instance.
     */
    Method [ <user> protected method getTwig_Controller_ExceptionService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3288 - 3291
    }

    /**
     * Gets the 'twig.controller.preview_error' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController A Symfony\Bundle\TwigBundle\Controller\PreviewErrorController instance.
     */
    Method [ <user> protected method getTwig_Controller_PreviewErrorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3301 - 3304
    }

    /**
     * Gets the 'twig.exception_listener' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ExceptionListener A Symfony\Component\HttpKernel\EventListener\ExceptionListener instance.
     */
    Method [ <user> protected method getTwig_ExceptionListenerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3314 - 3317
    }

    /**
     * Gets the 'twig.loader' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader A Symfony\Bundle\TwigBundle\Loader\FilesystemLoader instance.
     */
    Method [ <user> protected method getTwig_LoaderService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3327 - 3343
    }

    /**
     * Gets the 'twig.translation.extractor' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bridge\Twig\Translation\TwigExtractor A Symfony\Bridge\Twig\Translation\TwigExtractor instance.
     */
    Method [ <user> protected method getTwig_Translation_ExtractorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3353 - 3356
    }

    /**
     * Gets the 'uri_signer' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\HttpKernel\UriSigner A Symfony\Component\HttpKernel\UriSigner instance.
     */
    Method [ <user> protected method getUriSignerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3366 - 3369
    }

    /**
     * Gets the 'user_agent_subscriber' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \AppBundle\EventListener\UserAgentSubscriber A AppBundle\EventListener\UserAgentSubscriber instance.
     */
    Method [ <user> protected method getUserAgentSubscriberService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3379 - 3382
    }

    /**
     * Gets the 'validator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\ValidatorInterface A Symfony\Component\Validator\ValidatorInterface instance.
     */
    Method [ <user> protected method getValidatorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3392 - 3395
    }

    /**
     * Gets the 'validator.builder' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilderInterface A Symfony\Component\Validator\ValidatorBuilderInterface instance.
     */
    Method [ <user> protected method getValidator_BuilderService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3405 - 3419
    }

    /**
     * Gets the 'validator.email' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Constraints\EmailValidator A Symfony\Component\Validator\Constraints\EmailValidator instance.
     */
    Method [ <user> protected method getValidator_EmailService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3429 - 3432
    }

    /**
     * Gets the 'validator.expression' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\Validator\Constraints\ExpressionValidator A Symfony\Component\Validator\Constraints\ExpressionValidator instance.
     */
    Method [ <user> protected method getValidator_ExpressionService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3442 - 3445
    }

    /**
     * Gets the 'var_dumper.cli_dumper' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\VarDumper\Dumper\CliDumper A Symfony\Component\VarDumper\Dumper\CliDumper instance.
     */
    Method [ <user> protected method getVarDumper_CliDumperService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3455 - 3458
    }

    /**
     * Gets the 'var_dumper.cloner' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Component\VarDumper\Cloner\VarCloner A Symfony\Component\VarDumper\Cloner\VarCloner instance.
     */
    Method [ <user> protected method getVarDumper_ClonerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3468 - 3476
    }

    /**
     * Gets the 'web_profiler.controller.exception' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController A Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController instance.
     */
    Method [ <user> protected method getWebProfiler_Controller_ExceptionService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3486 - 3489
    }

    /**
     * Gets the 'web_profiler.controller.profiler' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController A Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController instance.
     */
    Method [ <user> protected method getWebProfiler_Controller_ProfilerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3499 - 3502
    }

    /**
     * Gets the 'web_profiler.controller.router' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\RouterController A Symfony\Bundle\WebProfilerBundle\Controller\RouterController instance.
     */
    Method [ <user> protected method getWebProfiler_Controller_RouterService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3512 - 3515
    }

    /**
     * Gets the 'web_profiler.debug_toolbar' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener A Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener instance.
     */
    Method [ <user> protected method getWebProfiler_DebugToolbarService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3525 - 3528
    }

    /**
     * Gets the 'assetic.asset_factory' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\AsseticBundle\Factory\AssetFactory A Symfony\Bundle\AsseticBundle\Factory\AssetFactory instance.
     */
    Method [ <user> protected method getAssetic_AssetFactoryService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3542 - 3549
    }

    /**
     * Gets the 'controller_name_converter' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser A Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser instance.
     */
    Method [ <user> protected method getControllerNameConverterService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3563 - 3566
    }

    /**
     * Gets the 'doctrine.dbal.logger.profiling.default' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Doctrine\DBAL\Logging\DebugStack A Doctrine\DBAL\Logging\DebugStack instance.
     */
    Method [ <user> protected method getDoctrine_Dbal_Logger_Profiling_DefaultService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3580 - 3583
    }

    /**
     * Gets the 'monolog.processor.psr_log_message' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Monolog\Processor\PsrLogMessageProcessor A Monolog\Processor\PsrLogMessageProcessor instance.
     */
    Method [ <user> protected method getMonolog_Processor_PsrLogMessageService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3597 - 3600
    }

    /**
     * Gets the 'router.request_context' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Routing\RequestContext A Symfony\Component\Routing\RequestContext instance.
     */
    Method [ <user> protected method getRouter_RequestContextService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3614 - 3617
    }

    /**
     * Gets the 'security.access.decision_manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AccessDecisionManager A Symfony\Component\Security\Core\Authorization\AccessDecisionManager instance.
     */
    Method [ <user> protected method getSecurity_Access_DecisionManagerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3631 - 3637
    }

    /**
     * Gets the 'security.authentication.manager' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager A Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager instance.
     */
    Method [ <user> protected method getSecurity_Authentication_ManagerService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3651 - 3658
    }

    /**
     * Gets the 'security.authentication.trust_resolver' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver A Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver instance.
     */
    Method [ <user> protected method getSecurity_Authentication_TrustResolverService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3672 - 3675
    }

    /**
     * Gets the 'security.role_hierarchy' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Security\Core\Role\RoleHierarchy A Symfony\Component\Security\Core\Role\RoleHierarchy instance.
     */
    Method [ <user> protected method getSecurity_RoleHierarchyService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3689 - 3692
    }

    /**
     * Gets the 'session.storage.metadata_bag' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag A Symfony\Component\HttpFoundation\Session\Storage\MetadataBag instance.
     */
    Method [ <user> protected method getSession_Storage_MetadataBagService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3706 - 3709
    }

    /**
     * Gets the 'swiftmailer.mailer.default.transport.eventdispatcher' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Swift_Events_SimpleEventDispatcher A Swift_Events_SimpleEventDispatcher instance.
     */
    Method [ <user> protected method getSwiftmailer_Mailer_Default_Transport_EventdispatcherService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3723 - 3726
    }

    /**
     * Gets the 'templating.locator' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator A Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator instance.
     */
    Method [ <user> protected method getTemplating_LocatorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3740 - 3743
    }

    /**
     * Gets the 'translator.selector' service.
     *
     * This service is shared.
     * This method always returns the same instance of the service.
     *
     * This service is private.
     * If you want to be able to request this service from the container directly,
     * make it public, otherwise you might end up with broken code.
     *
     * @return \Symfony\Component\Translation\MessageSelector A Symfony\Component\Translation\MessageSelector instance.
     */
    Method [ <user> protected method getTranslator_SelectorService ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3757 - 3760
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Symfony\Component\DependencyInjection\Container, prototype Symfony\Component\DependencyInjection\ContainerInterface> public method getParameter ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3765 - 3774

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Symfony\Component\DependencyInjection\Container, prototype Symfony\Component\DependencyInjection\ContainerInterface> public method hasParameter ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3779 - 3784

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Symfony\Component\DependencyInjection\Container, prototype Symfony\Component\DependencyInjection\ContainerInterface> public method setParameter ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3789 - 3792

      - Parameters [2] {
        Parameter #0 [ <required> $name ]
        Parameter #1 [ <required> $value ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Symfony\Component\DependencyInjection\Container, prototype Symfony\Component\DependencyInjection\Container> public method getParameterBag ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3797 - 3804
    }

    /**
     * Gets the default parameters.
     *
     * @return array An array of the default parameters
     */
    Method [ <user> protected method getDefaultParameters ] {
      @@ /var/www/html/app/cache/dev/appDevDebugProjectContainer.php 3811 - 4502
    }

    /**
     * Returns true if the container parameter bag are frozen.
     *
     * @return bool true if the container parameter bag are frozen, false otherwise
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\Container> public method isFrozen ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php 117 - 120
    }

    /**
     * Sets a service.
     *
     * Setting a service to null resets the service: has() returns false and get()
     * behaves in the same way as if the service was never created.
     *
     * @param string $id      The service identifier
     * @param object $service The service instance
     * @param string $scope   The scope of the service
     *
     * @throws RuntimeException         When trying to set a service in an inactive scope
     * @throws InvalidArgumentException When trying to set a service in the prototype scope
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\Container, prototype Symfony\Component\DependencyInjection\ContainerInterface> public method set ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php 192 - 227

      - Parameters [3] {
        Parameter #0 [ <required> $id ]
        Parameter #1 [ <required> $service ]
        Parameter #2 [ <optional> $scope = 'container' ]
      }
    }

    /**
     * Returns true if the given service is defined.
     *
     * @param string $id The service identifier
     *
     * @return bool true if the service is defined, false otherwise
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\Container, prototype Symfony\Component\DependencyInjection\ContainerInterface> public method has ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php 238 - 254

      - Parameters [1] {
        Parameter #0 [ <required> $id ]
      }
    }

    /**
     * Gets a service.
     *
     * If a service is defined both through a set() method and
     * with a get{$id}Service() method, the former has always precedence.
     *
     * @param string $id              The service identifier
     * @param int    $invalidBehavior The behavior when the service does not exist
     *
     * @return object The associated service
     *
     * @throws ServiceCircularReferenceException When a circular reference is detected
     * @throws ServiceNotFoundException          When the service is not defined
     * @throws \Exception                        if an exception has been thrown when the service has been resolved
     *
     * @see Reference
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\Container, prototype Symfony\Component\DependencyInjection\ContainerInterface> public method get ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php 275 - 346

      - Parameters [2] {
        Parameter #0 [ <required> $id ]
        Parameter #1 [ <optional> $invalidBehavior = 1 ]
      }
    }

    /**
     * Returns true if the given service has actually been initialized.
     *
     * @param string $id The service identifier
     *
     * @return bool true if service has already been initialized, false otherwise
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\Container, prototype Symfony\Component\DependencyInjection\IntrospectableContainerInterface> public method initialized ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php 355 - 370

      - Parameters [1] {
        Parameter #0 [ <required> $id ]
      }
    }

    /**
     * Gets all service ids.
     *
     * @return array An array of all defined service ids
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\Container> public method getServiceIds ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php 377 - 389
    }

    /**
     * This is called when you enter a scope.
     *
     * @param string $name
     *
     * @throws RuntimeException         When the parent scope is inactive
     * @throws InvalidArgumentException When the scope does not exist
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\Container, prototype Symfony\Component\DependencyInjection\ContainerInterface> public method enterScope ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php 401 - 437

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * This is called to leave the current scope, and move back to the parent
     * scope.
     *
     * @param string $name The name of the scope to leave
     *
     * @throws InvalidArgumentException if the scope is not active
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\Container, prototype Symfony\Component\DependencyInjection\ContainerInterface> public method leaveScope ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php 449 - 485

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * Adds a scope to the container.
     *
     * @param ScopeInterface $scope
     *
     * @throws InvalidArgumentException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\Container, prototype Symfony\Component\DependencyInjection\ContainerInterface> public method addScope ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php 496 - 519

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ScopeInterface $scope ]
      }
    }

    /**
     * Returns whether this container has a certain scope.
     *
     * @param string $name The name of the scope
     *
     * @return bool
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\Container, prototype Symfony\Component\DependencyInjection\ContainerInterface> public method hasScope ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php 530 - 533

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * Returns whether this scope is currently active.
     *
     * This does not actually check if the passed scope actually exists.
     *
     * @param string $name
     *
     * @return bool
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\Container, prototype Symfony\Component\DependencyInjection\ContainerInterface> public method isScopeActive ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Container.php 546 - 549

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }
  }
}
";}i:426;a:4:{s:70:"Symfony\Component\DependencyInjection\IntrospectableContainerInterface";s:70:"Symfony\Component\DependencyInjection\IntrospectableContainerInterface";s:56:"Symfony\Component\DependencyInjection\ContainerInterface";s:56:"Symfony\Component\DependencyInjection\ContainerInterface";s:47:"Symfony\Component\DependencyInjection\Container";s:47:"Symfony\Component\DependencyInjection\Container";s:27:"appDevDebugProjectContainer";s:27:"appDevDebugProjectContainer";}i:427;a:2:{s:4:"name";s:59:"Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher";s:13:" ~ reflection";s:8343:"/**
 * Collects some data about event listeners.
 *
 * This event dispatcher delegates the dispatching to another one.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher extends Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher implements Symfony\Component\EventDispatcher\EventDispatcherInterface, Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcherInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Debug/TraceableEventDispatcher.php 26-98

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [2] {
    Property [ <default> protected $logger ]
    Property [ <default> protected $stopwatch ]
  }

  - Methods [14] {
    /**
     * Sets the profiler.
     *
     * The traceable event dispatcher does not use the profiler anymore.
     * The job is now done directly by the Profiler listener and the
     * data collectors themselves.
     *
     * @param Profiler|null $profiler A Profiler instance
     *
     * @deprecated Deprecated since version 2.4, to be removed in 3.0.
     */
    Method [ <user> public method setProfiler ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Debug/TraceableEventDispatcher.php 39 - 41

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\HttpKernel\Profiler\Profiler or NULL $profiler = NULL ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher, prototype Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher> protected method preDispatch ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Debug/TraceableEventDispatcher.php 46 - 72

      - Parameters [2] {
        Parameter #0 [ <required> $eventName ]
        Parameter #1 [ <required> Symfony\Component\EventDispatcher\Event $event ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher, prototype Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher> protected method postDispatch ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Debug/TraceableEventDispatcher.php 77 - 97

      - Parameters [2] {
        Parameter #0 [ <required> $eventName ]
        Parameter #1 [ <required> Symfony\Component\EventDispatcher\Event $event ]
      }
    }

    /**
     * Constructor.
     *
     * @param EventDispatcherInterface $dispatcher An EventDispatcherInterface instance
     * @param Stopwatch                $stopwatch  A Stopwatch instance
     * @param LoggerInterface          $logger     A LoggerInterface instance
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php 43 - 50

      - Parameters [3] {
        Parameter #0 [ <required> Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher ]
        Parameter #1 [ <required> Symfony\Component\Stopwatch\Stopwatch $stopwatch ]
        Parameter #2 [ <optional> Psr\Log\LoggerInterface or NULL $logger = NULL ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher, prototype Symfony\Component\EventDispatcher\EventDispatcherInterface> public method addListener ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php 55 - 58

      - Parameters [3] {
        Parameter #0 [ <required> $eventName ]
        Parameter #1 [ <required> $listener ]
        Parameter #2 [ <optional> $priority = 0 ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher, prototype Symfony\Component\EventDispatcher\EventDispatcherInterface> public method addSubscriber ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php 63 - 66

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\EventDispatcher\EventSubscriberInterface $subscriber ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher, prototype Symfony\Component\EventDispatcher\EventDispatcherInterface> public method removeListener ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php 71 - 84

      - Parameters [2] {
        Parameter #0 [ <required> $eventName ]
        Parameter #1 [ <required> $listener ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher, prototype Symfony\Component\EventDispatcher\EventDispatcherInterface> public method removeSubscriber ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php 89 - 92

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\EventDispatcher\EventSubscriberInterface $subscriber ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher, prototype Symfony\Component\EventDispatcher\EventDispatcherInterface> public method getListeners ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php 97 - 100

      - Parameters [1] {
        Parameter #0 [ <optional> $eventName = NULL ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher, prototype Symfony\Component\EventDispatcher\EventDispatcherInterface> public method hasListeners ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php 105 - 108

      - Parameters [1] {
        Parameter #0 [ <optional> $eventName = NULL ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher, prototype Symfony\Component\EventDispatcher\EventDispatcherInterface> public method dispatch ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php 113 - 134

      - Parameters [2] {
        Parameter #0 [ <required> $eventName ]
        Parameter #1 [ <optional> Symfony\Component\EventDispatcher\Event or NULL $event = NULL ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher, prototype Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcherInterface> public method getCalledListeners ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php 139 - 150
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher, prototype Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcherInterface> public method getNotCalledListeners ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php 155 - 190
    }

    /**
     * Proxies all method calls to the original event dispatcher.
     *
     * @param string $method    The method name
     * @param array  $arguments The method arguments
     *
     * @return mixed
     */
    Method [ <user, inherits Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher> public method __call ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/TraceableEventDispatcher.php 200 - 203

      - Parameters [2] {
        Parameter #0 [ <required> $method ]
        Parameter #1 [ <required> $arguments ]
      }
    }
  }
}
";}i:428;a:4:{s:73:"Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcherInterface";s:73:"Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcherInterface";s:58:"Symfony\Component\EventDispatcher\EventDispatcherInterface";s:58:"Symfony\Component\EventDispatcher\EventDispatcherInterface";s:64:"Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher";s:64:"Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher";s:59:"Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher";s:59:"Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher";}i:429;a:2:{s:4:"name";s:67:"Symfony\Component\HttpKernel\Controller\TraceableControllerResolver";s:13:" ~ reflection";s:2149:"/**
 * TraceableControllerResolver.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Component\HttpKernel\Controller\TraceableControllerResolver implements Symfony\Component\HttpKernel\Controller\ControllerResolverInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Controller/TraceableControllerResolver.php 22-66

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [2] {
    Property [ <default> private $resolver ]
    Property [ <default> private $stopwatch ]
  }

  - Methods [3] {
    /**
     * Constructor.
     *
     * @param ControllerResolverInterface $resolver  A ControllerResolverInterface instance
     * @param Stopwatch                   $stopwatch A Stopwatch instance
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Controller/TraceableControllerResolver.php 33 - 37

      - Parameters [2] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Controller\ControllerResolverInterface $resolver ]
        Parameter #1 [ <required> Symfony\Component\Stopwatch\Stopwatch $stopwatch ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpKernel\Controller\ControllerResolverInterface> public method getController ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Controller/TraceableControllerResolver.php 42 - 51

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpKernel\Controller\ControllerResolverInterface> public method getArguments ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Controller/TraceableControllerResolver.php 56 - 65

      - Parameters [2] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
        Parameter #1 [ <required> $controller ]
      }
    }
  }
}
";}i:430;a:2:{s:67:"Symfony\Component\HttpKernel\Controller\ControllerResolverInterface";s:67:"Symfony\Component\HttpKernel\Controller\ControllerResolverInterface";s:67:"Symfony\Component\HttpKernel\Controller\TraceableControllerResolver";s:67:"Symfony\Component\HttpKernel\Controller\TraceableControllerResolver";}i:431;a:2:{s:4:"name";s:45:"Symfony\Component\HttpFoundation\RequestStack";s:13:" ~ reflection";s:2588:"/**
 * Request stack that controls the lifecycle of requests.
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */
Class [ <user> class Symfony\Component\HttpFoundation\RequestStack ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/RequestStack.php 19-103

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [1] {
    Property [ <default> private $requests ]
  }

  - Methods [5] {
    /**
     * Pushes a Request on the stack.
     *
     * This method should generally not be called directly as the stack
     * management should be taken care of by the application itself.
     */
    Method [ <user> public method push ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/RequestStack.php 32 - 35

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
      }
    }

    /**
     * Pops the current request from the stack.
     *
     * This operation lets the current request go out of scope.
     *
     * This method should generally not be called directly as the stack
     * management should be taken care of by the application itself.
     *
     * @return Request|null
     */
    Method [ <user> public method pop ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/RequestStack.php 47 - 54
    }

    /**
     * @return Request|null
     */
    Method [ <user> public method getCurrentRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/RequestStack.php 59 - 62
    }

    /**
     * Gets the master Request.
     *
     * Be warned that making your code aware of the master request
     * might make it un-compatible with other features of your framework
     * like ESI support.
     *
     * @return Request|null
     */
    Method [ <user> public method getMasterRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/RequestStack.php 73 - 80
    }

    /**
     * Returns the parent request of the current.
     *
     * Be warned that making your code aware of the parent request
     * might make it un-compatible with other features of your framework
     * like ESI support.
     *
     * If current Request is the master request, it returns null.
     *
     * @return Request|null
     */
    Method [ <user> public method getParentRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/RequestStack.php 93 - 102
    }
  }
}
";}i:432;a:1:{s:45:"Symfony\Component\HttpFoundation\RequestStack";s:45:"Symfony\Component\HttpFoundation\RequestStack";}i:433;a:2:{s:4:"name";s:45:"Symfony\Component\HttpFoundation\ParameterBag";s:13:" ~ reflection";s:9085:"/**
 * ParameterBag is a container for key/value pairs.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */
Class [ <user> <iterateable> class Symfony\Component\HttpFoundation\ParameterBag implements IteratorAggregate, Traversable, Countable ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 21-319

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [1] {
    Property [ <default> protected $parameters ]
  }

  - Methods [17] {
    /**
     * Constructor.
     *
     * @param array $parameters An array of parameters
     *
     * @api
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> array $parameters = Array ]
      }
    }

    /**
     * Returns the parameters.
     *
     * @return array An array of parameters
     *
     * @api
     */
    Method [ <user> public method all ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 49 - 52
    }

    /**
     * Returns the parameter keys.
     *
     * @return array An array of parameter keys
     *
     * @api
     */
    Method [ <user> public method keys ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 61 - 64
    }

    /**
     * Replaces the current parameters by a new set.
     *
     * @param array $parameters An array of parameters
     *
     * @api
     */
    Method [ <user> public method replace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 73 - 76

      - Parameters [1] {
        Parameter #0 [ <optional> array $parameters = Array ]
      }
    }

    /**
     * Adds parameters.
     *
     * @param array $parameters An array of parameters
     *
     * @api
     */
    Method [ <user> public method add ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 85 - 88

      - Parameters [1] {
        Parameter #0 [ <optional> array $parameters = Array ]
      }
    }

    /**
     * Returns a parameter by name.
     *
     * @param string $path    The key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return mixed
     *
     * @throws \InvalidArgumentException
     *
     * @api
     */
    Method [ <user> public method get ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 103 - 150

      - Parameters [3] {
        Parameter #0 [ <required> $path ]
        Parameter #1 [ <optional> $default = NULL ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Sets a parameter by name.
     *
     * @param string $key   The key
     * @param mixed  $value The value
     *
     * @api
     */
    Method [ <user> public method set ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 160 - 163

      - Parameters [2] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <required> $value ]
      }
    }

    /**
     * Returns true if the parameter is defined.
     *
     * @param string $key The key
     *
     * @return bool true if the parameter exists, false otherwise
     *
     * @api
     */
    Method [ <user> public method has ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 174 - 177

      - Parameters [1] {
        Parameter #0 [ <required> $key ]
      }
    }

    /**
     * Removes a parameter.
     *
     * @param string $key The key
     *
     * @api
     */
    Method [ <user> public method remove ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 186 - 189

      - Parameters [1] {
        Parameter #0 [ <required> $key ]
      }
    }

    /**
     * Returns the alphabetic characters of the parameter value.
     *
     * @param string $key     The parameter key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return string The filtered value
     *
     * @api
     */
    Method [ <user> public method getAlpha ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 202 - 205

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = '' ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Returns the alphabetic characters and digits of the parameter value.
     *
     * @param string $key     The parameter key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return string The filtered value
     *
     * @api
     */
    Method [ <user> public method getAlnum ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 218 - 221

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = '' ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Returns the digits of the parameter value.
     *
     * @param string $key     The parameter key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return string The filtered value
     *
     * @api
     */
    Method [ <user> public method getDigits ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 234 - 238

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = '' ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Returns the parameter value converted to integer.
     *
     * @param string $key     The parameter key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return int The filtered value
     *
     * @api
     */
    Method [ <user> public method getInt ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 251 - 254

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = 0 ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Returns the parameter value converted to boolean.
     *
     * @param string $key     The parameter key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return bool The filtered value
     */
    Method [ <user> public method getBoolean ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 265 - 268

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = false ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Filter key.
     *
     * @param string $key     Key.
     * @param mixed  $default Default = null.
     * @param bool   $deep    Default = false.
     * @param int    $filter  FILTER_* constant.
     * @param mixed  $options Filter options.
     *
     * @see http://php.net/manual/en/function.filter-var.php
     *
     * @return mixed
     */
    Method [ <user> public method filter ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 283 - 298

      - Parameters [5] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = NULL ]
        Parameter #2 [ <optional> $deep = false ]
        Parameter #3 [ <optional> $filter = 516 ]
        Parameter #4 [ <optional> $options = Array ]
      }
    }

    /**
     * Returns an iterator for parameters.
     *
     * @return \ArrayIterator An \ArrayIterator instance
     */
    Method [ <user, prototype IteratorAggregate> public method getIterator ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 305 - 308
    }

    /**
     * Returns the number of parameters.
     *
     * @return int The number of parameters
     */
    Method [ <user, prototype Countable> public method count ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 315 - 318
    }
  }
}
";}i:434;a:4:{s:9:"Countable";s:9:"Countable";s:11:"Traversable";s:11:"Traversable";s:17:"IteratorAggregate";s:17:"IteratorAggregate";s:45:"Symfony\Component\HttpFoundation\ParameterBag";s:45:"Symfony\Component\HttpFoundation\ParameterBag";}i:435;a:2:{s:4:"name";s:42:"Symfony\Component\HttpFoundation\ServerBag";s:13:" ~ reflection";s:10424:"/**
 * ServerBag is a container for HTTP headers from the $_SERVER variable.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Bulat Shakirzyanov <mallluhuct@gmail.com>
 * @author Robert Kiss <kepten@gmail.com>
 */
Class [ <user> <iterateable> class Symfony\Component\HttpFoundation\ServerBag extends Symfony\Component\HttpFoundation\ParameterBag implements Countable, Traversable, IteratorAggregate ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ServerBag.php 21-98

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [1] {
    Property [ <default> protected $parameters ]
  }

  - Methods [18] {
    /**
     * Gets the HTTP headers.
     *
     * @return array
     */
    Method [ <user> public method getHeaders ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ServerBag.php 28 - 97
    }

    /**
     * Constructor.
     *
     * @param array $parameters An array of parameters
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> array $parameters = Array ]
      }
    }

    /**
     * Returns the parameters.
     *
     * @return array An array of parameters
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method all ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 49 - 52
    }

    /**
     * Returns the parameter keys.
     *
     * @return array An array of parameter keys
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method keys ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 61 - 64
    }

    /**
     * Replaces the current parameters by a new set.
     *
     * @param array $parameters An array of parameters
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method replace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 73 - 76

      - Parameters [1] {
        Parameter #0 [ <optional> array $parameters = Array ]
      }
    }

    /**
     * Adds parameters.
     *
     * @param array $parameters An array of parameters
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method add ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 85 - 88

      - Parameters [1] {
        Parameter #0 [ <optional> array $parameters = Array ]
      }
    }

    /**
     * Returns a parameter by name.
     *
     * @param string $path    The key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return mixed
     *
     * @throws \InvalidArgumentException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method get ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 103 - 150

      - Parameters [3] {
        Parameter #0 [ <required> $path ]
        Parameter #1 [ <optional> $default = NULL ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Sets a parameter by name.
     *
     * @param string $key   The key
     * @param mixed  $value The value
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method set ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 160 - 163

      - Parameters [2] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <required> $value ]
      }
    }

    /**
     * Returns true if the parameter is defined.
     *
     * @param string $key The key
     *
     * @return bool true if the parameter exists, false otherwise
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method has ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 174 - 177

      - Parameters [1] {
        Parameter #0 [ <required> $key ]
      }
    }

    /**
     * Removes a parameter.
     *
     * @param string $key The key
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method remove ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 186 - 189

      - Parameters [1] {
        Parameter #0 [ <required> $key ]
      }
    }

    /**
     * Returns the alphabetic characters of the parameter value.
     *
     * @param string $key     The parameter key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return string The filtered value
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method getAlpha ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 202 - 205

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = '' ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Returns the alphabetic characters and digits of the parameter value.
     *
     * @param string $key     The parameter key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return string The filtered value
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method getAlnum ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 218 - 221

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = '' ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Returns the digits of the parameter value.
     *
     * @param string $key     The parameter key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return string The filtered value
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method getDigits ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 234 - 238

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = '' ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Returns the parameter value converted to integer.
     *
     * @param string $key     The parameter key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return int The filtered value
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method getInt ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 251 - 254

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = 0 ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Returns the parameter value converted to boolean.
     *
     * @param string $key     The parameter key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return bool The filtered value
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method getBoolean ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 265 - 268

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = false ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Filter key.
     *
     * @param string $key     Key.
     * @param mixed  $default Default = null.
     * @param bool   $deep    Default = false.
     * @param int    $filter  FILTER_* constant.
     * @param mixed  $options Filter options.
     *
     * @see http://php.net/manual/en/function.filter-var.php
     *
     * @return mixed
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method filter ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 283 - 298

      - Parameters [5] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = NULL ]
        Parameter #2 [ <optional> $deep = false ]
        Parameter #3 [ <optional> $filter = 516 ]
        Parameter #4 [ <optional> $options = Array ]
      }
    }

    /**
     * Returns an iterator for parameters.
     *
     * @return \ArrayIterator An \ArrayIterator instance
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag, prototype IteratorAggregate> public method getIterator ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 305 - 308
    }

    /**
     * Returns the number of parameters.
     *
     * @return int The number of parameters
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag, prototype Countable> public method count ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 315 - 318
    }
  }
}
";}i:436;a:5:{s:17:"IteratorAggregate";s:17:"IteratorAggregate";s:11:"Traversable";s:11:"Traversable";s:9:"Countable";s:9:"Countable";s:45:"Symfony\Component\HttpFoundation\ParameterBag";s:45:"Symfony\Component\HttpFoundation\ParameterBag";s:42:"Symfony\Component\HttpFoundation\ServerBag";s:42:"Symfony\Component\HttpFoundation\ServerBag";}i:437;a:2:{s:4:"name";s:40:"Symfony\Component\HttpFoundation\FileBag";s:13:" ~ reflection";s:11377:"/**
 * FileBag is a container for uploaded files.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Bulat Shakirzyanov <mallluhuct@gmail.com>
 *
 * @api
 */
Class [ <user> <iterateable> class Symfony\Component\HttpFoundation\FileBag extends Symfony\Component\HttpFoundation\ParameterBag implements Countable, Traversable, IteratorAggregate ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/FileBag.php 24-155

  - Constants [0] {
  }

  - Static properties [1] {
    Property [ private static $fileKeys ]
  }

  - Static methods [0] {
  }

  - Properties [1] {
    Property [ <default> protected $parameters ]
  }

  - Methods [19] {
    /**
     * Constructor.
     *
     * @param array $parameters An array of HTTP files
     *
     * @api
     */
    Method [ <user, overwrites Symfony\Component\HttpFoundation\ParameterBag, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/FileBag.php 35 - 38

      - Parameters [1] {
        Parameter #0 [ <optional> array $parameters = Array ]
      }
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, overwrites Symfony\Component\HttpFoundation\ParameterBag, prototype Symfony\Component\HttpFoundation\ParameterBag> public method replace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/FileBag.php 45 - 49

      - Parameters [1] {
        Parameter #0 [ <optional> array $files = Array ]
      }
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, overwrites Symfony\Component\HttpFoundation\ParameterBag, prototype Symfony\Component\HttpFoundation\ParameterBag> public method set ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/FileBag.php 56 - 63

      - Parameters [2] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <required> $value ]
      }
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, overwrites Symfony\Component\HttpFoundation\ParameterBag, prototype Symfony\Component\HttpFoundation\ParameterBag> public method add ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/FileBag.php 70 - 75

      - Parameters [1] {
        Parameter #0 [ <optional> array $files = Array ]
      }
    }

    /**
     * Converts uploaded files to UploadedFile instances.
     *
     * @param array|UploadedFile $file A (multi-dimensional) array of uploaded file information
     *
     * @return array A (multi-dimensional) array of UploadedFile instances
     */
    Method [ <user> protected method convertFileInformation ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/FileBag.php 84 - 107

      - Parameters [1] {
        Parameter #0 [ <required> $file ]
      }
    }

    /**
     * Fixes a malformed PHP $_FILES array.
     *
     * PHP has a bug that the format of the $_FILES array differs, depending on
     * whether the uploaded file fields had normal field names or array-like
     * field names ("normal" vs. "parent[child]").
     *
     * This method fixes the array to look like the "normal" $_FILES array.
     *
     * It's safe to pass an already converted array, in which case this method
     * just returns the original array unmodified.
     *
     * @param array $data
     *
     * @return array
     */
    Method [ <user> protected method fixPhpFilesArray ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/FileBag.php 125 - 154

      - Parameters [1] {
        Parameter #0 [ <required> $data ]
      }
    }

    /**
     * Returns the parameters.
     *
     * @return array An array of parameters
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method all ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 49 - 52
    }

    /**
     * Returns the parameter keys.
     *
     * @return array An array of parameter keys
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method keys ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 61 - 64
    }

    /**
     * Returns a parameter by name.
     *
     * @param string $path    The key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return mixed
     *
     * @throws \InvalidArgumentException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method get ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 103 - 150

      - Parameters [3] {
        Parameter #0 [ <required> $path ]
        Parameter #1 [ <optional> $default = NULL ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Returns true if the parameter is defined.
     *
     * @param string $key The key
     *
     * @return bool true if the parameter exists, false otherwise
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method has ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 174 - 177

      - Parameters [1] {
        Parameter #0 [ <required> $key ]
      }
    }

    /**
     * Removes a parameter.
     *
     * @param string $key The key
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method remove ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 186 - 189

      - Parameters [1] {
        Parameter #0 [ <required> $key ]
      }
    }

    /**
     * Returns the alphabetic characters of the parameter value.
     *
     * @param string $key     The parameter key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return string The filtered value
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method getAlpha ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 202 - 205

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = '' ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Returns the alphabetic characters and digits of the parameter value.
     *
     * @param string $key     The parameter key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return string The filtered value
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method getAlnum ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 218 - 221

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = '' ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Returns the digits of the parameter value.
     *
     * @param string $key     The parameter key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return string The filtered value
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method getDigits ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 234 - 238

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = '' ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Returns the parameter value converted to integer.
     *
     * @param string $key     The parameter key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return int The filtered value
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method getInt ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 251 - 254

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = 0 ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Returns the parameter value converted to boolean.
     *
     * @param string $key     The parameter key
     * @param mixed  $default The default value if the parameter key does not exist
     * @param bool   $deep    If true, a path like foo[bar] will find deeper items
     *
     * @return bool The filtered value
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method getBoolean ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 265 - 268

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = false ]
        Parameter #2 [ <optional> $deep = false ]
      }
    }

    /**
     * Filter key.
     *
     * @param string $key     Key.
     * @param mixed  $default Default = null.
     * @param bool   $deep    Default = false.
     * @param int    $filter  FILTER_* constant.
     * @param mixed  $options Filter options.
     *
     * @see http://php.net/manual/en/function.filter-var.php
     *
     * @return mixed
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag> public method filter ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 283 - 298

      - Parameters [5] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = NULL ]
        Parameter #2 [ <optional> $deep = false ]
        Parameter #3 [ <optional> $filter = 516 ]
        Parameter #4 [ <optional> $options = Array ]
      }
    }

    /**
     * Returns an iterator for parameters.
     *
     * @return \ArrayIterator An \ArrayIterator instance
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag, prototype IteratorAggregate> public method getIterator ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 305 - 308
    }

    /**
     * Returns the number of parameters.
     *
     * @return int The number of parameters
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\ParameterBag, prototype Countable> public method count ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/ParameterBag.php 315 - 318
    }
  }
}
";}i:438;a:5:{s:17:"IteratorAggregate";s:17:"IteratorAggregate";s:11:"Traversable";s:11:"Traversable";s:9:"Countable";s:9:"Countable";s:45:"Symfony\Component\HttpFoundation\ParameterBag";s:45:"Symfony\Component\HttpFoundation\ParameterBag";s:40:"Symfony\Component\HttpFoundation\FileBag";s:40:"Symfony\Component\HttpFoundation\FileBag";}i:439;a:2:{s:4:"name";s:42:"Symfony\Component\HttpFoundation\HeaderBag";s:13:" ~ reflection";s:8939:"/**
 * HeaderBag is a container for HTTP headers.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 *
 * @api
 */
Class [ <user> <iterateable> class Symfony\Component\HttpFoundation\HeaderBag implements IteratorAggregate, Traversable, Countable ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 21-348

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [2] {
    Property [ <default> protected $headers ]
    Property [ <default> protected $cacheControl ]
  }

  - Methods [20] {
    /**
     * Constructor.
     *
     * @param array $headers An array of HTTP headers
     *
     * @api
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 33 - 38

      - Parameters [1] {
        Parameter #0 [ <optional> array $headers = Array ]
      }
    }

    /**
     * Returns the headers as a string.
     *
     * @return string The headers
     */
    Method [ <user> public method __toString ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 45 - 62
    }

    /**
     * Returns the headers.
     *
     * @return array An array of headers
     *
     * @api
     */
    Method [ <user> public method all ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 71 - 74
    }

    /**
     * Returns the parameter keys.
     *
     * @return array An array of parameter keys
     *
     * @api
     */
    Method [ <user> public method keys ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 83 - 86
    }

    /**
     * Replaces the current HTTP headers by a new set.
     *
     * @param array $headers An array of HTTP headers
     *
     * @api
     */
    Method [ <user> public method replace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 95 - 99

      - Parameters [1] {
        Parameter #0 [ <optional> array $headers = Array ]
      }
    }

    /**
     * Adds new headers the current HTTP headers set.
     *
     * @param array $headers An array of HTTP headers
     *
     * @api
     */
    Method [ <user> public method add ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 108 - 113

      - Parameters [1] {
        Parameter #0 [ <required> array $headers ]
      }
    }

    /**
     * Returns a header value by name.
     *
     * @param string $key     The header name
     * @param mixed  $default The default value
     * @param bool   $first   Whether to return the first value or all header values
     *
     * @return string|array The first header value if $first is true, an array of values otherwise
     *
     * @api
     */
    Method [ <user> public method get ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 126 - 143

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $default = NULL ]
        Parameter #2 [ <optional> $first = true ]
      }
    }

    /**
     * Sets a header by name.
     *
     * @param string       $key     The key
     * @param string|array $values  The value or an array of values
     * @param bool         $replace Whether to replace the actual value or not (true by default)
     *
     * @api
     */
    Method [ <user> public method set ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 154 - 169

      - Parameters [3] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <required> $values ]
        Parameter #2 [ <optional> $replace = true ]
      }
    }

    /**
     * Returns true if the HTTP header is defined.
     *
     * @param string $key The HTTP header
     *
     * @return bool true if the parameter exists, false otherwise
     *
     * @api
     */
    Method [ <user> public method has ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 180 - 183

      - Parameters [1] {
        Parameter #0 [ <required> $key ]
      }
    }

    /**
     * Returns true if the given HTTP header contains the given value.
     *
     * @param string $key   The HTTP header name
     * @param string $value The HTTP value
     *
     * @return bool true if the value is contained in the header, false otherwise
     *
     * @api
     */
    Method [ <user> public method contains ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 195 - 198

      - Parameters [2] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <required> $value ]
      }
    }

    /**
     * Removes a header.
     *
     * @param string $key The HTTP header name
     *
     * @api
     */
    Method [ <user> public method remove ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 207 - 216

      - Parameters [1] {
        Parameter #0 [ <required> $key ]
      }
    }

    /**
     * Returns the HTTP header value converted to a date.
     *
     * @param string    $key     The parameter key
     * @param \DateTime $default The default value
     *
     * @return null|\DateTime The parsed DateTime or the default value if the header does not exist
     *
     * @throws \RuntimeException When the HTTP header is not parseable
     *
     * @api
     */
    Method [ <user> public method getDate ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 230 - 241

      - Parameters [2] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> DateTime or NULL $default = NULL ]
      }
    }

    /**
     * Adds a custom Cache-Control directive.
     *
     * @param string $key   The Cache-Control directive name
     * @param mixed  $value The Cache-Control directive value
     */
    Method [ <user> public method addCacheControlDirective ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 249 - 254

      - Parameters [2] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <optional> $value = true ]
      }
    }

    /**
     * Returns true if the Cache-Control directive is defined.
     *
     * @param string $key The Cache-Control directive
     *
     * @return bool true if the directive exists, false otherwise
     */
    Method [ <user> public method hasCacheControlDirective ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 263 - 266

      - Parameters [1] {
        Parameter #0 [ <required> $key ]
      }
    }

    /**
     * Returns a Cache-Control directive value by name.
     *
     * @param string $key The directive name
     *
     * @return mixed|null The directive value if defined, null otherwise
     */
    Method [ <user> public method getCacheControlDirective ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 275 - 278

      - Parameters [1] {
        Parameter #0 [ <required> $key ]
      }
    }

    /**
     * Removes a Cache-Control directive.
     *
     * @param string $key The Cache-Control directive
     */
    Method [ <user> public method removeCacheControlDirective ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 285 - 290

      - Parameters [1] {
        Parameter #0 [ <required> $key ]
      }
    }

    /**
     * Returns an iterator for headers.
     *
     * @return \ArrayIterator An \ArrayIterator instance
     */
    Method [ <user, prototype IteratorAggregate> public method getIterator ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 297 - 300
    }

    /**
     * Returns the number of headers.
     *
     * @return int The number of headers
     */
    Method [ <user, prototype Countable> public method count ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 307 - 310
    }

    Method [ <user> protected method getCacheControlHeader ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 312 - 329
    }

    /**
     * Parses a Cache-Control HTTP header.
     *
     * @param string $header The value of the Cache-Control HTTP header
     *
     * @return array An array representing the attribute values
     */
    Method [ <user> protected method parseCacheControl ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/HeaderBag.php 338 - 347

      - Parameters [1] {
        Parameter #0 [ <required> $header ]
      }
    }
  }
}
";}i:440;a:4:{s:9:"Countable";s:9:"Countable";s:11:"Traversable";s:11:"Traversable";s:17:"IteratorAggregate";s:17:"IteratorAggregate";s:42:"Symfony\Component\HttpFoundation\HeaderBag";s:42:"Symfony\Component\HttpFoundation\HeaderBag";}i:441;a:2:{s:4:"name";s:48:"Symfony\Component\HttpFoundation\Session\Session";s:13:" ~ reflection";s:8777:"/**
 * Session.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Drak <drak@zikula.org>
 *
 * @api
 */
Class [ <user> <iterateable> class Symfony\Component\HttpFoundation\Session\Session implements Symfony\Component\HttpFoundation\Session\SessionInterface, IteratorAggregate, Traversable, Countable ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 29-251

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [3] {
    Property [ <default> protected $storage ]
    Property [ <default> private $flashName ]
    Property [ <default> private $attributeName ]
  }

  - Methods [23] {
    /**
     * Constructor.
     *
     * @param SessionStorageInterface $storage    A SessionStorageInterface instance.
     * @param AttributeBagInterface   $attributes An AttributeBagInterface instance, (defaults null for default AttributeBag)
     * @param FlashBagInterface       $flashes    A FlashBagInterface instance (defaults null for default FlashBag)
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 55 - 66

      - Parameters [3] {
        Parameter #0 [ <optional> Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface or NULL $storage = NULL ]
        Parameter #1 [ <optional> Symfony\Component\HttpFoundation\Session\Attribute\AttributeBagInterface or NULL $attributes = NULL ]
        Parameter #2 [ <optional> Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface or NULL $flashes = NULL ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method start ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 71 - 74
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method has ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 79 - 82

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method get ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 87 - 90

      - Parameters [2] {
        Parameter #0 [ <required> $name ]
        Parameter #1 [ <optional> $default = NULL ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method set ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 95 - 98

      - Parameters [2] {
        Parameter #0 [ <required> $name ]
        Parameter #1 [ <required> $value ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method all ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 103 - 106
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method replace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 111 - 114

      - Parameters [1] {
        Parameter #0 [ <required> array $attributes ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method remove ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 119 - 122

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method clear ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 127 - 130
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method isStarted ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 135 - 138
    }

    /**
     * Returns an iterator for attributes.
     *
     * @return \ArrayIterator An \ArrayIterator instance
     */
    Method [ <user, prototype IteratorAggregate> public method getIterator ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 145 - 148
    }

    /**
     * Returns the number of attributes.
     *
     * @return int The number of attributes
     */
    Method [ <user, prototype Countable> public method count ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 155 - 158
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method invalidate ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 163 - 168

      - Parameters [1] {
        Parameter #0 [ <optional> $lifetime = NULL ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method migrate ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 173 - 176

      - Parameters [2] {
        Parameter #0 [ <optional> $destroy = false ]
        Parameter #1 [ <optional> $lifetime = NULL ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method save ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 181 - 184
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method getId ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 189 - 192
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method setId ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 197 - 200

      - Parameters [1] {
        Parameter #0 [ <required> $id ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 205 - 208
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method setName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 213 - 216

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method getMetadataBag ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 221 - 224
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method registerBag ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 229 - 232

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Session\SessionBagInterface $bag ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionInterface> public method getBag ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 237 - 240

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * Gets the flashbag interface.
     *
     * @return FlashBagInterface
     */
    Method [ <user> public method getFlashBag ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Session.php 247 - 250
    }
  }
}
";}i:442;a:5:{s:9:"Countable";s:9:"Countable";s:11:"Traversable";s:11:"Traversable";s:17:"IteratorAggregate";s:17:"IteratorAggregate";s:57:"Symfony\Component\HttpFoundation\Session\SessionInterface";s:57:"Symfony\Component\HttpFoundation\Session\SessionInterface";s:48:"Symfony\Component\HttpFoundation\Session\Session";s:48:"Symfony\Component\HttpFoundation\Session\Session";}i:443;a:2:{s:4:"name";s:29:"Symfony\Bridge\Monolog\Logger";s:13:" ~ reflection";s:20567:"/**
 * Logger.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Bridge\Monolog\Logger extends Monolog\Logger implements Psr\Log\LoggerInterface, Symfony\Component\HttpKernel\Log\LoggerInterface, Symfony\Component\HttpKernel\Log\DebugLoggerInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Logger.php 23-94

  - Constants [9] {
    Constant [ integer DEBUG ] { 100 }
    Constant [ integer INFO ] { 200 }
    Constant [ integer NOTICE ] { 250 }
    Constant [ integer WARNING ] { 300 }
    Constant [ integer ERROR ] { 400 }
    Constant [ integer CRITICAL ] { 500 }
    Constant [ integer ALERT ] { 550 }
    Constant [ integer EMERGENCY ] { 600 }
    Constant [ integer API ] { 1 }
  }

  - Static properties [2] {
    Property [ protected static $levels ]
    Property [ protected static $timezone ]
  }

  - Static methods [4] {
    /**
     * Gets all supported logging levels.
     *
     * @return array Assoc array with human-readable level names => level codes.
     */
    Method [ <user, inherits Monolog\Logger> static public method getLevels ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 448 - 451
    }

    /**
     * Gets the name of the logging level.
     *
     * @param  int    $level
     * @return string
     */
    Method [ <user, inherits Monolog\Logger> static public method getLevelName ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 459 - 466

      - Parameters [1] {
        Parameter #0 [ <required> $level ]
      }
    }

    /**
     * Converts PSR-3 levels to Monolog ones if necessary
     *
     * @param string|int Level number (monolog) or name (PSR-3)
     * @return int
     */
    Method [ <user, inherits Monolog\Logger> static public method toMonologLevel ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 474 - 481

      - Parameters [1] {
        Parameter #0 [ <required> $level ]
      }
    }

    /**
     * Set the timezone to be used for the timestamp of log records.
     *
     * This is stored globally for all Logger instances
     *
     * @param \DateTimeZone $tz Timezone object
     */
    Method [ <user, inherits Monolog\Logger> static public method setTimezone ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 696 - 699

      - Parameters [1] {
        Parameter #0 [ <required> DateTimeZone $tz ]
      }
    }
  }

  - Properties [4] {
    Property [ <default> protected $name ]
    Property [ <default> protected $handlers ]
    Property [ <default> protected $processors ]
    Property [ <default> protected $microsecondTimestamps ]
  }

  - Methods [37] {
    /**
     * @deprecated since 2.2, to be removed in 3.0. Use emergency() which is PSR-3 compatible.
     */
    Method [ <user, overwrites Monolog\Logger, prototype Symfony\Component\HttpKernel\Log\LoggerInterface> public method emerg ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Logger.php 28 - 31

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * @deprecated since 2.2, to be removed in 3.0. Use critical() which is PSR-3 compatible.
     */
    Method [ <user, overwrites Monolog\Logger, prototype Symfony\Component\HttpKernel\Log\LoggerInterface> public method crit ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Logger.php 36 - 39

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * @deprecated since 2.2, to be removed in 3.0. Use error() which is PSR-3 compatible.
     */
    Method [ <user, overwrites Monolog\Logger, prototype Symfony\Component\HttpKernel\Log\LoggerInterface> public method err ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Logger.php 44 - 47

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * @deprecated since 2.2, to be removed in 3.0. Use warning() which is PSR-3 compatible.
     */
    Method [ <user, overwrites Monolog\Logger, prototype Symfony\Component\HttpKernel\Log\LoggerInterface> public method warn ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Logger.php 52 - 55

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpKernel\Log\DebugLoggerInterface> public method getLogs ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Logger.php 60 - 67
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpKernel\Log\DebugLoggerInterface> public method countErrors ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Logger.php 72 - 79
    }

    /**
     * Returns a DebugLoggerInterface instance if one is registered with this logger.
     *
     * @return DebugLoggerInterface|null A DebugLoggerInterface instance or null if none is registered
     */
    Method [ <user> private method getDebugLogger ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Logger.php 86 - 93
    }

    /**
     * @param string             $name       The logging channel
     * @param HandlerInterface[] $handlers   Optional stack of handlers, the first one in the array is called first, etc.
     * @param callable[]         $processors Optional array of processors
     */
    Method [ <user, inherits Monolog\Logger, ctor> public method __construct ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 141 - 146

      - Parameters [3] {
        Parameter #0 [ <required> $name ]
        Parameter #1 [ <optional> array $handlers = Array ]
        Parameter #2 [ <optional> array $processors = Array ]
      }
    }

    /**
     * @return string
     */
    Method [ <user, inherits Monolog\Logger> public method getName ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 151 - 154
    }

    /**
     * Return a new cloned instance with the name changed
     *
     * @return static
     */
    Method [ <user, inherits Monolog\Logger> public method withName ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 161 - 167

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * Pushes a handler on to the stack.
     *
     * @param  HandlerInterface $handler
     * @return $this
     */
    Method [ <user, inherits Monolog\Logger> public method pushHandler ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 175 - 180

      - Parameters [1] {
        Parameter #0 [ <required> Monolog\Handler\HandlerInterface $handler ]
      }
    }

    /**
     * Pops a handler from the stack
     *
     * @return HandlerInterface
     */
    Method [ <user, inherits Monolog\Logger> public method popHandler ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 187 - 194
    }

    /**
     * Set handlers, replacing all existing ones.
     *
     * If a map is passed, keys will be ignored.
     *
     * @param  HandlerInterface[] $handlers
     * @return $this
     */
    Method [ <user, inherits Monolog\Logger> public method setHandlers ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 204 - 212

      - Parameters [1] {
        Parameter #0 [ <required> array $handlers ]
      }
    }

    /**
     * @return HandlerInterface[]
     */
    Method [ <user, inherits Monolog\Logger> public method getHandlers ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 217 - 220
    }

    /**
     * Adds a processor on to the stack.
     *
     * @param  callable $callback
     * @return $this
     */
    Method [ <user, inherits Monolog\Logger> public method pushProcessor ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 228 - 236

      - Parameters [1] {
        Parameter #0 [ <required> $callback ]
      }
    }

    /**
     * Removes the processor on top of the stack and returns it.
     *
     * @return callable
     */
    Method [ <user, inherits Monolog\Logger> public method popProcessor ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 243 - 250
    }

    /**
     * @return callable[]
     */
    Method [ <user, inherits Monolog\Logger> public method getProcessors ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 255 - 258
    }

    /**
     * Control the use of microsecond resolution timestamps in the 'datetime'
     * member of new records.
     *
     * Generating microsecond resolution timestamps by calling
     * microtime(true), formatting the result via sprintf() and then parsing
     * the resulting string via \DateTime::createFromFormat() can incur
     * a measurable runtime overhead vs simple usage of DateTime to capture
     * a second resolution timestamp in systems which generate a large number
     * of log events.
     *
     * @param bool $micro True to use microtime() to create timestamps
     */
    Method [ <user, inherits Monolog\Logger> public method useMicrosecondTimestamps ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 273 - 276

      - Parameters [1] {
        Parameter #0 [ <required> $micro ]
      }
    }

    /**
     * Adds a log record.
     *
     * @param  int     $level   The logging level
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger> public method addRecord ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 286 - 345

      - Parameters [3] {
        Parameter #0 [ <required> $level ]
        Parameter #1 [ <required> $message ]
        Parameter #2 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the DEBUG level.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger> public method addDebug ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 354 - 357

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the INFO level.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger> public method addInfo ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 366 - 369

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the NOTICE level.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger> public method addNotice ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 378 - 381

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the WARNING level.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger> public method addWarning ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 390 - 393

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the ERROR level.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger> public method addError ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 402 - 405

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the CRITICAL level.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger> public method addCritical ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 414 - 417

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the ALERT level.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger> public method addAlert ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 426 - 429

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the EMERGENCY level.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger> public method addEmergency ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 438 - 441

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * Checks whether the Logger has a handler that listens on the given level
     *
     * @param  int     $level
     * @return Boolean
     */
    Method [ <user, inherits Monolog\Logger> public method isHandling ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 489 - 502

      - Parameters [1] {
        Parameter #0 [ <required> $level ]
      }
    }

    /**
     * Adds a log record at an arbitrary level.
     *
     * This method allows for compatibility with common interfaces.
     *
     * @param  mixed   $level   The log level
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger, prototype Psr\Log\LoggerInterface> public method log ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 514 - 519

      - Parameters [3] {
        Parameter #0 [ <required> $level ]
        Parameter #1 [ <required> $message ]
        Parameter #2 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the DEBUG level.
     *
     * This method allows for compatibility with common interfaces.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger, prototype Psr\Log\LoggerInterface> public method debug ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 530 - 533

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the INFO level.
     *
     * This method allows for compatibility with common interfaces.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger, prototype Psr\Log\LoggerInterface> public method info ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 544 - 547

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the NOTICE level.
     *
     * This method allows for compatibility with common interfaces.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger, prototype Psr\Log\LoggerInterface> public method notice ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 558 - 561

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the WARNING level.
     *
     * This method allows for compatibility with common interfaces.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger, prototype Psr\Log\LoggerInterface> public method warning ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 586 - 589

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the ERROR level.
     *
     * This method allows for compatibility with common interfaces.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger, prototype Psr\Log\LoggerInterface> public method error ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 614 - 617

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the CRITICAL level.
     *
     * This method allows for compatibility with common interfaces.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger, prototype Psr\Log\LoggerInterface> public method critical ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 642 - 645

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the ALERT level.
     *
     * This method allows for compatibility with common interfaces.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger, prototype Psr\Log\LoggerInterface> public method alert ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 656 - 659

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }

    /**
     * Adds a log record at the EMERGENCY level.
     *
     * This method allows for compatibility with common interfaces.
     *
     * @param  string  $message The log message
     * @param  array   $context The log context
     * @return Boolean Whether the record has been processed
     */
    Method [ <user, inherits Monolog\Logger, prototype Psr\Log\LoggerInterface> public method emergency ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Logger.php 684 - 687

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <optional> array $context = Array ]
      }
    }
  }
}
";}i:444;a:5:{s:53:"Symfony\Component\HttpKernel\Log\DebugLoggerInterface";s:53:"Symfony\Component\HttpKernel\Log\DebugLoggerInterface";s:48:"Symfony\Component\HttpKernel\Log\LoggerInterface";s:48:"Symfony\Component\HttpKernel\Log\LoggerInterface";s:23:"Psr\Log\LoggerInterface";s:23:"Psr\Log\LoggerInterface";s:14:"Monolog\Logger";s:14:"Monolog\Logger";s:29:"Symfony\Bridge\Monolog\Logger";s:29:"Symfony\Bridge\Monolog\Logger";}i:445;a:2:{s:4:"name";s:37:"Symfony\Component\Stopwatch\Stopwatch";s:13:" ~ reflection";s:4354:"/**
 * Stopwatch provides a way to profile code.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Component\Stopwatch\Stopwatch ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Stopwatch.php 19-159

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [2] {
    Property [ <default> private $sections ]
    Property [ <default> private $activeSections ]
  }

  - Methods [10] {
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Stopwatch.php 31 - 34
    }

    /**
     * @return Section[]
     */
    Method [ <user> public method getSections ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Stopwatch.php 39 - 42
    }

    /**
     * Creates a new section or re-opens an existing section.
     *
     * @param string|null $id The id of the session to re-open, null to create a new one
     *
     * @throws \LogicException When the section to re-open is not reachable
     */
    Method [ <user> public method openSection ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Stopwatch.php 51 - 62

      - Parameters [1] {
        Parameter #0 [ <optional> $id = NULL ]
      }
    }

    /**
     * Stops the last started section.
     *
     * The id parameter is used to retrieve the events from this section.
     *
     * @see getSectionEvents()
     *
     * @param string $id The identifier of the section
     *
     * @throws \LogicException When there's no started section to be stopped
     */
    Method [ <user> public method stopSection ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Stopwatch.php 75 - 85

      - Parameters [1] {
        Parameter #0 [ <required> $id ]
      }
    }

    /**
     * Starts an event.
     *
     * @param string $name     The event name
     * @param string $category The event category
     *
     * @return StopwatchEvent A StopwatchEvent instance
     */
    Method [ <user> public method start ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Stopwatch.php 95 - 98

      - Parameters [2] {
        Parameter #0 [ <required> $name ]
        Parameter #1 [ <optional> $category = NULL ]
      }
    }

    /**
     * Checks if the event was started.
     *
     * @param string $name The event name
     *
     * @return bool
     */
    Method [ <user> public method isStarted ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Stopwatch.php 107 - 110

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * Stops an event.
     *
     * @param string $name The event name
     *
     * @return StopwatchEvent A StopwatchEvent instance
     */
    Method [ <user> public method stop ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Stopwatch.php 119 - 122

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * Stops then restarts an event.
     *
     * @param string $name The event name
     *
     * @return StopwatchEvent A StopwatchEvent instance
     */
    Method [ <user> public method lap ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Stopwatch.php 131 - 134

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * Returns a specific event by name
     *
     * @param string $name The event name
     *
     * @return StopwatchEvent A StopwatchEvent instance
     */
    Method [ <user> public method getEvent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Stopwatch.php 143 - 146

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * Gets all events for a given section.
     *
     * @param string $id A section identifier
     *
     * @return StopwatchEvent[] An array of StopwatchEvent instances
     */
    Method [ <user> public method getSectionEvents ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Stopwatch.php 155 - 158

      - Parameters [1] {
        Parameter #0 [ <required> $id ]
      }
    }
  }
}
";}i:446;a:1:{s:37:"Symfony\Component\Stopwatch\Stopwatch";s:37:"Symfony\Component\Stopwatch\Stopwatch";}i:447;a:2:{s:4:"name";s:60:"Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver";s:13:" ~ reflection";s:4423:"/**
 * ControllerResolver.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver extends Symfony\Component\HttpKernel\Controller\ControllerResolver implements Symfony\Component\HttpKernel\Controller\ControllerResolverInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerResolver.php 24-86

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [2] {
    Property [ <default> protected $container ]
    Property [ <default> protected $parser ]
  }

  - Methods [6] {
    /**
     * Constructor.
     *
     * @param ContainerInterface   $container A ContainerInterface instance
     * @param ControllerNameParser $parser    A ControllerNameParser instance
     * @param LoggerInterface      $logger    A LoggerInterface instance
     */
    Method [ <user, overwrites Symfony\Component\HttpKernel\Controller\ControllerResolver, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerResolver.php 36 - 42

      - Parameters [3] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerInterface $container ]
        Parameter #1 [ <required> Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser $parser ]
        Parameter #2 [ <optional> Psr\Log\LoggerInterface or NULL $logger = NULL ]
      }
    }

    /**
     * Returns a callable for the given controller.
     *
     * @param string $controller A Controller string
     *
     * @return mixed A PHP callable
     *
     * @throws \LogicException           When the name could not be parsed
     * @throws \InvalidArgumentException When the controller class does not exist
     */
    Method [ <user, overwrites Symfony\Component\HttpKernel\Controller\ControllerResolver, prototype Symfony\Component\HttpKernel\Controller\ControllerResolver> protected method createController ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerResolver.php 54 - 85

      - Parameters [1] {
        Parameter #0 [ <required> $controller ]
      }
    }

    /**
     * {@inheritdoc}
     *
     * This method looks for a '_controller' request attribute that represents
     * the controller name (a string like ClassName::MethodName).
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Controller\ControllerResolver, prototype Symfony\Component\HttpKernel\Controller\ControllerResolverInterface> public method getController ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Controller/ControllerResolver.php 50 - 87

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
      }
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Controller\ControllerResolver, prototype Symfony\Component\HttpKernel\Controller\ControllerResolverInterface> public method getArguments ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Controller/ControllerResolver.php 94 - 106

      - Parameters [2] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
        Parameter #1 [ <required> $controller ]
      }
    }

    Method [ <user, inherits Symfony\Component\HttpKernel\Controller\ControllerResolver> protected method doGetArguments ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Controller/ControllerResolver.php 108 - 133

      - Parameters [3] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
        Parameter #1 [ <required> $controller ]
        Parameter #2 [ <required> array $parameters ]
      }
    }

    /**
     * Returns an instantiated controller
     *
     * @param string $class A class name
     *
     * @return object
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Controller\ControllerResolver> protected method instantiateController ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Controller/ControllerResolver.php 166 - 169

      - Parameters [1] {
        Parameter #0 [ <required> $class ]
      }
    }
  }
}
";}i:448;a:3:{s:67:"Symfony\Component\HttpKernel\Controller\ControllerResolverInterface";s:67:"Symfony\Component\HttpKernel\Controller\ControllerResolverInterface";s:58:"Symfony\Component\HttpKernel\Controller\ControllerResolver";s:58:"Symfony\Component\HttpKernel\Controller\ControllerResolver";s:60:"Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver";s:60:"Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver";}i:449;a:2:{s:4:"name";s:69:"Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage";s:13:" ~ reflection";s:10500:"/**
 * This provides a base class for session attribute storage.
 *
 * @author Drak <drak@zikula.org>
 */
Class [ <user> class Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage implements Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 25-420

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [5] {
    Property [ <default> protected $bags ]
    Property [ <default> protected $started ]
    Property [ <default> protected $closed ]
    Property [ <default> protected $saveHandler ]
    Property [ <default> protected $metadataBag ]
  }

  - Methods [18] {
    /**
     * Constructor.
     *
     * Depending on how you want the storage driver to behave you probably
     * want to override this constructor entirely.
     *
     * List of options for $options array with their defaults.
     *
     * @see http://php.net/session.configuration for options
     * but we omit 'session.' from the beginning of the keys for convenience.
     *
     * ("auto_start", is not supported as it tells PHP to start a session before
     * PHP starts to execute user-land code. Setting during runtime has no effect).
     *
     * cache_limiter, "nocache" (use "0" to prevent headers from being sent entirely).
     * cookie_domain, ""
     * cookie_httponly, ""
     * cookie_lifetime, "0"
     * cookie_path, "/"
     * cookie_secure, ""
     * entropy_file, ""
     * entropy_length, "0"
     * gc_divisor, "100"
     * gc_maxlifetime, "1440"
     * gc_probability, "1"
     * hash_bits_per_character, "4"
     * hash_function, "0"
     * name, "PHPSESSID"
     * referer_check, ""
     * serialize_handler, "php"
     * use_cookies, "1"
     * use_only_cookies, "1"
     * use_trans_sid, "0"
     * upload_progress.enabled, "1"
     * upload_progress.cleanup, "1"
     * upload_progress.prefix, "upload_progress_"
     * upload_progress.name, "PHP_SESSION_UPLOAD_PROGRESS"
     * upload_progress.freq, "1%"
     * upload_progress.min-freq, "1"
     * url_rewriter.tags, "a=href,area=href,frame=src,form=,fieldset="
     *
     * @param array                                                            $options Session configuration options.
     * @param AbstractProxy|NativeSessionHandler|\SessionHandlerInterface|null $handler
     * @param MetadataBag                                                      $metaBag MetadataBag.
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 99 - 113

      - Parameters [3] {
        Parameter #0 [ <optional> array $options = Array ]
        Parameter #1 [ <optional> $handler = NULL ]
        Parameter #2 [ <optional> Symfony\Component\HttpFoundation\Session\Storage\MetadataBag or NULL $metaBag = NULL ]
      }
    }

    /**
     * Gets the save handler instance.
     *
     * @return AbstractProxy
     */
    Method [ <user> public method getSaveHandler ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 120 - 123
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface> public method start ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 128 - 159
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface> public method getId ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 164 - 167
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface> public method setId ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 172 - 175

      - Parameters [1] {
        Parameter #0 [ <required> $id ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface> public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 180 - 183
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface> public method setName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 188 - 191

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface> public method regenerate ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 196 - 213

      - Parameters [2] {
        Parameter #0 [ <optional> $destroy = false ]
        Parameter #1 [ <optional> $lifetime = NULL ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface> public method save ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 218 - 229
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface> public method clear ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 234 - 246
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface> public method registerBag ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 251 - 254

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Session\SessionBagInterface $bag ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface> public method getBag ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 259 - 272

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * Sets the MetadataBag.
     *
     * @param MetadataBag $metaBag
     */
    Method [ <user> public method setMetadataBag ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 279 - 286

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\HttpFoundation\Session\Storage\MetadataBag or NULL $metaBag = NULL ]
      }
    }

    /**
     * Gets the MetadataBag.
     *
     * @return MetadataBag
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface> public method getMetadataBag ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 293 - 296
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface> public method isStarted ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 301 - 304
    }

    /**
     * Sets session.* ini variables.
     *
     * For convenience we omit 'session.' from the beginning of the keys.
     * Explicitly ignores other ini keys.
     *
     * @param array $options Session ini directives array(key => value).
     *
     * @see http://php.net/session.configuration
     */
    Method [ <user> public method setOptions ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 316 - 335

      - Parameters [1] {
        Parameter #0 [ <required> array $options ]
      }
    }

    /**
     * Registers session save handler as a PHP session handler.
     *
     * To use internal PHP session save handlers, override this method using ini_set with
     * session.save_handler and session.save_path e.g.
     *
     *     ini_set('session.save_handler', 'files');
     *     ini_set('session.save_path', /tmp');
     *
     * or pass in a NativeSessionHandler instance which configures session.save_handler in the
     * constructor, for a template see NativeFileSessionHandler or use handlers in
     * composer package drak/native-session
     *
     * @see http://php.net/session-set-save-handler
     * @see http://php.net/sessionhandlerinterface
     * @see http://php.net/sessionhandler
     * @see http://github.com/drak/NativeSession
     *
     * @param AbstractProxy|NativeSessionHandler|\SessionHandlerInterface|null $saveHandler
     *
     * @throws \InvalidArgumentException
     */
    Method [ <user> public method setSaveHandler ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 359 - 391

      - Parameters [1] {
        Parameter #0 [ <optional> $saveHandler = NULL ]
      }
    }

    /**
     * Load the session with attributes.
     *
     * After starting the session, PHP retrieves the session from whatever handlers
     * are set to (either PHP's internal, or a custom save handler set with session_set_save_handler()).
     * PHP takes the return value from the read() handler, unserializes it
     * and populates $_SESSION with the result automatically.
     *
     * @param array|null $session
     */
    Method [ <user> protected method loadSession ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/NativeSessionStorage.php 403 - 419

      - Parameters [1] {
        Parameter #0 [ <optional> array or NULL &$session = NULL ]
      }
    }
  }
}
";}i:450;a:2:{s:72:"Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface";s:72:"Symfony\Component\HttpFoundation\Session\Storage\SessionStorageInterface";s:69:"Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage";s:69:"Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage";}i:451;a:2:{s:4:"name";s:62:"Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser";s:13:" ~ reflection";s:2770:"/**
 * ControllerNameParser converts controller from the short notation a:b:c
 * (BlogBundle:Post:index) to a fully-qualified class::method string
 * (Bundle\BlogBundle\Controller\PostController::indexAction).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerNameParser.php 23-150

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [1] {
    Property [ <default> protected $kernel ]
  }

  - Methods [4] {
    /**
     * Constructor.
     *
     * @param KernelInterface $kernel A KernelInterface instance
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerNameParser.php 32 - 35

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\KernelInterface $kernel ]
      }
    }

    /**
     * Converts a short notation a:b:c to a class::method.
     *
     * @param string $controller A short notation controller (a:b:c)
     *
     * @return string A string in the class::method notation
     *
     * @throws \InvalidArgumentException when the specified bundle is not enabled
     *                                   or the controller cannot be found
     */
    Method [ <user> public method parse ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerNameParser.php 47 - 90

      - Parameters [1] {
        Parameter #0 [ <required> $controller ]
      }
    }

    /**
     * Converts a class::method notation to a short one (a:b:c).
     *
     * @param string $controller A string in the class::method notation
     *
     * @return string A short notation controller (a:b:c)
     *
     * @throws \InvalidArgumentException when the controller is not valid or cannot be found in any bundle
     */
    Method [ <user> public method build ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerNameParser.php 101 - 119

      - Parameters [1] {
        Parameter #0 [ <required> $controller ]
      }
    }

    /**
     * Attempts to find a bundle that is *similar* to the given bundle name
     *
     * @param string $nonExistentBundleName
     *
     * @return string
     */
    Method [ <user> private method findAlternative ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerNameParser.php 128 - 149

      - Parameters [1] {
        Parameter #0 [ <required> $nonExistentBundleName ]
      }
    }
  }
}
";}i:452;a:1:{s:62:"Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser";s:62:"Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser";}i:453;a:2:{s:4:"name";s:74:"Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy";s:13:" ~ reflection";s:6862:"/**
 * SessionHandler proxy.
 *
 * @author Drak <drak@zikula.org>
 */
Class [ <user> class Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy extends Symfony\Component\HttpFoundation\Session\Storage\Proxy\AbstractProxy implements SessionHandlerInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/SessionHandlerProxy.php 19-95

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> protected $handler ]
    Property [ <default> protected $wrapper ]
    Property [ <default> protected $active ]
    Property [ <default> protected $saveHandlerName ]
  }

  - Methods [16] {
    /**
     * Constructor.
     *
     * @param \SessionHandlerInterface $handler
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/SessionHandlerProxy.php 31 - 36

      - Parameters [1] {
        Parameter #0 [ <required> SessionHandlerInterface $handler ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype SessionHandlerInterface> public method open ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/SessionHandlerProxy.php 43 - 52

      - Parameters [2] {
        Parameter #0 [ <required> $savePath ]
        Parameter #1 [ <required> $sessionName ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype SessionHandlerInterface> public method close ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/SessionHandlerProxy.php 57 - 62
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype SessionHandlerInterface> public method read ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/SessionHandlerProxy.php 67 - 70

      - Parameters [1] {
        Parameter #0 [ <required> $sessionId ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype SessionHandlerInterface> public method write ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/SessionHandlerProxy.php 75 - 78

      - Parameters [2] {
        Parameter #0 [ <required> $sessionId ]
        Parameter #1 [ <required> $data ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype SessionHandlerInterface> public method destroy ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/SessionHandlerProxy.php 83 - 86

      - Parameters [1] {
        Parameter #0 [ <required> $sessionId ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype SessionHandlerInterface> public method gc ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/SessionHandlerProxy.php 91 - 94

      - Parameters [1] {
        Parameter #0 [ <required> $maxlifetime ]
      }
    }

    /**
     * Gets the session.save_handler name.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\Session\Storage\Proxy\AbstractProxy> public method getSaveHandlerName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/AbstractProxy.php 43 - 46
    }

    /**
     * Is this proxy handler and instance of \SessionHandlerInterface.
     *
     * @return bool
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\Session\Storage\Proxy\AbstractProxy> public method isSessionHandlerInterface ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/AbstractProxy.php 53 - 56
    }

    /**
     * Returns true if this handler wraps an internal PHP session save handler using \SessionHandler.
     *
     * @return bool
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\Session\Storage\Proxy\AbstractProxy> public method isWrapper ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/AbstractProxy.php 63 - 66
    }

    /**
     * Has a session started?
     *
     * @return bool
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\Session\Storage\Proxy\AbstractProxy> public method isActive ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/AbstractProxy.php 73 - 80
    }

    /**
     * Sets the active flag.
     *
     * Has no effect under PHP 5.4+ as status is detected
     * automatically in isActive()
     *
     * @internal
     *
     * @param bool $flag
     *
     * @throws \LogicException
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\Session\Storage\Proxy\AbstractProxy> public method setActive ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/AbstractProxy.php 94 - 101

      - Parameters [1] {
        Parameter #0 [ <required> $flag ]
      }
    }

    /**
     * Gets the session ID.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\Session\Storage\Proxy\AbstractProxy> public method getId ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/AbstractProxy.php 108 - 111
    }

    /**
     * Sets the session ID.
     *
     * @param string $id
     *
     * @throws \LogicException
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\Session\Storage\Proxy\AbstractProxy> public method setId ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/AbstractProxy.php 120 - 127

      - Parameters [1] {
        Parameter #0 [ <required> $id ]
      }
    }

    /**
     * Gets the session name.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\Session\Storage\Proxy\AbstractProxy> public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/AbstractProxy.php 134 - 137
    }

    /**
     * Sets the session name.
     *
     * @param string $name
     *
     * @throws \LogicException
     */
    Method [ <user, inherits Symfony\Component\HttpFoundation\Session\Storage\Proxy\AbstractProxy> public method setName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/Proxy/AbstractProxy.php 146 - 153

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }
  }
}
";}i:454;a:3:{s:23:"SessionHandlerInterface";s:23:"SessionHandlerInterface";s:68:"Symfony\Component\HttpFoundation\Session\Storage\Proxy\AbstractProxy";s:68:"Symfony\Component\HttpFoundation\Session\Storage\Proxy\AbstractProxy";s:74:"Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy";s:74:"Symfony\Component\HttpFoundation\Session\Storage\Proxy\SessionHandlerProxy";}i:455;a:2:{s:4:"name";s:60:"Symfony\Component\HttpFoundation\Session\Storage\MetadataBag";s:13:" ~ reflection";s:4723:"/**
 * Metadata container.
 *
 * Adds metadata to the session.
 *
 * @author Drak <drak@zikula.org>
 */
Class [ <user> class Symfony\Component\HttpFoundation\Session\Storage\MetadataBag implements Symfony\Component\HttpFoundation\Session\SessionBagInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php 23-170

  - Constants [3] {
    Constant [ string CREATED ] { c }
    Constant [ string UPDATED ] { u }
    Constant [ string LIFETIME ] { l }
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [5] {
    Property [ <default> private $name ]
    Property [ <default> private $storageKey ]
    Property [ <default> protected $meta ]
    Property [ <default> private $lastUsed ]
    Property [ <default> private $updateThreshold ]
  }

  - Methods [11] {
    /**
     * Constructor.
     *
     * @param string $storageKey      The key used to store bag in the session.
     * @param int    $updateThreshold The time to wait between two UPDATED updates
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php 62 - 66

      - Parameters [2] {
        Parameter #0 [ <optional> $storageKey = '_sf2_meta' ]
        Parameter #1 [ <optional> $updateThreshold = 0 ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionBagInterface> public method initialize ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php 71 - 85

      - Parameters [1] {
        Parameter #0 [ <required> array &$array ]
      }
    }

    /**
     * Gets the lifetime that the session cookie was set with.
     *
     * @return int
     */
    Method [ <user> public method getLifetime ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php 92 - 95
    }

    /**
     * Stamps a new session's metadata.
     *
     * @param int $lifetime Sets the cookie lifetime for the session cookie. A null value
     *                      will leave the system settings unchanged, 0 sets the cookie
     *                      to expire with browser session. Time is in seconds, and is
     *                      not a Unix timestamp.
     */
    Method [ <user> public method stampNew ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php 105 - 108

      - Parameters [1] {
        Parameter #0 [ <optional> $lifetime = NULL ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionBagInterface> public method getStorageKey ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php 113 - 116
    }

    /**
     * Gets the created timestamp metadata.
     *
     * @return int Unix timestamp
     */
    Method [ <user> public method getCreated ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php 123 - 126
    }

    /**
     * Gets the last used metadata.
     *
     * @return int Unix timestamp
     */
    Method [ <user> public method getLastUsed ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php 133 - 136
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionBagInterface> public method clear ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php 141 - 144
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionBagInterface> public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php 149 - 152
    }

    /**
     * Sets name.
     *
     * @param string $name
     */
    Method [ <user> public method setName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php 159 - 162

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    Method [ <user> private method stampCreated ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Storage/MetadataBag.php 164 - 169

      - Parameters [1] {
        Parameter #0 [ <optional> $lifetime = NULL ]
      }
    }
  }
}
";}i:456;a:2:{s:60:"Symfony\Component\HttpFoundation\Session\SessionBagInterface";s:60:"Symfony\Component\HttpFoundation\Session\SessionBagInterface";s:60:"Symfony\Component\HttpFoundation\Session\Storage\MetadataBag";s:60:"Symfony\Component\HttpFoundation\Session\Storage\MetadataBag";}i:457;a:2:{s:4:"name";s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";s:13:" ~ reflection";s:2155:"/**
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Component\EventDispatcher\Debug\WrappedListener ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/WrappedListener.php 21-71

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [6] {
    Property [ <default> private $listener ]
    Property [ <default> private $name ]
    Property [ <default> private $called ]
    Property [ <default> private $stoppedPropagation ]
    Property [ <default> private $stopwatch ]
    Property [ <default> private $dispatcher ]
  }

  - Methods [5] {
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/WrappedListener.php 30 - 38

      - Parameters [4] {
        Parameter #0 [ <required> $listener ]
        Parameter #1 [ <required> $name ]
        Parameter #2 [ <required> Symfony\Component\Stopwatch\Stopwatch $stopwatch ]
        Parameter #3 [ <optional> Symfony\Component\EventDispatcher\EventDispatcherInterface or NULL $dispatcher = NULL ]
      }
    }

    Method [ <user> public method getWrappedListener ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/WrappedListener.php 40 - 43
    }

    Method [ <user> public method wasCalled ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/WrappedListener.php 45 - 48
    }

    Method [ <user> public method stoppedPropagation ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/WrappedListener.php 50 - 53
    }

    Method [ <user> public method __invoke ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/EventDispatcher/Debug/WrappedListener.php 55 - 70

      - Parameters [3] {
        Parameter #0 [ <required> Symfony\Component\EventDispatcher\Event $event ]
        Parameter #1 [ <required> $eventName ]
        Parameter #2 [ <required> Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher ]
      }
    }
  }
}
";}i:458;a:1:{s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";s:55:"Symfony\Component\EventDispatcher\Debug\WrappedListener";}i:459;a:2:{s:4:"name";s:43:"Symfony\Bridge\Monolog\Handler\DebugHandler";s:13:" ~ reflection";s:9648:"/**
 * DebugLogger.
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */
Class [ <user> class Symfony\Bridge\Monolog\Handler\DebugHandler extends Monolog\Handler\TestHandler implements Monolog\Handler\HandlerInterface, Symfony\Component\HttpKernel\Log\DebugLoggerInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/DebugHandler.php 23-59

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [6] {
    Property [ <default> protected $records ]
    Property [ <default> protected $recordsByLevel ]
    Property [ <default> protected $level ]
    Property [ <default> protected $bubble ]
    Property [ <default> protected $formatter ]
    Property [ <default> protected $processors ]
  }

  - Methods [27] {
    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpKernel\Log\DebugLoggerInterface> public method getLogs ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/DebugHandler.php 28 - 42
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpKernel\Log\DebugLoggerInterface> public method countErrors ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/DebugHandler.php 47 - 58
    }

    Method [ <user, inherits Monolog\Handler\TestHandler> public method getRecords ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php 71 - 74
    }

    Method [ <user, inherits Monolog\Handler\TestHandler> public method clear ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php 76 - 80
    }

    Method [ <user, inherits Monolog\Handler\TestHandler> public method hasRecords ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php 82 - 85

      - Parameters [1] {
        Parameter #0 [ <required> $level ]
      }
    }

    Method [ <user, inherits Monolog\Handler\TestHandler> public method hasRecord ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php 87 - 96

      - Parameters [2] {
        Parameter #0 [ <required> $record ]
        Parameter #1 [ <required> $level ]
      }
    }

    Method [ <user, inherits Monolog\Handler\TestHandler> public method hasRecordThatContains ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php 98 - 103

      - Parameters [2] {
        Parameter #0 [ <required> $message ]
        Parameter #1 [ <required> $level ]
      }
    }

    Method [ <user, inherits Monolog\Handler\TestHandler> public method hasRecordThatMatches ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php 105 - 110

      - Parameters [2] {
        Parameter #0 [ <required> $regex ]
        Parameter #1 [ <required> $level ]
      }
    }

    Method [ <user, inherits Monolog\Handler\TestHandler> public method hasRecordThatPasses ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php 112 - 129

      - Parameters [2] {
        Parameter #0 [ <required> $predicate ]
        Parameter #1 [ <required> $level ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\TestHandler, prototype Monolog\Handler\AbstractProcessingHandler> protected method write ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php 134 - 138

      - Parameters [1] {
        Parameter #0 [ <required> array $record ]
      }
    }

    Method [ <user, inherits Monolog\Handler\TestHandler> public method __call ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php 140 - 153

      - Parameters [2] {
        Parameter #0 [ <required> $method ]
        Parameter #1 [ <required> $args ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractProcessingHandler, prototype Monolog\Handler\HandlerInterface> public method handle ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php 27 - 40

      - Parameters [1] {
        Parameter #0 [ <required> array $record ]
      }
    }

    /**
     * Processes a record.
     *
     * @param  array $record
     * @return array
     */
    Method [ <user, inherits Monolog\Handler\AbstractProcessingHandler> protected method processRecord ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php 56 - 65

      - Parameters [1] {
        Parameter #0 [ <required> array $record ]
      }
    }

    /**
     * @param int     $level  The minimum logging level at which this handler will be triggered
     * @param Boolean $bubble Whether the messages that are handled can bubble up the stack or not
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, ctor> public method __construct ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 38 - 42

      - Parameters [2] {
        Parameter #0 [ <optional> $level = 100 ]
        Parameter #1 [ <optional> $bubble = true ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method isHandling ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 47 - 50

      - Parameters [1] {
        Parameter #0 [ <required> array $record ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method handleBatch ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 55 - 60

      - Parameters [1] {
        Parameter #0 [ <required> array $records ]
      }
    }

    /**
     * Closes the handler.
     *
     * This will be called automatically when the object is destroyed
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler> public method close ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 67 - 69
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method pushProcessor ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 74 - 82

      - Parameters [1] {
        Parameter #0 [ <required> $callback ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method popProcessor ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 87 - 94
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method setFormatter ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 99 - 104

      - Parameters [1] {
        Parameter #0 [ <required> Monolog\Formatter\FormatterInterface $formatter ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method getFormatter ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 109 - 116
    }

    /**
     * Sets minimum logging level at which this handler will be triggered.
     *
     * @param  int|string $level Level or level name
     * @return self
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler> public method setLevel ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 124 - 129

      - Parameters [1] {
        Parameter #0 [ <required> $level ]
      }
    }

    /**
     * Gets minimum logging level at which this handler will be triggered.
     *
     * @return int
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler> public method getLevel ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 136 - 139
    }

    /**
     * Sets the bubbling behavior.
     *
     * @param  Boolean $bubble true means that this handler allows bubbling.
     *                         false means that bubbling is not permitted.
     * @return self
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler> public method setBubble ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 148 - 153

      - Parameters [1] {
        Parameter #0 [ <required> $bubble ]
      }
    }

    /**
     * Gets the bubbling behavior.
     *
     * @return Boolean true means that this handler allows bubbling.
     *                 false means that bubbling is not permitted.
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler> public method getBubble ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 161 - 164
    }

    Method [ <user, inherits Monolog\Handler\AbstractHandler, dtor> public method __destruct ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 166 - 175
    }

    /**
     * Gets the default formatter.
     *
     * @return FormatterInterface
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler> protected method getDefaultFormatter ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 182 - 185
    }
  }
}
";}i:460;a:6:{s:53:"Symfony\Component\HttpKernel\Log\DebugLoggerInterface";s:53:"Symfony\Component\HttpKernel\Log\DebugLoggerInterface";s:32:"Monolog\Handler\HandlerInterface";s:32:"Monolog\Handler\HandlerInterface";s:31:"Monolog\Handler\AbstractHandler";s:31:"Monolog\Handler\AbstractHandler";s:41:"Monolog\Handler\AbstractProcessingHandler";s:41:"Monolog\Handler\AbstractProcessingHandler";s:27:"Monolog\Handler\TestHandler";s:27:"Monolog\Handler\TestHandler";s:43:"Symfony\Bridge\Monolog\Handler\DebugHandler";s:43:"Symfony\Bridge\Monolog\Handler\DebugHandler";}i:461;a:2:{s:4:"name";s:29:"Monolog\Handler\StreamHandler";s:13:" ~ reflection";s:9390:"/**
 * Stores to any stream resource
 *
 * Can be used to store into php://stderr, remote and local files, etc.
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */
Class [ <user> class Monolog\Handler\StreamHandler extends Monolog\Handler\AbstractProcessingHandler implements Monolog\Handler\HandlerInterface ] {
  @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php 23-176

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [10] {
    Property [ <default> protected $stream ]
    Property [ <default> protected $url ]
    Property [ <default> private $errorMessage ]
    Property [ <default> protected $filePermission ]
    Property [ <default> protected $useLocking ]
    Property [ <default> private $dirCreated ]
    Property [ <default> protected $level ]
    Property [ <default> protected $bubble ]
    Property [ <default> protected $formatter ]
    Property [ <default> protected $processors ]
  }

  - Methods [23] {
    /**
     * @param resource|string $stream
     * @param int             $level          The minimum logging level at which this handler will be triggered
     * @param Boolean         $bubble         Whether the messages that are handled can bubble up the stack or not
     * @param int|null        $filePermission Optional file permissions (default (0644) are only for owner read/write)
     * @param Boolean         $useLocking     Try to lock log file before doing any writes
     *
     * @throws \Exception                If a missing directory is not buildable
     * @throws \InvalidArgumentException If stream is not a resource or string
     */
    Method [ <user, overwrites Monolog\Handler\AbstractHandler, ctor> public method __construct ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php 42 - 55

      - Parameters [5] {
        Parameter #0 [ <required> $stream ]
        Parameter #1 [ <optional> $level = 100 ]
        Parameter #2 [ <optional> $bubble = true ]
        Parameter #3 [ <optional> $filePermission = NULL ]
        Parameter #4 [ <optional> $useLocking = false ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Monolog\Handler\AbstractHandler, prototype Monolog\Handler\AbstractHandler> public method close ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php 60 - 66
    }

    /**
     * Return the currently active stream if it is open
     *
     * @return resource|null
     */
    Method [ <user> public method getStream ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php 73 - 76
    }

    /**
     * Return the stream URL if it was configured with a URL and not an active resource
     *
     * @return string|null
     */
    Method [ <user> public method getUrl ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php 83 - 86
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Monolog\Handler\AbstractProcessingHandler, prototype Monolog\Handler\AbstractProcessingHandler> protected method write ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php 91 - 121

      - Parameters [1] {
        Parameter #0 [ <required> array $record ]
      }
    }

    /**
     * Write to stream
     * @param resource $stream
     * @param array $record
     */
    Method [ <user> protected method streamWrite ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php 128 - 131

      - Parameters [2] {
        Parameter #0 [ <required> $stream ]
        Parameter #1 [ <required> array $record ]
      }
    }

    Method [ <user> private method customErrorHandler ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php 133 - 136

      - Parameters [2] {
        Parameter #0 [ <required> $code ]
        Parameter #1 [ <required> $msg ]
      }
    }

    /**
     * @param string $stream
     *
     * @return null|string
     */
    Method [ <user> private method getDirFromStream ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php 143 - 155

      - Parameters [1] {
        Parameter #0 [ <required> $stream ]
      }
    }

    Method [ <user> private method createDir ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php 157 - 175
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractProcessingHandler, prototype Monolog\Handler\HandlerInterface> public method handle ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php 27 - 40

      - Parameters [1] {
        Parameter #0 [ <required> array $record ]
      }
    }

    /**
     * Processes a record.
     *
     * @param  array $record
     * @return array
     */
    Method [ <user, inherits Monolog\Handler\AbstractProcessingHandler> protected method processRecord ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php 56 - 65

      - Parameters [1] {
        Parameter #0 [ <required> array $record ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method isHandling ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 47 - 50

      - Parameters [1] {
        Parameter #0 [ <required> array $record ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method handleBatch ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 55 - 60

      - Parameters [1] {
        Parameter #0 [ <required> array $records ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method pushProcessor ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 74 - 82

      - Parameters [1] {
        Parameter #0 [ <required> $callback ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method popProcessor ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 87 - 94
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method setFormatter ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 99 - 104

      - Parameters [1] {
        Parameter #0 [ <required> Monolog\Formatter\FormatterInterface $formatter ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method getFormatter ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 109 - 116
    }

    /**
     * Sets minimum logging level at which this handler will be triggered.
     *
     * @param  int|string $level Level or level name
     * @return self
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler> public method setLevel ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 124 - 129

      - Parameters [1] {
        Parameter #0 [ <required> $level ]
      }
    }

    /**
     * Gets minimum logging level at which this handler will be triggered.
     *
     * @return int
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler> public method getLevel ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 136 - 139
    }

    /**
     * Sets the bubbling behavior.
     *
     * @param  Boolean $bubble true means that this handler allows bubbling.
     *                         false means that bubbling is not permitted.
     * @return self
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler> public method setBubble ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 148 - 153

      - Parameters [1] {
        Parameter #0 [ <required> $bubble ]
      }
    }

    /**
     * Gets the bubbling behavior.
     *
     * @return Boolean true means that this handler allows bubbling.
     *                 false means that bubbling is not permitted.
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler> public method getBubble ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 161 - 164
    }

    Method [ <user, inherits Monolog\Handler\AbstractHandler, dtor> public method __destruct ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 166 - 175
    }

    /**
     * Gets the default formatter.
     *
     * @return FormatterInterface
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler> protected method getDefaultFormatter ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 182 - 185
    }
  }
}
";}i:462;a:4:{s:32:"Monolog\Handler\HandlerInterface";s:32:"Monolog\Handler\HandlerInterface";s:31:"Monolog\Handler\AbstractHandler";s:31:"Monolog\Handler\AbstractHandler";s:41:"Monolog\Handler\AbstractProcessingHandler";s:41:"Monolog\Handler\AbstractProcessingHandler";s:29:"Monolog\Handler\StreamHandler";s:29:"Monolog\Handler\StreamHandler";}i:463;a:2:{s:4:"name";s:45:"Symfony\Bridge\Monolog\Handler\ConsoleHandler";s:13:" ~ reflection";s:10385:"/**
 * Writes logs to the console output depending on its verbosity setting.
 *
 * It is disabled by default and gets activated as soon as a command is executed.
 * Instead of listening to the console events, the output can also be set manually.
 *
 * The minimum logging level at which this handler will be triggered depends on the
 * verbosity setting of the console output. The default mapping is:
 * - OutputInterface::VERBOSITY_NORMAL will show all WARNING and higher logs
 * - OutputInterface::VERBOSITY_VERBOSE (-v) will show all NOTICE and higher logs
 * - OutputInterface::VERBOSITY_VERY_VERBOSE (-vv) will show all INFO and higher logs
 * - OutputInterface::VERBOSITY_DEBUG (-vvv) will show all DEBUG and higher logs, i.e. all logs
 *
 * This mapping can be customized with the $verbosityLevelMap constructor parameter.
 *
 * @author Tobias Schultze <http://tobion.de>
 */
Class [ <user> class Symfony\Bridge\Monolog\Handler\ConsoleHandler extends Monolog\Handler\AbstractProcessingHandler implements Monolog\Handler\HandlerInterface, Symfony\Component\EventDispatcher\EventSubscriberInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/ConsoleHandler.php 41-186

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [1] {
    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\EventDispatcher\EventSubscriberInterface> static public method getSubscribedEvents ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/ConsoleHandler.php 139 - 145
    }
  }

  - Properties [6] {
    Property [ <default> private $output ]
    Property [ <default> private $verbosityLevelMap ]
    Property [ <default> protected $level ]
    Property [ <default> protected $bubble ]
    Property [ <default> protected $formatter ]
    Property [ <default> protected $processors ]
  }

  - Methods [21] {
    /**
     * Constructor.
     *
     * @param OutputInterface|null $output            The console output to use (the handler remains disabled when passing null
     *                                                until the output is set, e.g. by using console events)
     * @param bool                 $bubble            Whether the messages that are handled can bubble up the stack
     * @param array                $verbosityLevelMap Array that maps the OutputInterface verbosity to a minimum logging
     *                                                level (leave empty to use the default mapping)
     */
    Method [ <user, overwrites Monolog\Handler\AbstractHandler, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/ConsoleHandler.php 67 - 75

      - Parameters [3] {
        Parameter #0 [ <optional> Symfony\Component\Console\Output\OutputInterface or NULL $output = NULL ]
        Parameter #1 [ <optional> $bubble = true ]
        Parameter #2 [ <optional> array $verbosityLevelMap = Array ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method isHandling ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/ConsoleHandler.php 80 - 83

      - Parameters [1] {
        Parameter #0 [ <required> array $record ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Monolog\Handler\AbstractProcessingHandler, prototype Monolog\Handler\HandlerInterface> public method handle ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/ConsoleHandler.php 88 - 93

      - Parameters [1] {
        Parameter #0 [ <required> array $record ]
      }
    }

    /**
     * Sets the console output to use for printing logs.
     *
     * @param OutputInterface $output The console output to use
     */
    Method [ <user> public method setOutput ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/ConsoleHandler.php 100 - 103

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Output\OutputInterface $output ]
      }
    }

    /**
     * Disables the output.
     */
    Method [ <user, overwrites Monolog\Handler\AbstractHandler, prototype Monolog\Handler\AbstractHandler> public method close ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/ConsoleHandler.php 108 - 113
    }

    /**
     * Before a command is executed, the handler gets activated and the console output
     * is set in order to know where to write the logs.
     *
     * @param ConsoleCommandEvent $event
     */
    Method [ <user> public method onCommand ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/ConsoleHandler.php 121 - 124

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Event\ConsoleCommandEvent $event ]
      }
    }

    /**
     * After a command has been executed, it disables the output.
     *
     * @param ConsoleTerminateEvent $event
     */
    Method [ <user> public method onTerminate ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/ConsoleHandler.php 131 - 134

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Event\ConsoleTerminateEvent $event ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Monolog\Handler\AbstractProcessingHandler, prototype Monolog\Handler\AbstractProcessingHandler> protected method write ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/ConsoleHandler.php 150 - 157

      - Parameters [1] {
        Parameter #0 [ <required> array $record ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Monolog\Handler\AbstractHandler, prototype Monolog\Handler\AbstractHandler> protected method getDefaultFormatter ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/ConsoleHandler.php 162 - 165
    }

    /**
     * Updates the logging level based on the verbosity setting of the console output.
     *
     * @return bool Whether the handler is enabled and verbosity is not set to quiet.
     */
    Method [ <user> private method updateLevel ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bridge/Monolog/Handler/ConsoleHandler.php 172 - 185
    }

    /**
     * Processes a record.
     *
     * @param  array $record
     * @return array
     */
    Method [ <user, inherits Monolog\Handler\AbstractProcessingHandler> protected method processRecord ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php 56 - 65

      - Parameters [1] {
        Parameter #0 [ <required> array $record ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method handleBatch ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 55 - 60

      - Parameters [1] {
        Parameter #0 [ <required> array $records ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method pushProcessor ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 74 - 82

      - Parameters [1] {
        Parameter #0 [ <required> $callback ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method popProcessor ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 87 - 94
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method setFormatter ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 99 - 104

      - Parameters [1] {
        Parameter #0 [ <required> Monolog\Formatter\FormatterInterface $formatter ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler, prototype Monolog\Handler\HandlerInterface> public method getFormatter ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 109 - 116
    }

    /**
     * Sets minimum logging level at which this handler will be triggered.
     *
     * @param  int|string $level Level or level name
     * @return self
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler> public method setLevel ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 124 - 129

      - Parameters [1] {
        Parameter #0 [ <required> $level ]
      }
    }

    /**
     * Gets minimum logging level at which this handler will be triggered.
     *
     * @return int
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler> public method getLevel ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 136 - 139
    }

    /**
     * Sets the bubbling behavior.
     *
     * @param  Boolean $bubble true means that this handler allows bubbling.
     *                         false means that bubbling is not permitted.
     * @return self
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler> public method setBubble ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 148 - 153

      - Parameters [1] {
        Parameter #0 [ <required> $bubble ]
      }
    }

    /**
     * Gets the bubbling behavior.
     *
     * @return Boolean true means that this handler allows bubbling.
     *                 false means that bubbling is not permitted.
     */
    Method [ <user, inherits Monolog\Handler\AbstractHandler> public method getBubble ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 161 - 164
    }

    Method [ <user, inherits Monolog\Handler\AbstractHandler, dtor> public method __destruct ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php 166 - 175
    }
  }
}
";}i:464;a:5:{s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:32:"Monolog\Handler\HandlerInterface";s:32:"Monolog\Handler\HandlerInterface";s:31:"Monolog\Handler\AbstractHandler";s:31:"Monolog\Handler\AbstractHandler";s:41:"Monolog\Handler\AbstractProcessingHandler";s:41:"Monolog\Handler\AbstractProcessingHandler";s:45:"Symfony\Bridge\Monolog\Handler\ConsoleHandler";s:45:"Symfony\Bridge\Monolog\Handler\ConsoleHandler";}i:465;a:2:{s:4:"name";s:35:"Symfony\Component\Stopwatch\Section";s:13:" ~ reflection";s:4870:"/**
 * Stopwatch section.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Component\Stopwatch\Section ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Section.php 19-193

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> private $events ]
    Property [ <default> private $origin ]
    Property [ <default> private $id ]
    Property [ <default> private $children ]
  }

  - Methods [11] {
    /**
     * Constructor.
     *
     * @param float|null $origin Set the origin of the events in this section, use null to set their origin to their start time
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Section.php 46 - 49

      - Parameters [1] {
        Parameter #0 [ <optional> $origin = NULL ]
      }
    }

    /**
     * Returns the child section.
     *
     * @param string $id The child section identifier
     *
     * @return Section|null The child section or null when none found
     */
    Method [ <user> public method get ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Section.php 58 - 65

      - Parameters [1] {
        Parameter #0 [ <required> $id ]
      }
    }

    /**
     * Creates or re-opens a child section.
     *
     * @param string|null $id null to create a new section, the identifier to re-open an existing one.
     *
     * @return Section A child section
     */
    Method [ <user> public method open ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Section.php 74 - 81

      - Parameters [1] {
        Parameter #0 [ <required> $id ]
      }
    }

    /**
     * @return string The identifier of the section
     */
    Method [ <user> public method getId ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Section.php 86 - 89
    }

    /**
     * Sets the session identifier.
     *
     * @param string $id The session identifier
     *
     * @return Section The current section
     */
    Method [ <user> public method setId ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Section.php 98 - 103

      - Parameters [1] {
        Parameter #0 [ <required> $id ]
      }
    }

    /**
     * Starts an event.
     *
     * @param string $name     The event name
     * @param string $category The event category
     *
     * @return StopwatchEvent The event
     */
    Method [ <user> public method startEvent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Section.php 113 - 120

      - Parameters [2] {
        Parameter #0 [ <required> $name ]
        Parameter #1 [ <required> $category ]
      }
    }

    /**
     * Checks if the event was started
     *
     * @param string $name The event name
     *
     * @return bool
     */
    Method [ <user> public method isEventStarted ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Section.php 129 - 132

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * Stops an event.
     *
     * @param string $name The event name
     *
     * @return StopwatchEvent The event
     *
     * @throws \LogicException When the event has not been started
     */
    Method [ <user> public method stopEvent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Section.php 143 - 150

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * Stops then restarts an event.
     *
     * @param string $name The event name
     *
     * @return StopwatchEvent The event
     *
     * @throws \LogicException When the event has not been started
     */
    Method [ <user> public method lap ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Section.php 161 - 164

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * Returns a specific event by name
     *
     * @param string $name The event name
     *
     * @return StopwatchEvent The event
     *
     * @throws \LogicException When the event is not known
     */
    Method [ <user> public method getEvent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Section.php 175 - 182

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * Returns the events from this section.
     *
     * @return StopwatchEvent[] An array of StopwatchEvent instances
     */
    Method [ <user> public method getEvents ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/Section.php 189 - 192
    }
  }
}
";}i:466;a:1:{s:35:"Symfony\Component\Stopwatch\Section";s:35:"Symfony\Component\Stopwatch\Section";}i:467;a:2:{s:4:"name";s:9:"AppKernel";s:13:" ~ reflection";s:17379:"Class [ <user> class AppKernel extends Symfony\Component\HttpKernel\Kernel implements Symfony\Component\HttpKernel\TerminableInterface, Symfony\Component\HttpKernel\HttpKernelInterface, Serializable, Symfony\Component\HttpKernel\KernelInterface ] {
  @@ /var/www/html/app/AppKernel.php 6-39

  - Constants [8] {
    Constant [ string VERSION ] { 2.6.13 }
    Constant [ string VERSION_ID ] { 20613 }
    Constant [ string MAJOR_VERSION ] { 2 }
    Constant [ string MINOR_VERSION ] { 6 }
    Constant [ string RELEASE_VERSION ] { 13 }
    Constant [ string EXTRA_VERSION ] {  }
    Constant [ integer MASTER_REQUEST ] { 1 }
    Constant [ integer SUB_REQUEST ] { 2 }
  }

  - Static properties [0] {
  }

  - Static methods [1] {
    /**
     * Removes comments from a PHP source string.
     *
     * We don't use the PHP php_strip_whitespace() function
     * as we want the content to be readable and well-formatted.
     *
     * @param string $source A PHP string
     *
     * @return string The PHP string with the comments removed
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> static public method stripComments ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 728 - 772

      - Parameters [1] {
        Parameter #0 [ <required> $source ]
      }
    }
  }

  - Properties [10] {
    Property [ <default> protected $bundles ]
    Property [ <default> protected $bundleMap ]
    Property [ <default> protected $container ]
    Property [ <default> protected $rootDir ]
    Property [ <default> protected $environment ]
    Property [ <default> protected $debug ]
    Property [ <default> protected $booted ]
    Property [ <default> protected $name ]
    Property [ <default> protected $startTime ]
    Property [ <default> protected $loadClassCache ]
  }

  - Methods [39] {
    Method [ <user, overwrites Symfony\Component\HttpKernel\KernelInterface, prototype Symfony\Component\HttpKernel\KernelInterface> public method registerBundles ] {
      @@ /var/www/html/app/AppKernel.php 8 - 33
    }

    Method [ <user, overwrites Symfony\Component\HttpKernel\KernelInterface, prototype Symfony\Component\HttpKernel\KernelInterface> public method registerContainerConfiguration ] {
      @@ /var/www/html/app/AppKernel.php 35 - 38

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Config\Loader\LoaderInterface $loader ]
      }
    }

    /**
     * Constructor.
     *
     * @param string $environment The environment
     * @param bool   $debug       Whether to enable debugging or not
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 78 - 90

      - Parameters [2] {
        Parameter #0 [ <required> $environment ]
        Parameter #1 [ <required> $debug ]
      }
    }

    /**
     * @deprecated Deprecated since version 2.3, to be removed in 3.0. Move your logic in the constructor instead.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> public method init ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 95 - 97
    }

    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> public method __clone ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 99 - 107
    }

    /**
     * Boots the current kernel.
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\KernelInterface> public method boot ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 114 - 136
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\TerminableInterface> public method terminate ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 143 - 152

      - Parameters [2] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
        Parameter #1 [ <required> Symfony\Component\HttpFoundation\Response $response ]
      }
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\KernelInterface> public method shutdown ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 159 - 173
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\HttpKernelInterface> public method handle ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 180 - 187

      - Parameters [3] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
        Parameter #1 [ <optional> $type = 1 ]
        Parameter #2 [ <optional> $catch = true ]
      }
    }

    /**
     * Gets a HTTP kernel from the container.
     *
     * @return HttpKernel
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> protected method getHttpKernel ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 194 - 197
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\KernelInterface> public method getBundles ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 204 - 207
    }

    /**
     * {@inheritdoc}
     *
     * @api
     *
     * @deprecated Deprecated since version 2.6, to be removed in 3.0.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\KernelInterface> public method isClassInActiveBundle ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 216 - 225

      - Parameters [1] {
        Parameter #0 [ <required> $class ]
      }
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\KernelInterface> public method getBundle ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 232 - 243

      - Parameters [2] {
        Parameter #0 [ <required> $name ]
        Parameter #1 [ <optional> $first = true ]
      }
    }

    /**
     * {@inheritdoc}
     *
     * @throws \RuntimeException if a custom resource is hidden by a resource in a derived bundle
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\KernelInterface> public method locateResource ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 250 - 302

      - Parameters [3] {
        Parameter #0 [ <required> $name ]
        Parameter #1 [ <optional> $dir = NULL ]
        Parameter #2 [ <optional> $first = true ]
      }
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\KernelInterface> public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 309 - 316
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\KernelInterface> public method getEnvironment ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 323 - 326
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\KernelInterface> public method isDebug ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 333 - 336
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\KernelInterface> public method getRootDir ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 343 - 351
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\KernelInterface> public method getContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 358 - 361
    }

    /**
     * Loads the PHP class cache.
     *
     * This methods only registers the fact that you want to load the cache classes.
     * The cache will actually only be loaded when the Kernel is booted.
     *
     * That optimization is mainly useful when using the HttpCache class in which
     * case the class cache is not loaded if the Response is in the cache.
     *
     * @param string $name      The cache name prefix
     * @param string $extension File extension of the resulting file
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> public method loadClassCache ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 375 - 378

      - Parameters [2] {
        Parameter #0 [ <optional> $name = 'classes' ]
        Parameter #1 [ <optional> $extension = '.php' ]
      }
    }

    /**
     * Used internally.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> public method setClassCache ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 383 - 386

      - Parameters [1] {
        Parameter #0 [ <required> array $classes ]
      }
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\KernelInterface> public method getStartTime ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 393 - 396
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\KernelInterface> public method getCacheDir ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 403 - 406
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\KernelInterface> public method getLogDir ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 413 - 416
    }

    /**
     * {@inheritdoc}
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Symfony\Component\HttpKernel\KernelInterface> public method getCharset ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 423 - 426
    }

    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> protected method doLoadClassCache ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 428 - 433

      - Parameters [2] {
        Parameter #0 [ <required> $name ]
        Parameter #1 [ <required> $extension ]
      }
    }

    /**
     * Initializes the data structures related to the bundle management.
     *
     *  - the bundles property maps a bundle name to the bundle instance,
     *  - the bundleMap property maps a bundle name to the bundle inheritance hierarchy (most derived bundle first).
     *
     * @throws \LogicException if two bundles share a common name
     * @throws \LogicException if a bundle tries to extend a non-registered bundle
     * @throws \LogicException if a bundle tries to extend itself
     * @throws \LogicException if two bundles extend the same ancestor
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> protected method initializeBundles ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 446 - 497
    }

    /**
     * Gets the container class.
     *
     * @return string The container class
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> protected method getContainerClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 504 - 507
    }

    /**
     * Gets the container's base class.
     *
     * All names except Container must be fully qualified.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> protected method getContainerBaseClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 516 - 519
    }

    /**
     * Initializes the service container.
     *
     * The cached version of the service container is used when fresh, otherwise the
     * container is built.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> protected method initializeContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 527 - 548
    }

    /**
     * Returns the kernel parameters.
     *
     * @return array An array of kernel parameters
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> protected method getKernelParameters ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 555 - 576
    }

    /**
     * Gets the environment parameters.
     *
     * Only the parameters starting with "SYMFONY__" are considered.
     *
     * @return array An array of parameters
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> protected method getEnvParameters ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 585 - 595
    }

    /**
     * Builds the service container.
     *
     * @return ContainerBuilder The compiled service container
     *
     * @throws \RuntimeException
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> protected method buildContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 604 - 628
    }

    /**
     * Prepares the ContainerBuilder before it is compiled.
     *
     * @param ContainerBuilder $container A ContainerBuilder instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> protected method prepareContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 635 - 654

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * Gets a new ContainerBuilder instance used to build the service container.
     *
     * @return ContainerBuilder
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> protected method getContainerBuilder ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 661 - 670
    }

    /**
     * Dumps the service container to PHP code in the cache.
     *
     * @param ConfigCache      $cache     The config cache
     * @param ContainerBuilder $container The service container
     * @param string           $class     The name of the class to generate
     * @param string           $baseClass The name of the container's base class
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> protected method dumpContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 680 - 695

      - Parameters [4] {
        Parameter #0 [ <required> Symfony\Component\Config\ConfigCache $cache ]
        Parameter #1 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
        Parameter #2 [ <required> $class ]
        Parameter #3 [ <required> $baseClass ]
      }
    }

    /**
     * Returns a loader for the container.
     *
     * @param ContainerInterface $container The service container
     *
     * @return DelegatingLoader The loader
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel> protected method getContainerLoader ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 704 - 716

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerInterface $container ]
      }
    }

    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Serializable> public method serialize ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 774 - 777
    }

    Method [ <user, inherits Symfony\Component\HttpKernel\Kernel, prototype Serializable> public method unserialize ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Kernel.php 779 - 784

      - Parameters [1] {
        Parameter #0 [ <required> $data ]
      }
    }
  }
}
";}i:468;a:6:{s:44:"Symfony\Component\HttpKernel\KernelInterface";s:44:"Symfony\Component\HttpKernel\KernelInterface";s:12:"Serializable";s:12:"Serializable";s:48:"Symfony\Component\HttpKernel\HttpKernelInterface";s:48:"Symfony\Component\HttpKernel\HttpKernelInterface";s:48:"Symfony\Component\HttpKernel\TerminableInterface";s:48:"Symfony\Component\HttpKernel\TerminableInterface";s:35:"Symfony\Component\HttpKernel\Kernel";s:35:"Symfony\Component\HttpKernel\Kernel";s:9:"AppKernel";s:9:"AppKernel";}i:469;a:2:{s:4:"name";s:63:"Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag";s:13:" ~ reflection";s:5589:"/**
 * This class relates to session attribute storage.
 */
Class [ <user> <iterateable> class Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag implements Symfony\Component\HttpFoundation\Session\Attribute\AttributeBagInterface, Symfony\Component\HttpFoundation\Session\SessionBagInterface, IteratorAggregate, Traversable, Countable ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php 17-157

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [3] {
    Property [ <default> private $name ]
    Property [ <default> private $storageKey ]
    Property [ <default> protected $attributes ]
  }

  - Methods [14] {
    /**
     * Constructor.
     *
     * @param string $storageKey The key used to store attributes in the session
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php 36 - 39

      - Parameters [1] {
        Parameter #0 [ <optional> $storageKey = '_sf2_attributes' ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionBagInterface> public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php 44 - 47
    }

    Method [ <user> public method setName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php 49 - 52

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionBagInterface> public method initialize ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php 57 - 60

      - Parameters [1] {
        Parameter #0 [ <required> array &$attributes ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionBagInterface> public method getStorageKey ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php 65 - 68
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Attribute\AttributeBagInterface> public method has ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php 73 - 76

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Attribute\AttributeBagInterface> public method get ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php 81 - 84

      - Parameters [2] {
        Parameter #0 [ <required> $name ]
        Parameter #1 [ <optional> $default = NULL ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Attribute\AttributeBagInterface> public method set ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php 89 - 92

      - Parameters [2] {
        Parameter #0 [ <required> $name ]
        Parameter #1 [ <required> $value ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Attribute\AttributeBagInterface> public method all ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php 97 - 100
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Attribute\AttributeBagInterface> public method replace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php 105 - 111

      - Parameters [1] {
        Parameter #0 [ <required> array $attributes ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Attribute\AttributeBagInterface> public method remove ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php 116 - 125

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionBagInterface> public method clear ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php 130 - 136
    }

    /**
     * Returns an iterator for attributes.
     *
     * @return \ArrayIterator An \ArrayIterator instance
     */
    Method [ <user, prototype IteratorAggregate> public method getIterator ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php 143 - 146
    }

    /**
     * Returns the number of attributes.
     *
     * @return int The number of attributes
     */
    Method [ <user, prototype Countable> public method count ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Attribute/AttributeBag.php 153 - 156
    }
  }
}
";}i:470;a:6:{s:9:"Countable";s:9:"Countable";s:11:"Traversable";s:11:"Traversable";s:17:"IteratorAggregate";s:17:"IteratorAggregate";s:60:"Symfony\Component\HttpFoundation\Session\SessionBagInterface";s:60:"Symfony\Component\HttpFoundation\Session\SessionBagInterface";s:72:"Symfony\Component\HttpFoundation\Session\Attribute\AttributeBagInterface";s:72:"Symfony\Component\HttpFoundation\Session\Attribute\AttributeBagInterface";s:63:"Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag";s:63:"Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag";}i:471;a:2:{s:4:"name";s:55:"Symfony\Component\HttpFoundation\Session\Flash\FlashBag";s:13:" ~ reflection";s:6270:"/**
 * FlashBag flash message container.
 *
 * \IteratorAggregate implementation is deprecated and will be removed in 3.0.
 *
 * @author Drak <drak@zikula.org>
 */
Class [ <user> <iterateable> class Symfony\Component\HttpFoundation\Session\Flash\FlashBag implements Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface, Symfony\Component\HttpFoundation\Session\SessionBagInterface, IteratorAggregate, Traversable ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 21-180

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [3] {
    Property [ <default> private $name ]
    Property [ <default> private $flashes ]
    Property [ <default> private $storageKey ]
  }

  - Methods [16] {
    /**
     * Constructor.
     *
     * @param string $storageKey The key used to store flashes in the session.
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 44 - 47

      - Parameters [1] {
        Parameter #0 [ <optional> $storageKey = '_sf2_flashes' ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionBagInterface> public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 52 - 55
    }

    Method [ <user> public method setName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 57 - 60

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionBagInterface> public method initialize ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 65 - 68

      - Parameters [1] {
        Parameter #0 [ <required> array &$flashes ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface> public method add ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 73 - 76

      - Parameters [2] {
        Parameter #0 [ <required> $type ]
        Parameter #1 [ <required> $message ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface> public method peek ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 81 - 84

      - Parameters [2] {
        Parameter #0 [ <required> $type ]
        Parameter #1 [ <optional> array $default = Array ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface> public method peekAll ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 89 - 92
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface> public method get ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 97 - 108

      - Parameters [2] {
        Parameter #0 [ <required> $type ]
        Parameter #1 [ <optional> array $default = Array ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface> public method all ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 113 - 119
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface> public method set ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 124 - 127

      - Parameters [2] {
        Parameter #0 [ <required> $type ]
        Parameter #1 [ <required> $messages ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface> public method setAll ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 132 - 135

      - Parameters [1] {
        Parameter #0 [ <required> array $messages ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface> public method has ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 140 - 143

      - Parameters [1] {
        Parameter #0 [ <required> $type ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface> public method keys ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 148 - 151
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionBagInterface> public method getStorageKey ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 156 - 159
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\HttpFoundation\Session\SessionBagInterface> public method clear ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 164 - 167
    }

    /**
     * Returns an iterator for flashes.
     *
     * @deprecated Will be removed in 3.0.
     *
     * @return \ArrayIterator An \ArrayIterator instance
     */
    Method [ <user, prototype IteratorAggregate> public method getIterator ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpFoundation/Session/Flash/FlashBag.php 176 - 179
    }
  }
}
";}i:472;a:5:{s:11:"Traversable";s:11:"Traversable";s:17:"IteratorAggregate";s:17:"IteratorAggregate";s:60:"Symfony\Component\HttpFoundation\Session\SessionBagInterface";s:60:"Symfony\Component\HttpFoundation\Session\SessionBagInterface";s:64:"Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface";s:64:"Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface";s:55:"Symfony\Component\HttpFoundation\Session\Flash\FlashBag";s:55:"Symfony\Component\HttpFoundation\Session\Flash\FlashBag";}i:473;a:2:{s:4:"name";s:14:"SessionHandler";s:13:" ~ reflection";s:1476:"Class [ <internal:session> class SessionHandler implements SessionHandlerInterface, SessionIdInterface ] {

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [0] {
  }

  - Methods [7] {
    Method [ <internal:session, prototype SessionHandlerInterface> public method open ] {

      - Parameters [2] {
        Parameter #0 [ <required> $save_path ]
        Parameter #1 [ <required> $session_name ]
      }
    }

    Method [ <internal:session, prototype SessionHandlerInterface> public method close ] {

      - Parameters [0] {
      }
    }

    Method [ <internal:session, prototype SessionHandlerInterface> public method read ] {

      - Parameters [1] {
        Parameter #0 [ <required> $key ]
      }
    }

    Method [ <internal:session, prototype SessionHandlerInterface> public method write ] {

      - Parameters [2] {
        Parameter #0 [ <required> $key ]
        Parameter #1 [ <required> $val ]
      }
    }

    Method [ <internal:session, prototype SessionHandlerInterface> public method destroy ] {

      - Parameters [1] {
        Parameter #0 [ <required> $key ]
      }
    }

    Method [ <internal:session, prototype SessionHandlerInterface> public method gc ] {

      - Parameters [1] {
        Parameter #0 [ <required> $maxlifetime ]
      }
    }

    Method [ <internal:session, prototype SessionIdInterface> public method create_sid ] {

      - Parameters [0] {
      }
    }
  }
}
";}i:474;a:3:{s:18:"SessionIdInterface";s:18:"SessionIdInterface";s:23:"SessionHandlerInterface";s:23:"SessionHandlerInterface";s:14:"SessionHandler";s:14:"SessionHandler";}i:475;a:2:{s:4:"name";s:31:"Monolog\Formatter\LineFormatter";s:13:" ~ reflection";s:6236:"/**
 * Formats incoming records into a one-line string
 *
 * This is especially useful for logging to files
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 * @author Christophe Coevoet <stof@notk.org>
 */
Class [ <user> class Monolog\Formatter\LineFormatter extends Monolog\Formatter\NormalizerFormatter implements Monolog\Formatter\FormatterInterface ] {
  @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php 22-179

  - Constants [2] {
    Constant [ string SIMPLE_FORMAT ] { [%datetime%] %channel%.%level_name%: %message% %context% %extra%
 }
    Constant [ string SIMPLE_DATE ] { Y-m-d H:i:s }
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [5] {
    Property [ <default> protected $format ]
    Property [ <default> protected $allowInlineLineBreaks ]
    Property [ <default> protected $ignoreEmptyContextAndExtra ]
    Property [ <default> protected $includeStacktraces ]
    Property [ <default> protected $dateFormat ]
  }

  - Methods [13] {
    /**
     * @param string $format                     The format of the message
     * @param string $dateFormat                 The format of the timestamp: one supported by DateTime::format
     * @param bool   $allowInlineLineBreaks      Whether to allow inline line breaks in log entries
     * @param bool   $ignoreEmptyContextAndExtra
     */
    Method [ <user, overwrites Monolog\Formatter\NormalizerFormatter, ctor> public method __construct ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php 37 - 43

      - Parameters [4] {
        Parameter #0 [ <optional> $format = NULL ]
        Parameter #1 [ <optional> $dateFormat = NULL ]
        Parameter #2 [ <optional> $allowInlineLineBreaks = false ]
        Parameter #3 [ <optional> $ignoreEmptyContextAndExtra = false ]
      }
    }

    Method [ <user> public method includeStacktraces ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php 45 - 51

      - Parameters [1] {
        Parameter #0 [ <optional> $include = true ]
      }
    }

    Method [ <user> public method allowInlineLineBreaks ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php 53 - 56

      - Parameters [1] {
        Parameter #0 [ <optional> $allow = true ]
      }
    }

    Method [ <user> public method ignoreEmptyContextAndExtra ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php 58 - 61

      - Parameters [1] {
        Parameter #0 [ <optional> $ignore = true ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Monolog\Formatter\NormalizerFormatter, prototype Monolog\Formatter\FormatterInterface> public method format ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php 66 - 111

      - Parameters [1] {
        Parameter #0 [ <required> array $record ]
      }
    }

    Method [ <user, overwrites Monolog\Formatter\NormalizerFormatter, prototype Monolog\Formatter\FormatterInterface> public method formatBatch ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php 113 - 121

      - Parameters [1] {
        Parameter #0 [ <required> array $records ]
      }
    }

    Method [ <user> public method stringify ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php 123 - 126

      - Parameters [1] {
        Parameter #0 [ <required> $value ]
      }
    }

    Method [ <user, overwrites Monolog\Formatter\NormalizerFormatter, prototype Monolog\Formatter\NormalizerFormatter> protected method normalizeException ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php 128 - 148

      - Parameters [1] {
        Parameter #0 [ <required> $e ]
      }
    }

    Method [ <user> protected method convertToString ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php 150 - 165

      - Parameters [1] {
        Parameter #0 [ <required> $data ]
      }
    }

    Method [ <user> protected method replaceNewlines ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php 167 - 178

      - Parameters [1] {
        Parameter #0 [ <required> $str ]
      }
    }

    Method [ <user, inherits Monolog\Formatter\NormalizerFormatter> protected method normalize ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php 58 - 114

      - Parameters [1] {
        Parameter #0 [ <required> $data ]
      }
    }

    /**
     * Return the JSON representation of a value
     *
     * @param  mixed             $data
     * @param  bool              $ignoreErrors
     * @throws \RuntimeException if encoding fails and errors are not ignored
     * @return string
     */
    Method [ <user, inherits Monolog\Formatter\NormalizerFormatter> protected method toJson ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php 172 - 186

      - Parameters [2] {
        Parameter #0 [ <required> $data ]
        Parameter #1 [ <optional> $ignoreErrors = false ]
      }
    }

    /**
     * Detect invalid UTF-8 string characters and convert to valid UTF-8.
     *
     * Valid UTF-8 input will be left unmodified, but strings containing
     * invalid UTF-8 codepoints will be reencoded as UTF-8 with an assumed
     * original encoding of ISO-8859-15. This conversion may result in
     * incorrect output if the actual encoding was not ISO-8859-15, but it
     * will be clean UTF-8 output and will not rely on expensive and fragile
     * detection algorithms.
     *
     * Function converts the input in place in the passed variable so that it
     * can be used as a callback for array_walk_recursive.
     *
     * @param mixed &$data Input to check and convert if needed
     * @private
     */
    Method [ <user, inherits Monolog\Formatter\NormalizerFormatter> public method detectAndCleanUtf8 ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php 282 - 296

      - Parameters [1] {
        Parameter #0 [ <required> &$data ]
      }
    }
  }
}
";}i:476;a:3:{s:36:"Monolog\Formatter\FormatterInterface";s:36:"Monolog\Formatter\FormatterInterface";s:37:"Monolog\Formatter\NormalizerFormatter";s:37:"Monolog\Formatter\NormalizerFormatter";s:31:"Monolog\Formatter\LineFormatter";s:31:"Monolog\Formatter\LineFormatter";}i:477;a:2:{s:4:"name";s:64:"Symfony\Component\HttpKernel\EventListener\DebugHandlersListener";s:13:" ~ reflection";s:2769:"/**
 * Configures errors and exceptions handlers.
 *
 * @author Nicolas Grekas <p@tchwork.com>
 */
Class [ <user> class Symfony\Component\HttpKernel\EventListener\DebugHandlersListener implements Symfony\Component\EventDispatcher\EventSubscriberInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/DebugHandlersListener.php 30-136

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [1] {
    Method [ <user, prototype Symfony\Component\EventDispatcher\EventSubscriberInterface> static public method getSubscribedEvents ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/DebugHandlersListener.php 126 - 135
    }
  }

  - Properties [7] {
    Property [ <default> private $exceptionHandler ]
    Property [ <default> private $logger ]
    Property [ <default> private $levels ]
    Property [ <default> private $throwAt ]
    Property [ <default> private $scream ]
    Property [ <default> private $fileLinkFormat ]
    Property [ <default> private $firstCall ]
  }

  - Methods [2] {
    /**
     * @param callable|null        $exceptionHandler A handler that will be called on Exception
     * @param LoggerInterface|null $logger           A PSR-3 logger
     * @param array|int            $levels           An array map of E_* to LogLevel::* or an integer bit field of E_* constants
     * @param int|null             $throwAt          Thrown errors in a bit field of E_* constants, or null to keep the current value
     * @param bool                 $scream           Enables/disables screaming mode, where even silenced errors are logged
     * @param string               $fileLinkFormat   The format for links to source files
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/DebugHandlersListener.php 48 - 56

      - Parameters [6] {
        Parameter #0 [ <required> $exceptionHandler ]
        Parameter #1 [ <optional> Psr\Log\LoggerInterface or NULL $logger = NULL ]
        Parameter #2 [ <optional> $levels = NULL ]
        Parameter #3 [ <optional> $throwAt = -1 ]
        Parameter #4 [ <optional> $scream = true ]
        Parameter #5 [ <optional> $fileLinkFormat = NULL ]
      }
    }

    /**
     * Configures the error handler.
     *
     * @param Event|null $event The triggering event
     */
    Method [ <user> public method configure ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/DebugHandlersListener.php 63 - 124

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\EventDispatcher\Event or NULL $event = NULL ]
      }
    }
  }
}
";}i:478;a:2:{s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:64:"Symfony\Component\HttpKernel\EventListener\DebugHandlersListener";s:64:"Symfony\Component\HttpKernel\EventListener\DebugHandlersListener";}i:479;a:2:{s:4:"name";s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";s:13:" ~ reflection";s:4199:"/**
 * ProfilerListener collects data for the current request by listening to the onKernelResponse event.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Component\HttpKernel\EventListener\ProfilerListener implements Symfony\Component\EventDispatcher\EventSubscriberInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/ProfilerListener.php 29-158

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [1] {
    Method [ <user, prototype Symfony\Component\EventDispatcher\EventSubscriberInterface> static public method getSubscribedEvents ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/ProfilerListener.php 147 - 157
    }
  }

  - Properties [9] {
    Property [ <default> protected $profiler ]
    Property [ <default> protected $matcher ]
    Property [ <default> protected $onlyException ]
    Property [ <default> protected $onlyMasterRequests ]
    Property [ <default> protected $exception ]
    Property [ <default> protected $requests ]
    Property [ <default> protected $profiles ]
    Property [ <default> protected $requestStack ]
    Property [ <default> protected $parents ]
  }

  - Methods [5] {
    /**
     * Constructor.
     *
     * @param Profiler                     $profiler           A Profiler instance
     * @param RequestMatcherInterface|null $matcher            A RequestMatcher instance
     * @param bool                         $onlyException      true if the profiler only collects data when an exception occurs, false otherwise
     * @param bool                         $onlyMasterRequests true if the profiler only collects data when the request is a master request, false otherwise
     * @param RequestStack|null            $requestStack       A RequestStack instance
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/ProfilerListener.php 50 - 59

      - Parameters [5] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Profiler\Profiler $profiler ]
        Parameter #1 [ <optional> Symfony\Component\HttpFoundation\RequestMatcherInterface or NULL $matcher = NULL ]
        Parameter #2 [ <optional> $onlyException = false ]
        Parameter #3 [ <optional> $onlyMasterRequests = false ]
        Parameter #4 [ <optional> Symfony\Component\HttpFoundation\RequestStack or NULL $requestStack = NULL ]
      }
    }

    /**
     * Handles the onKernelException event.
     *
     * @param GetResponseForExceptionEvent $event A GetResponseForExceptionEvent instance
     */
    Method [ <user> public method onKernelException ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/ProfilerListener.php 66 - 73

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event ]
      }
    }

    /**
     * @deprecated Deprecated since version 2.4, to be removed in 3.0.
     */
    Method [ <user> public method onKernelRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/ProfilerListener.php 78 - 83

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\GetResponseEvent $event ]
      }
    }

    /**
     * Handles the onKernelResponse event.
     *
     * @param FilterResponseEvent $event A FilterResponseEvent instance
     */
    Method [ <user> public method onKernelResponse ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/ProfilerListener.php 90 - 123

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\FilterResponseEvent $event ]
      }
    }

    Method [ <user> public method onKernelTerminate ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/ProfilerListener.php 125 - 145

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\PostResponseEvent $event ]
      }
    }
  }
}
";}i:480;a:2:{s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";s:59:"Symfony\Component\HttpKernel\EventListener\ProfilerListener";}i:481;a:2:{s:4:"name";s:55:"Symfony\Component\HttpKernel\EventListener\DumpListener";s:13:" ~ reflection";s:1543:"/**
 * Configures dump() handler.
 *
 * @author Nicolas Grekas <p@tchwork.com>
 */
Class [ <user> class Symfony\Component\HttpKernel\EventListener\DumpListener implements Symfony\Component\EventDispatcher\EventSubscriberInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/DumpListener.php 25-55

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [1] {
    Method [ <user, prototype Symfony\Component\EventDispatcher\EventSubscriberInterface> static public method getSubscribedEvents ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/DumpListener.php 50 - 54
    }
  }

  - Properties [2] {
    Property [ <default> private $cloner ]
    Property [ <default> private $dumper ]
  }

  - Methods [2] {
    /**
     * @param ClonerInterface     $cloner Cloner service.
     * @param DataDumperInterface $dumper Dumper service.
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/DumpListener.php 34 - 38

      - Parameters [2] {
        Parameter #0 [ <required> Symfony\Component\VarDumper\Cloner\ClonerInterface $cloner ]
        Parameter #1 [ <required> Symfony\Component\VarDumper\Dumper\DataDumperInterface $dumper ]
      }
    }

    Method [ <user> public method configure ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/DumpListener.php 40 - 48
    }
  }
}
";}i:482;a:2:{s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:55:"Symfony\Component\HttpKernel\EventListener\DumpListener";s:55:"Symfony\Component\HttpKernel\EventListener\DumpListener";}i:483;a:2:{s:4:"name";s:60:"Symfony\Bundle\FrameworkBundle\EventListener\SessionListener";s:13:" ~ reflection";s:1978:"/**
 * Sets the session in the request.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Bundle\FrameworkBundle\EventListener\SessionListener extends Symfony\Component\HttpKernel\EventListener\SessionListener implements Symfony\Component\EventDispatcher\EventSubscriberInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/EventListener/SessionListener.php 22-42

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [1] {
    Method [ <user, inherits Symfony\Component\HttpKernel\EventListener\SessionListener, prototype Symfony\Component\EventDispatcher\EventSubscriberInterface> static public method getSubscribedEvents ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/SessionListener.php 40 - 45
    }
  }

  - Properties [1] {
    Property [ <default> private $container ]
  }

  - Methods [3] {
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/EventListener/SessionListener.php 29 - 32

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerInterface $container ]
      }
    }

    Method [ <user, overwrites Symfony\Component\HttpKernel\EventListener\SessionListener, prototype Symfony\Component\HttpKernel\EventListener\SessionListener> protected method getSession ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/EventListener/SessionListener.php 34 - 41
    }

    Method [ <user, inherits Symfony\Component\HttpKernel\EventListener\SessionListener> public method onKernelRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/SessionListener.php 25 - 38

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\GetResponseEvent $event ]
      }
    }
  }
}
";}i:484;a:3:{s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:58:"Symfony\Component\HttpKernel\EventListener\SessionListener";s:58:"Symfony\Component\HttpKernel\EventListener\SessionListener";s:60:"Symfony\Bundle\FrameworkBundle\EventListener\SessionListener";s:60:"Symfony\Bundle\FrameworkBundle\EventListener\SessionListener";}i:485;a:2:{s:4:"name";s:59:"Symfony\Component\HttpKernel\EventListener\FragmentListener";s:13:" ~ reflection";s:2825:"/**
 * Handles content fragments represented by special URIs.
 *
 * All URL paths starting with /_fragment are handled as
 * content fragments by this listener.
 *
 * If throws an AccessDeniedHttpException exception if the request
 * is not signed or if it is not an internal sub-request.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Component\HttpKernel\EventListener\FragmentListener implements Symfony\Component\EventDispatcher\EventSubscriberInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/FragmentListener.php 32-106

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [1] {
    Method [ <user, prototype Symfony\Component\EventDispatcher\EventSubscriberInterface> static public method getSubscribedEvents ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/FragmentListener.php 100 - 105
    }
  }

  - Properties [2] {
    Property [ <default> private $signer ]
    Property [ <default> private $fragmentPath ]
  }

  - Methods [4] {
    /**
     * Constructor.
     *
     * @param UriSigner $signer       A UriSigner instance
     * @param string    $fragmentPath The path that triggers this listener
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/FragmentListener.php 43 - 47

      - Parameters [2] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\UriSigner $signer ]
        Parameter #1 [ <optional> $fragmentPath = '/_fragment' ]
      }
    }

    /**
     * Fixes request attributes when the path is '/_fragment'.
     *
     * @param GetResponseEvent $event A GetResponseEvent instance
     *
     * @throws AccessDeniedHttpException if the request does not come from a trusted IP.
     */
    Method [ <user> public method onKernelRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/FragmentListener.php 56 - 72

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\GetResponseEvent $event ]
      }
    }

    Method [ <user> protected method validateRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/FragmentListener.php 74 - 88

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
      }
    }

    /**
     * @deprecated Deprecated since 2.3.19, to be removed in 3.0.
     *
     * @return string[]
     */
    Method [ <user> protected method getLocalIpAddresses ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/FragmentListener.php 95 - 98
    }
  }
}
";}i:486;a:2:{s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:59:"Symfony\Component\HttpKernel\EventListener\FragmentListener";s:59:"Symfony\Component\HttpKernel\EventListener\FragmentListener";}i:487;a:2:{s:4:"name";s:57:"Symfony\Component\HttpKernel\EventListener\RouterListener";s:13:" ~ reflection";s:4044:"/**
 * Initializes the context from the request and sets request attributes based on a matching route.
 *
 * This listener works in 2 modes:
 *
 *  * 2.3 compatibility mode where you must call setRequest whenever the Request changes.
 *  * 2.4+ mode where you must pass a RequestStack instance in the constructor.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Component\HttpKernel\EventListener\RouterListener implements Symfony\Component\EventDispatcher\EventSubscriberInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php 40-169

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [1] {
    Method [ <user, prototype Symfony\Component\EventDispatcher\EventSubscriberInterface> static public method getSubscribedEvents ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php 162 - 168
    }
  }

  - Properties [5] {
    Property [ <default> private $matcher ]
    Property [ <default> private $context ]
    Property [ <default> private $logger ]
    Property [ <default> private $request ]
    Property [ <default> private $requestStack ]
  }

  - Methods [5] {
    /**
     * Constructor.
     *
     * RequestStack will become required in 3.0.
     *
     * @param UrlMatcherInterface|RequestMatcherInterface $matcher      The Url or Request matcher
     * @param RequestContext|null                         $context      The RequestContext (can be null when $matcher implements RequestContextAwareInterface)
     * @param LoggerInterface|null                        $logger       The logger
     * @param RequestStack|null                           $requestStack A RequestStack instance
     *
     * @throws \InvalidArgumentException
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php 60 - 74

      - Parameters [4] {
        Parameter #0 [ <required> $matcher ]
        Parameter #1 [ <optional> Symfony\Component\Routing\RequestContext or NULL $context = NULL ]
        Parameter #2 [ <optional> Psr\Log\LoggerInterface or NULL $logger = NULL ]
        Parameter #3 [ <optional> Symfony\Component\HttpFoundation\RequestStack or NULL $requestStack = NULL ]
      }
    }

    /**
     * Sets the current Request.
     *
     * This method was used to synchronize the Request, but as the HttpKernel
     * is doing that automatically now, you should never call it directly.
     * It is kept public for BC with the 2.3 version.
     *
     * @param Request|null $request A Request instance
     *
     * @deprecated Deprecated since version 2.4, to be moved to a private function in 3.0.
     */
    Method [ <user> public method setRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php 87 - 93

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\HttpFoundation\Request or NULL $request = NULL ]
      }
    }

    Method [ <user> public method onKernelFinishRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php 95 - 102

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\FinishRequestEvent $event ]
      }
    }

    Method [ <user> public method onKernelRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php 104 - 150

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\GetResponseEvent $event ]
      }
    }

    Method [ <user> private method parametersToString ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/RouterListener.php 152 - 160

      - Parameters [1] {
        Parameter #0 [ <required> array $parameters ]
      }
    }
  }
}
";}i:488;a:2:{s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:57:"Symfony\Component\HttpKernel\EventListener\RouterListener";s:57:"Symfony\Component\HttpKernel\EventListener\RouterListener";}i:489;a:2:{s:4:"name";s:57:"Symfony\Component\HttpKernel\EventListener\LocaleListener";s:13:" ~ reflection";s:3645:"/**
 * Initializes the locale based on the current request.
 *
 * This listener works in 2 modes:
 *
 *  * 2.3 compatibility mode where you must call setRequest whenever the Request changes.
 *  * 2.4+ mode where you must pass a RequestStack instance in the constructor.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Component\HttpKernel\EventListener\LocaleListener implements Symfony\Component\EventDispatcher\EventSubscriberInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/LocaleListener.php 32-111

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [1] {
    Method [ <user, prototype Symfony\Component\EventDispatcher\EventSubscriberInterface> static public method getSubscribedEvents ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/LocaleListener.php 103 - 110
    }
  }

  - Properties [3] {
    Property [ <default> private $router ]
    Property [ <default> private $defaultLocale ]
    Property [ <default> private $requestStack ]
  }

  - Methods [6] {
    /**
     * RequestStack will become required in 3.0.
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/LocaleListener.php 41 - 46

      - Parameters [3] {
        Parameter #0 [ <optional> $defaultLocale = 'en' ]
        Parameter #1 [ <optional> Symfony\Component\Routing\RequestContextAwareInterface or NULL $router = NULL ]
        Parameter #2 [ <optional> Symfony\Component\HttpFoundation\RequestStack or NULL $requestStack = NULL ]
      }
    }

    /**
     * Sets the current Request.
     *
     * This method was used to synchronize the Request, but as the HttpKernel
     * is doing that automatically now, you should never call it directly.
     * It is kept public for BC with the 2.3 version.
     *
     * @param Request|null $request A Request instance
     *
     * @deprecated Deprecated since version 2.4, to be removed in 3.0.
     */
    Method [ <user> public method setRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/LocaleListener.php 59 - 67

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\HttpFoundation\Request or NULL $request = NULL ]
      }
    }

    Method [ <user> public method onKernelRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/LocaleListener.php 69 - 76

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\GetResponseEvent $event ]
      }
    }

    Method [ <user> public method onKernelFinishRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/LocaleListener.php 78 - 87

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\FinishRequestEvent $event ]
      }
    }

    Method [ <user> private method setLocale ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/LocaleListener.php 89 - 94

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
      }
    }

    Method [ <user> private method setRouterContext ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/LocaleListener.php 96 - 101

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
      }
    }
  }
}
";}i:490;a:2:{s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:57:"Symfony\Component\HttpKernel\EventListener\LocaleListener";s:57:"Symfony\Component\HttpKernel\EventListener\LocaleListener";}i:491;a:2:{s:4:"name";s:61:"Symfony\Component\HttpKernel\EventListener\TranslatorListener";s:13:" ~ reflection";s:2252:"/**
 * Synchronizes the locale between the request and the translator.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Component\HttpKernel\EventListener\TranslatorListener implements Symfony\Component\EventDispatcher\EventSubscriberInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/TranslatorListener.php 27-69

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [1] {
    Method [ <user, prototype Symfony\Component\EventDispatcher\EventSubscriberInterface> static public method getSubscribedEvents ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/TranslatorListener.php 52 - 59
    }
  }

  - Properties [2] {
    Property [ <default> private $translator ]
    Property [ <default> private $requestStack ]
  }

  - Methods [4] {
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/TranslatorListener.php 32 - 36

      - Parameters [2] {
        Parameter #0 [ <required> Symfony\Component\Translation\TranslatorInterface $translator ]
        Parameter #1 [ <required> Symfony\Component\HttpFoundation\RequestStack $requestStack ]
      }
    }

    Method [ <user> public method onKernelRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/TranslatorListener.php 38 - 41

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\GetResponseEvent $event ]
      }
    }

    Method [ <user> public method onKernelFinishRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/TranslatorListener.php 43 - 50

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\FinishRequestEvent $event ]
      }
    }

    Method [ <user> private method setLocale ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/EventListener/TranslatorListener.php 61 - 68

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
      }
    }
  }
}
";}i:492;a:2:{s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:61:"Symfony\Component\HttpKernel\EventListener\TranslatorListener";s:61:"Symfony\Component\HttpKernel\EventListener\TranslatorListener";}i:493;a:2:{s:4:"name";s:40:"Symfony\Component\Security\Http\Firewall";s:13:" ~ reflection";s:2454:"/**
 * Firewall uses a FirewallMap to register security listeners for the given
 * request.
 *
 * It allows for different security strategies within the same application
 * (a Basic authentication for the /api, and a web based authentication for
 * everything else for instance).
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Component\Security\Http\Firewall implements Symfony\Component\EventDispatcher\EventSubscriberInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall.php 30-97

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [1] {
    /**
     * {@inheritdoc}
     */
    Method [ <user, prototype Symfony\Component\EventDispatcher\EventSubscriberInterface> static public method getSubscribedEvents ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall.php 90 - 96
    }
  }

  - Properties [3] {
    Property [ <default> private $map ]
    Property [ <default> private $dispatcher ]
    Property [ <default> private $exceptionListeners ]
  }

  - Methods [3] {
    /**
     * Constructor.
     *
     * @param FirewallMapInterface     $map        A FirewallMapInterface instance
     * @param EventDispatcherInterface $dispatcher An EventDispatcherInterface instance
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall.php 42 - 47

      - Parameters [2] {
        Parameter #0 [ <required> Symfony\Component\Security\Http\FirewallMapInterface $map ]
        Parameter #1 [ <required> Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher ]
      }
    }

    /**
     * Handles security.
     *
     * @param GetResponseEvent $event An GetResponseEvent instance
     */
    Method [ <user> public method onKernelRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall.php 54 - 75

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\GetResponseEvent $event ]
      }
    }

    Method [ <user> public method onKernelFinishRequest ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall.php 77 - 85

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\FinishRequestEvent $event ]
      }
    }
  }
}
";}i:494;a:2:{s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:40:"Symfony\Component\Security\Http\Firewall";s:40:"Symfony\Component\Security\Http\Firewall";}i:495;a:2:{s:4:"name";s:58:"Symfony\Bundle\AsseticBundle\EventListener\RequestListener";s:13:" ~ reflection";s:691:"/**
 * Adds a few formats to each request.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */
Class [ <user> class Symfony\Bundle\AsseticBundle\EventListener\RequestListener ] {
  @@ /var/www/html/vendor/symfony/assetic-bundle/EventListener/RequestListener.php 21-32

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [0] {
  }

  - Methods [1] {
    Method [ <user> public method onKernelRequest ] {
      @@ /var/www/html/vendor/symfony/assetic-bundle/EventListener/RequestListener.php 23 - 31

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\GetResponseEvent $event ]
      }
    }
  }
}
";}i:496;a:1:{s:58:"Symfony\Bundle\AsseticBundle\EventListener\RequestListener";s:58:"Symfony\Bundle\AsseticBundle\EventListener\RequestListener";}i:497;a:2:{s:4:"name";s:43:"AppBundle\EventListener\UserAgentSubscriber";s:13:" ~ reflection";s:1142:"Class [ <user> class AppBundle\EventListener\UserAgentSubscriber implements Symfony\Component\EventDispatcher\EventSubscriberInterface ] {
  @@ /var/www/html/src/AppBundle/EventListener/UserAgentSubscriber.php 10-36

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [1] {
    Method [ <user, prototype Symfony\Component\EventDispatcher\EventSubscriberInterface> static public method getSubscribedEvents ] {
      @@ /var/www/html/src/AppBundle/EventListener/UserAgentSubscriber.php 29 - 34
    }
  }

  - Properties [1] {
    Property [ <default> private $logger ]
  }

  - Methods [2] {
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/src/AppBundle/EventListener/UserAgentSubscriber.php 17 - 20

      - Parameters [1] {
        Parameter #0 [ <required> Psr\Log\LoggerInterface $logger ]
      }
    }

    Method [ <user> public method onKernelRequest ] {
      @@ /var/www/html/src/AppBundle/EventListener/UserAgentSubscriber.php 23 - 27

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\GetResponseEvent $event ]
      }
    }
  }
}
";}i:498;a:2:{s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:58:"Symfony\Component\EventDispatcher\EventSubscriberInterface";s:43:"AppBundle\EventListener\UserAgentSubscriber";s:43:"AppBundle\EventListener\UserAgentSubscriber";}i:499;a:2:{s:4:"name";s:58:"Symfony\Component\Security\Http\Firewall\ExceptionListener";s:13:" ~ reflection";s:5596:"/**
 * ExceptionListener catches authentication exception and converts them to
 * Response instances.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Component\Security\Http\Firewall\ExceptionListener ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ExceptionListener.php 40-208

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [8] {
    Property [ <default> private $context ]
    Property [ <default> private $providerKey ]
    Property [ <default> private $accessDeniedHandler ]
    Property [ <default> private $authenticationEntryPoint ]
    Property [ <default> private $authenticationTrustResolver ]
    Property [ <default> private $errorPage ]
    Property [ <default> private $logger ]
    Property [ <default> private $httpUtils ]
  }

  - Methods [9] {
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ExceptionListener.php 51 - 61

      - Parameters [8] {
        Parameter #0 [ <required> Symfony\Component\Security\Core\SecurityContextInterface $context ]
        Parameter #1 [ <required> Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolverInterface $trustResolver ]
        Parameter #2 [ <required> Symfony\Component\Security\Http\HttpUtils $httpUtils ]
        Parameter #3 [ <required> $providerKey ]
        Parameter #4 [ <optional> Symfony\Component\Security\Http\EntryPoint\AuthenticationEntryPointInterface or NULL $authenticationEntryPoint = NULL ]
        Parameter #5 [ <optional> $errorPage = NULL ]
        Parameter #6 [ <optional> Symfony\Component\Security\Http\Authorization\AccessDeniedHandlerInterface or NULL $accessDeniedHandler = NULL ]
        Parameter #7 [ <optional> Psr\Log\LoggerInterface or NULL $logger = NULL ]
      }
    }

    /**
     * Registers a onKernelException listener to take care of security exceptions.
     *
     * @param EventDispatcherInterface $dispatcher An EventDispatcherInterface instance
     */
    Method [ <user> public method register ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ExceptionListener.php 68 - 71

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher ]
      }
    }

    /**
     * Unregisters the dispatcher.
     *
     * @param EventDispatcherInterface $dispatcher An EventDispatcherInterface instance
     */
    Method [ <user> public method unregister ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ExceptionListener.php 78 - 81

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\EventDispatcher\EventDispatcherInterface $dispatcher ]
      }
    }

    /**
     * Handles security related exceptions.
     *
     * @param GetResponseForExceptionEvent $event An GetResponseForExceptionEvent instance
     */
    Method [ <user> public method onKernelException ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ExceptionListener.php 88 - 100

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event ]
      }
    }

    Method [ <user> private method handleAuthenticationException ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ExceptionListener.php 102 - 113

      - Parameters [2] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event ]
        Parameter #1 [ <required> Symfony\Component\Security\Core\Exception\AuthenticationException $exception ]
      }
    }

    Method [ <user> private method handleAccessDeniedException ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ExceptionListener.php 115 - 161

      - Parameters [2] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent $event ]
        Parameter #1 [ <required> Symfony\Component\Security\Core\Exception\AccessDeniedException $exception ]
      }
    }

    Method [ <user> private method handleLogoutException ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ExceptionListener.php 163 - 168

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Security\Core\Exception\LogoutException $exception ]
      }
    }

    /**
     * @param Request                 $request
     * @param AuthenticationException $authException
     *
     * @return Response
     *
     * @throws AuthenticationException
     */
    Method [ <user> private method startAuthentication ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ExceptionListener.php 178 - 196

      - Parameters [2] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
        Parameter #1 [ <required> Symfony\Component\Security\Core\Exception\AuthenticationException $authException ]
      }
    }

    /**
     * @param Request $request
     */
    Method [ <user> protected method setTargetPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ExceptionListener.php 201 - 207

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
      }
    }
  }
}
";}i:500;a:1:{s:58:"Symfony\Component\Security\Http\Firewall\ExceptionListener";s:58:"Symfony\Component\Security\Http\Firewall\ExceptionListener";}i:501;a:2:{s:4:"name";s:56:"Symfony\Component\Security\Http\Firewall\ContextListener";s:13:" ~ reflection";s:3005:"/**
 * ContextListener manages the SecurityContext persistence through a session.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Johannes M. Schmitt <schmittjoh@gmail.com>
 */
Class [ <user> class Symfony\Component\Security\Http\Firewall\ContextListener implements Symfony\Component\Security\Http\Firewall\ListenerInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ContextListener.php 33-182

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [6] {
    Property [ <default> private $context ]
    Property [ <default> private $contextKey ]
    Property [ <default> private $logger ]
    Property [ <default> private $userProviders ]
    Property [ <default> private $dispatcher ]
    Property [ <default> private $registered ]
  }

  - Methods [4] {
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ContextListener.php 42 - 59

      - Parameters [5] {
        Parameter #0 [ <required> Symfony\Component\Security\Core\SecurityContextInterface $context ]
        Parameter #1 [ <required> array $userProviders ]
        Parameter #2 [ <required> $contextKey ]
        Parameter #3 [ <optional> Psr\Log\LoggerInterface or NULL $logger = NULL ]
        Parameter #4 [ <optional> Symfony\Component\EventDispatcher\EventDispatcherInterface or NULL $dispatcher = NULL ]
      }
    }

    /**
     * Reads the SecurityContext from the session.
     *
     * @param GetResponseEvent $event A GetResponseEvent instance
     */
    Method [ <user, prototype Symfony\Component\Security\Http\Firewall\ListenerInterface> public method handle ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ContextListener.php 66 - 99

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\GetResponseEvent $event ]
      }
    }

    /**
     * Writes the SecurityContext to the session.
     *
     * @param FilterResponseEvent $event A FilterResponseEvent instance
     */
    Method [ <user> public method onKernelResponse ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ContextListener.php 106 - 137

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Event\FilterResponseEvent $event ]
      }
    }

    /**
     * Refreshes the user by reloading it from the user provider.
     *
     * @param TokenInterface $token
     *
     * @return TokenInterface|null
     *
     * @throws \RuntimeException
     */
    Method [ <user> protected method refreshUser ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Http/Firewall/ContextListener.php 148 - 181

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Security\Core\Authentication\Token\TokenInterface $token ]
      }
    }
  }
}
";}i:502;a:2:{s:58:"Symfony\Component\Security\Http\Firewall\ListenerInterface";s:58:"Symfony\Component\Security\Http\Firewall\ListenerInterface";s:56:"Symfony\Component\Security\Http\Firewall\ContextListener";s:56:"Symfony\Component\Security\Http\Firewall\ContextListener";}i:503;a:2:{s:4:"name";s:40:"Monolog\Processor\PsrLogMessageProcessor";s:13:" ~ reflection";s:783:"/**
 * Processes a record's message according to PSR-3 rules
 *
 * It replaces {foo} with the value from $context['foo']
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */
Class [ <user> class Monolog\Processor\PsrLogMessageProcessor ] {
  @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Processor/PsrLogMessageProcessor.php 21-48

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [0] {
  }

  - Methods [1] {
    /**
     * @param  array $record
     * @return array
     */
    Method [ <user> public method __invoke ] {
      @@ /var/www/html/vendor/monolog/monolog/src/Monolog/Processor/PsrLogMessageProcessor.php 27 - 47

      - Parameters [1] {
        Parameter #0 [ <required> array $record ]
      }
    }
  }
}
";}i:504;a:1:{s:40:"Monolog\Processor\PsrLogMessageProcessor";s:40:"Monolog\Processor\PsrLogMessageProcessor";}i:505;a:2:{s:4:"name";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:13:" ~ reflection";s:5283:"/**
 * Represents an Event managed by Stopwatch.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Component\Stopwatch\StopwatchEvent ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 19-237

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> private $periods ]
    Property [ <default> private $origin ]
    Property [ <default> private $category ]
    Property [ <default> private $started ]
  }

  - Methods [15] {
    /**
     * Constructor.
     *
     * @param float       $origin   The origin time in milliseconds
     * @param string|null $category The event category or null to use the default
     *
     * @throws \InvalidArgumentException When the raw time is not valid
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 49 - 53

      - Parameters [2] {
        Parameter #0 [ <required> $origin ]
        Parameter #1 [ <optional> $category = NULL ]
      }
    }

    /**
     * Gets the category.
     *
     * @return string The category
     */
    Method [ <user> public method getCategory ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 60 - 63
    }

    /**
     * Gets the origin.
     *
     * @return float The origin in milliseconds
     */
    Method [ <user> public method getOrigin ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 70 - 73
    }

    /**
     * Starts a new event period.
     *
     * @return StopwatchEvent The event
     */
    Method [ <user> public method start ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 80 - 85
    }

    /**
     * Stops the last started event period.
     *
     * @throws \LogicException When start wasn't called before stopping
     *
     * @return StopwatchEvent The event
     *
     * @throws \LogicException When stop() is called without a matching call to start()
     */
    Method [ <user> public method stop ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 96 - 105
    }

    /**
     * Checks if the event was started.
     *
     * @return bool
     */
    Method [ <user> public method isStarted ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 112 - 115
    }

    /**
     * Stops the current period and then starts a new one.
     *
     * @return StopwatchEvent The event
     */
    Method [ <user> public method lap ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 122 - 125
    }

    /**
     * Stops all non already stopped periods.
     */
    Method [ <user> public method ensureStopped ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 130 - 135
    }

    /**
     * Gets all event periods.
     *
     * @return StopwatchPeriod[] An array of StopwatchPeriod instances
     */
    Method [ <user> public method getPeriods ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 142 - 145
    }

    /**
     * Gets the relative time of the start of the first period.
     *
     * @return int The time (in milliseconds)
     */
    Method [ <user> public method getStartTime ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 152 - 155
    }

    /**
     * Gets the relative time of the end of the last period.
     *
     * @return int The time (in milliseconds)
     */
    Method [ <user> public method getEndTime ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 162 - 167
    }

    /**
     * Gets the duration of the events (including all periods).
     *
     * @return int The duration (in milliseconds)
     */
    Method [ <user> public method getDuration ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 174 - 191
    }

    /**
     * Gets the max memory usage of all periods.
     *
     * @return int The memory usage (in bytes)
     */
    Method [ <user> public method getMemory ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 198 - 208
    }

    /**
     * Return the current time relative to origin.
     *
     * @return float Time in ms
     */
    Method [ <user> protected method getNow ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 215 - 218
    }

    /**
     * Formats a time.
     *
     * @param int|float $time A raw time
     *
     * @return float The formatted time
     *
     * @throws \InvalidArgumentException When the raw time is not valid
     */
    Method [ <user> private method formatTime ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Stopwatch/StopwatchEvent.php 229 - 236

      - Parameters [1] {
        Parameter #0 [ <required> $time ]
      }
    }
  }
}
";}i:506;a:1:{s:42:"Symfony\Component\Stopwatch\StopwatchEvent";s:42:"Symfony\Component\Stopwatch\StopwatchEvent";}i:507;a:2:{s:4:"name";s:46:"Symfony\Bundle\FrameworkBundle\FrameworkBundle";s:13:" ~ reflection";s:5550:"/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Bundle\FrameworkBundle\FrameworkBundle extends Symfony\Component\HttpKernel\Bundle\Bundle implements Symfony\Component\HttpKernel\Bundle\BundleInterface, Symfony\Component\DependencyInjection\ContainerAwareInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/FrameworkBundle.php 46-99

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> protected $name ]
    Property [ <default> protected $extension ]
    Property [ <default> protected $path ]
    Property [ <default> protected $container ]
  }

  - Methods [11] {
    Method [ <user, overwrites Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method boot ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/FrameworkBundle.php 48 - 63
    }

    Method [ <user, overwrites Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method build ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/FrameworkBundle/FrameworkBundle.php 65 - 98

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * Shutdowns the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method shutdown ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 45 - 47
    }

    /**
     * Returns the bundle's container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @throws \LogicException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getContainerExtension ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 72 - 102
    }

    /**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getNamespace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 111 - 116
    }

    /**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 125 - 133
    }

    /**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getParent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 142 - 144
    }

    /**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> final public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 153 - 163
    }

    /**
     * Finds and registers Commands.
     *
     * Override this method if your bundle commands do not follow the conventions:
     *
     * * Commands are in the 'Command' sub-directory
     * * Commands extend Symfony\Component\Console\Command\Command
     *
     * @param Application $application An Application instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> public method registerCommands ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 175 - 202

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Application $application ]
      }
    }

    /**
     * Returns the bundle's container extension class.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> protected method getContainerExtensionClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 209 - 214
    }

    /**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\ContainerAware, prototype Symfony\Component\DependencyInjection\ContainerAwareInterface> public method setContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAware.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\DependencyInjection\ContainerInterface or NULL $container = NULL ]
      }
    }
  }
}
";}i:508;a:5:{s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:46:"Symfony\Bundle\FrameworkBundle\FrameworkBundle";s:46:"Symfony\Bundle\FrameworkBundle\FrameworkBundle";}i:509;a:2:{s:4:"name";s:44:"Symfony\Bundle\SecurityBundle\SecurityBundle";s:13:" ~ reflection";s:5579:"/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Bundle\SecurityBundle\SecurityBundle extends Symfony\Component\HttpKernel\Bundle\Bundle implements Symfony\Component\HttpKernel\Bundle\BundleInterface, Symfony\Component\DependencyInjection\ContainerAwareInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/SecurityBundle.php 32-51

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> protected $name ]
    Property [ <default> protected $extension ]
    Property [ <default> protected $path ]
    Property [ <default> protected $container ]
  }

  - Methods [11] {
    Method [ <user, overwrites Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method build ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/SecurityBundle/SecurityBundle.php 34 - 50

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * Boots the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method boot ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 38 - 40
    }

    /**
     * Shutdowns the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method shutdown ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 45 - 47
    }

    /**
     * Returns the bundle's container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @throws \LogicException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getContainerExtension ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 72 - 102
    }

    /**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getNamespace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 111 - 116
    }

    /**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 125 - 133
    }

    /**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getParent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 142 - 144
    }

    /**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> final public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 153 - 163
    }

    /**
     * Finds and registers Commands.
     *
     * Override this method if your bundle commands do not follow the conventions:
     *
     * * Commands are in the 'Command' sub-directory
     * * Commands extend Symfony\Component\Console\Command\Command
     *
     * @param Application $application An Application instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> public method registerCommands ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 175 - 202

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Application $application ]
      }
    }

    /**
     * Returns the bundle's container extension class.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> protected method getContainerExtensionClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 209 - 214
    }

    /**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\ContainerAware, prototype Symfony\Component\DependencyInjection\ContainerAwareInterface> public method setContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAware.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\DependencyInjection\ContainerInterface or NULL $container = NULL ]
      }
    }
  }
}
";}i:510;a:5:{s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:44:"Symfony\Bundle\SecurityBundle\SecurityBundle";s:44:"Symfony\Bundle\SecurityBundle\SecurityBundle";}i:511;a:2:{s:4:"name";s:36:"Symfony\Bundle\TwigBundle\TwigBundle";s:13:" ~ reflection";s:5555:"/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Bundle\TwigBundle\TwigBundle extends Symfony\Component\HttpKernel\Bundle\Bundle implements Symfony\Component\HttpKernel\Bundle\BundleInterface, Symfony\Component\DependencyInjection\ContainerAwareInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/TwigBundle.php 26-37

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> protected $name ]
    Property [ <default> protected $extension ]
    Property [ <default> protected $path ]
    Property [ <default> protected $container ]
  }

  - Methods [11] {
    Method [ <user, overwrites Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method build ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/TwigBundle/TwigBundle.php 28 - 36

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * Boots the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method boot ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 38 - 40
    }

    /**
     * Shutdowns the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method shutdown ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 45 - 47
    }

    /**
     * Returns the bundle's container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @throws \LogicException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getContainerExtension ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 72 - 102
    }

    /**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getNamespace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 111 - 116
    }

    /**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 125 - 133
    }

    /**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getParent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 142 - 144
    }

    /**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> final public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 153 - 163
    }

    /**
     * Finds and registers Commands.
     *
     * Override this method if your bundle commands do not follow the conventions:
     *
     * * Commands are in the 'Command' sub-directory
     * * Commands extend Symfony\Component\Console\Command\Command
     *
     * @param Application $application An Application instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> public method registerCommands ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 175 - 202

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Application $application ]
      }
    }

    /**
     * Returns the bundle's container extension class.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> protected method getContainerExtensionClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 209 - 214
    }

    /**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\ContainerAware, prototype Symfony\Component\DependencyInjection\ContainerAwareInterface> public method setContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAware.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\DependencyInjection\ContainerInterface or NULL $container = NULL ]
      }
    }
  }
}
";}i:512;a:5:{s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:36:"Symfony\Bundle\TwigBundle\TwigBundle";s:36:"Symfony\Bundle\TwigBundle\TwigBundle";}i:513;a:2:{s:4:"name";s:42:"Symfony\Bundle\MonologBundle\MonologBundle";s:13:" ~ reflection";s:5813:"/**
 * Bundle.
 *
 * @author Jordi Boggiano <j.boggiano@seld.be>
 */
Class [ <user> class Symfony\Bundle\MonologBundle\MonologBundle extends Symfony\Component\HttpKernel\Bundle\Bundle implements Symfony\Component\HttpKernel\Bundle\BundleInterface, Symfony\Component\DependencyInjection\ContainerAwareInterface ] {
  @@ /var/www/html/vendor/symfony/monolog-bundle/MonologBundle.php 30-55

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [1] {
    /**
     * @internal
     */
    Method [ <user> static public method includeStacktraces ] {
      @@ /var/www/html/vendor/symfony/monolog-bundle/MonologBundle.php 48 - 54

      - Parameters [1] {
        Parameter #0 [ <required> Monolog\Handler\HandlerInterface $handler ]
      }
    }
  }

  - Properties [4] {
    Property [ <default> protected $name ]
    Property [ <default> protected $extension ]
    Property [ <default> protected $path ]
    Property [ <default> protected $container ]
  }

  - Methods [11] {
    Method [ <user, overwrites Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method build ] {
      @@ /var/www/html/vendor/symfony/monolog-bundle/MonologBundle.php 32 - 43

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * Boots the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method boot ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 38 - 40
    }

    /**
     * Shutdowns the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method shutdown ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 45 - 47
    }

    /**
     * Returns the bundle's container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @throws \LogicException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getContainerExtension ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 72 - 102
    }

    /**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getNamespace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 111 - 116
    }

    /**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 125 - 133
    }

    /**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getParent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 142 - 144
    }

    /**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> final public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 153 - 163
    }

    /**
     * Finds and registers Commands.
     *
     * Override this method if your bundle commands do not follow the conventions:
     *
     * * Commands are in the 'Command' sub-directory
     * * Commands extend Symfony\Component\Console\Command\Command
     *
     * @param Application $application An Application instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> public method registerCommands ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 175 - 202

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Application $application ]
      }
    }

    /**
     * Returns the bundle's container extension class.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> protected method getContainerExtensionClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 209 - 214
    }

    /**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\ContainerAware, prototype Symfony\Component\DependencyInjection\ContainerAwareInterface> public method setContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAware.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\DependencyInjection\ContainerInterface or NULL $container = NULL ]
      }
    }
  }
}
";}i:514;a:5:{s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Bundle\MonologBundle\MonologBundle";s:42:"Symfony\Bundle\MonologBundle\MonologBundle";}i:515;a:2:{s:4:"name";s:50:"Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle";s:13:" ~ reflection";s:5545:"/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle extends Symfony\Component\HttpKernel\Bundle\Bundle implements Symfony\Component\HttpKernel\Bundle\BundleInterface, Symfony\Component\DependencyInjection\ContainerAwareInterface ] {
  @@ /var/www/html/vendor/symfony/swiftmailer-bundle/SwiftmailerBundle.php 23-31

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> protected $name ]
    Property [ <default> protected $extension ]
    Property [ <default> protected $path ]
    Property [ <default> protected $container ]
  }

  - Methods [11] {
    Method [ <user, overwrites Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method build ] {
      @@ /var/www/html/vendor/symfony/swiftmailer-bundle/SwiftmailerBundle.php 25 - 30

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * Boots the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method boot ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 38 - 40
    }

    /**
     * Shutdowns the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method shutdown ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 45 - 47
    }

    /**
     * Returns the bundle's container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @throws \LogicException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getContainerExtension ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 72 - 102
    }

    /**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getNamespace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 111 - 116
    }

    /**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 125 - 133
    }

    /**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getParent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 142 - 144
    }

    /**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> final public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 153 - 163
    }

    /**
     * Finds and registers Commands.
     *
     * Override this method if your bundle commands do not follow the conventions:
     *
     * * Commands are in the 'Command' sub-directory
     * * Commands extend Symfony\Component\Console\Command\Command
     *
     * @param Application $application An Application instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> public method registerCommands ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 175 - 202

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Application $application ]
      }
    }

    /**
     * Returns the bundle's container extension class.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> protected method getContainerExtensionClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 209 - 214
    }

    /**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\ContainerAware, prototype Symfony\Component\DependencyInjection\ContainerAwareInterface> public method setContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAware.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\DependencyInjection\ContainerInterface or NULL $container = NULL ]
      }
    }
  }
}
";}i:516;a:5:{s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:50:"Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle";s:50:"Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle";}i:517;a:2:{s:4:"name";s:42:"Symfony\Bundle\AsseticBundle\AsseticBundle";s:13:" ~ reflection";s:5530:"/**
 * Assetic integration.
 *
 * @author Kris Wallsmith <kris@symfony.com>
 */
Class [ <user> class Symfony\Bundle\AsseticBundle\AsseticBundle extends Symfony\Component\HttpKernel\Bundle\Bundle implements Symfony\Component\HttpKernel\Bundle\BundleInterface, Symfony\Component\DependencyInjection\ContainerAwareInterface ] {
  @@ /var/www/html/vendor/symfony/assetic-bundle/AsseticBundle.php 23-39

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> protected $name ]
    Property [ <default> protected $extension ]
    Property [ <default> protected $path ]
    Property [ <default> protected $container ]
  }

  - Methods [11] {
    Method [ <user, overwrites Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method build ] {
      @@ /var/www/html/vendor/symfony/assetic-bundle/AsseticBundle.php 25 - 38

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * Boots the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method boot ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 38 - 40
    }

    /**
     * Shutdowns the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method shutdown ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 45 - 47
    }

    /**
     * Returns the bundle's container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @throws \LogicException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getContainerExtension ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 72 - 102
    }

    /**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getNamespace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 111 - 116
    }

    /**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 125 - 133
    }

    /**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getParent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 142 - 144
    }

    /**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> final public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 153 - 163
    }

    /**
     * Finds and registers Commands.
     *
     * Override this method if your bundle commands do not follow the conventions:
     *
     * * Commands are in the 'Command' sub-directory
     * * Commands extend Symfony\Component\Console\Command\Command
     *
     * @param Application $application An Application instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> public method registerCommands ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 175 - 202

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Application $application ]
      }
    }

    /**
     * Returns the bundle's container extension class.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> protected method getContainerExtensionClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 209 - 214
    }

    /**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\ContainerAware, prototype Symfony\Component\DependencyInjection\ContainerAwareInterface> public method setContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAware.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\DependencyInjection\ContainerInterface or NULL $container = NULL ]
      }
    }
  }
}
";}i:518;a:5:{s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Bundle\AsseticBundle\AsseticBundle";s:42:"Symfony\Bundle\AsseticBundle\AsseticBundle";}i:519;a:2:{s:4:"name";s:45:"Doctrine\Bundle\DoctrineBundle\DoctrineBundle";s:13:" ~ reflection";s:5342:"/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */
Class [ <user> class Doctrine\Bundle\DoctrineBundle\DoctrineBundle extends Symfony\Component\HttpKernel\Bundle\Bundle implements Symfony\Component\HttpKernel\Bundle\BundleInterface, Symfony\Component\DependencyInjection\ContainerAwareInterface ] {
  @@ /var/www/html/vendor/doctrine/doctrine-bundle/DoctrineBundle.php 38-155

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [5] {
    Property [ <default> private $autoloader ]
    Property [ <default> protected $name ]
    Property [ <default> protected $extension ]
    Property [ <default> protected $path ]
    Property [ <default> protected $container ]
  }

  - Methods [11] {
    /**
     * {@inheritDoc}
     */
    Method [ <user, overwrites Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method build ] {
      @@ /var/www/html/vendor/doctrine/doctrine-bundle/DoctrineBundle.php 45 - 57

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * {@inheritDoc}
     */
    Method [ <user, overwrites Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method boot ] {
      @@ /var/www/html/vendor/doctrine/doctrine-bundle/DoctrineBundle.php 62 - 106
    }

    /**
     * {@inheritDoc}
     */
    Method [ <user, overwrites Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method shutdown ] {
      @@ /var/www/html/vendor/doctrine/doctrine-bundle/DoctrineBundle.php 111 - 135
    }

    /**
     * {@inheritDoc}
     */
    Method [ <user, overwrites Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\Bundle> public method registerCommands ] {
      @@ /var/www/html/vendor/doctrine/doctrine-bundle/DoctrineBundle.php 140 - 154

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Application $application ]
      }
    }

    /**
     * Returns the bundle's container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @throws \LogicException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getContainerExtension ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 72 - 102
    }

    /**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getNamespace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 111 - 116
    }

    /**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 125 - 133
    }

    /**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getParent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 142 - 144
    }

    /**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> final public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 153 - 163
    }

    /**
     * Returns the bundle's container extension class.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> protected method getContainerExtensionClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 209 - 214
    }

    /**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\ContainerAware, prototype Symfony\Component\DependencyInjection\ContainerAwareInterface> public method setContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAware.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\DependencyInjection\ContainerInterface or NULL $container = NULL ]
      }
    }
  }
}
";}i:520;a:5:{s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:45:"Doctrine\Bundle\DoctrineBundle\DoctrineBundle";s:45:"Doctrine\Bundle\DoctrineBundle\DoctrineBundle";}i:521;a:2:{s:4:"name";s:61:"Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle";s:13:" ~ reflection";s:5566:"/**
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle extends Symfony\Component\HttpKernel\Bundle\Bundle implements Symfony\Component\HttpKernel\Bundle\BundleInterface, Symfony\Component\DependencyInjection\ContainerAwareInterface ] {
  @@ /var/www/html/vendor/sensio/framework-extra-bundle/SensioFrameworkExtraBundle.php 23-33

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> protected $name ]
    Property [ <default> protected $extension ]
    Property [ <default> protected $path ]
    Property [ <default> protected $container ]
  }

  - Methods [11] {
    Method [ <user, overwrites Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method build ] {
      @@ /var/www/html/vendor/sensio/framework-extra-bundle/SensioFrameworkExtraBundle.php 25 - 32

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * Boots the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method boot ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 38 - 40
    }

    /**
     * Shutdowns the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method shutdown ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 45 - 47
    }

    /**
     * Returns the bundle's container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @throws \LogicException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getContainerExtension ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 72 - 102
    }

    /**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getNamespace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 111 - 116
    }

    /**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 125 - 133
    }

    /**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getParent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 142 - 144
    }

    /**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> final public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 153 - 163
    }

    /**
     * Finds and registers Commands.
     *
     * Override this method if your bundle commands do not follow the conventions:
     *
     * * Commands are in the 'Command' sub-directory
     * * Commands extend Symfony\Component\Console\Command\Command
     *
     * @param Application $application An Application instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> public method registerCommands ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 175 - 202

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Application $application ]
      }
    }

    /**
     * Returns the bundle's container extension class.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> protected method getContainerExtensionClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 209 - 214
    }

    /**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\ContainerAware, prototype Symfony\Component\DependencyInjection\ContainerAwareInterface> public method setContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAware.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\DependencyInjection\ContainerInterface or NULL $container = NULL ]
      }
    }
  }
}
";}i:522;a:5:{s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:61:"Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle";s:61:"Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle";}i:523;a:2:{s:4:"name";s:19:"AppBundle\AppBundle";s:13:" ~ reflection";s:5721:"Class [ <user> class AppBundle\AppBundle extends Symfony\Component\HttpKernel\Bundle\Bundle implements Symfony\Component\HttpKernel\Bundle\BundleInterface, Symfony\Component\DependencyInjection\ContainerAwareInterface ] {
  @@ /var/www/html/src/AppBundle/AppBundle.php 7-10

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> protected $name ]
    Property [ <default> protected $extension ]
    Property [ <default> protected $path ]
    Property [ <default> protected $container ]
  }

  - Methods [11] {
    /**
     * Boots the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method boot ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 38 - 40
    }

    /**
     * Shutdowns the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method shutdown ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 45 - 47
    }

    /**
     * Builds the bundle.
     *
     * It is only ever called once when the cache is empty.
     *
     * This method can be overridden to register compilation passes,
     * other extensions, ...
     *
     * @param ContainerBuilder $container A ContainerBuilder instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method build ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 59 - 61

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * Returns the bundle's container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @throws \LogicException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getContainerExtension ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 72 - 102
    }

    /**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getNamespace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 111 - 116
    }

    /**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 125 - 133
    }

    /**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getParent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 142 - 144
    }

    /**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> final public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 153 - 163
    }

    /**
     * Finds and registers Commands.
     *
     * Override this method if your bundle commands do not follow the conventions:
     *
     * * Commands are in the 'Command' sub-directory
     * * Commands extend Symfony\Component\Console\Command\Command
     *
     * @param Application $application An Application instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> public method registerCommands ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 175 - 202

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Application $application ]
      }
    }

    /**
     * Returns the bundle's container extension class.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> protected method getContainerExtensionClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 209 - 214
    }

    /**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\ContainerAware, prototype Symfony\Component\DependencyInjection\ContainerAwareInterface> public method setContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAware.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\DependencyInjection\ContainerInterface or NULL $container = NULL ]
      }
    }
  }
}
";}i:524;a:5:{s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:19:"AppBundle\AppBundle";s:19:"AppBundle\AppBundle";}i:525;a:2:{s:4:"name";s:38:"Symfony\Bundle\DebugBundle\DebugBundle";s:13:" ~ reflection";s:5534:"/**
 * @author Nicolas Grekas <p@tchwork.com>
 */
Class [ <user> class Symfony\Bundle\DebugBundle\DebugBundle extends Symfony\Component\HttpKernel\Bundle\Bundle implements Symfony\Component\HttpKernel\Bundle\BundleInterface, Symfony\Component\DependencyInjection\ContainerAwareInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/DebugBundle/DebugBundle.php 22-53

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> protected $name ]
    Property [ <default> protected $extension ]
    Property [ <default> protected $path ]
    Property [ <default> protected $container ]
  }

  - Methods [11] {
    Method [ <user, overwrites Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method boot ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/DebugBundle/DebugBundle.php 24 - 42
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method build ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/DebugBundle/DebugBundle.php 47 - 52

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * Shutdowns the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method shutdown ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 45 - 47
    }

    /**
     * Returns the bundle's container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @throws \LogicException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getContainerExtension ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 72 - 102
    }

    /**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getNamespace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 111 - 116
    }

    /**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 125 - 133
    }

    /**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getParent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 142 - 144
    }

    /**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> final public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 153 - 163
    }

    /**
     * Finds and registers Commands.
     *
     * Override this method if your bundle commands do not follow the conventions:
     *
     * * Commands are in the 'Command' sub-directory
     * * Commands extend Symfony\Component\Console\Command\Command
     *
     * @param Application $application An Application instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> public method registerCommands ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 175 - 202

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Application $application ]
      }
    }

    /**
     * Returns the bundle's container extension class.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> protected method getContainerExtensionClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 209 - 214
    }

    /**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\ContainerAware, prototype Symfony\Component\DependencyInjection\ContainerAwareInterface> public method setContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAware.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\DependencyInjection\ContainerInterface or NULL $container = NULL ]
      }
    }
  }
}
";}i:526;a:5:{s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:38:"Symfony\Bundle\DebugBundle\DebugBundle";s:38:"Symfony\Bundle\DebugBundle\DebugBundle";}i:527;a:2:{s:4:"name";s:50:"Symfony\Bundle\WebProfilerBundle\WebProfilerBundle";s:13:" ~ reflection";s:5878:"/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Bundle\WebProfilerBundle\WebProfilerBundle extends Symfony\Component\HttpKernel\Bundle\Bundle implements Symfony\Component\HttpKernel\Bundle\BundleInterface, Symfony\Component\DependencyInjection\ContainerAwareInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/WebProfilerBundle.php 21-23

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> protected $name ]
    Property [ <default> protected $extension ]
    Property [ <default> protected $path ]
    Property [ <default> protected $container ]
  }

  - Methods [11] {
    /**
     * Boots the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method boot ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 38 - 40
    }

    /**
     * Shutdowns the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method shutdown ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 45 - 47
    }

    /**
     * Builds the bundle.
     *
     * It is only ever called once when the cache is empty.
     *
     * This method can be overridden to register compilation passes,
     * other extensions, ...
     *
     * @param ContainerBuilder $container A ContainerBuilder instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method build ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 59 - 61

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * Returns the bundle's container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @throws \LogicException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getContainerExtension ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 72 - 102
    }

    /**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getNamespace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 111 - 116
    }

    /**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 125 - 133
    }

    /**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getParent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 142 - 144
    }

    /**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> final public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 153 - 163
    }

    /**
     * Finds and registers Commands.
     *
     * Override this method if your bundle commands do not follow the conventions:
     *
     * * Commands are in the 'Command' sub-directory
     * * Commands extend Symfony\Component\Console\Command\Command
     *
     * @param Application $application An Application instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> public method registerCommands ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 175 - 202

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Application $application ]
      }
    }

    /**
     * Returns the bundle's container extension class.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> protected method getContainerExtensionClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 209 - 214
    }

    /**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\ContainerAware, prototype Symfony\Component\DependencyInjection\ContainerAwareInterface> public method setContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAware.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\DependencyInjection\ContainerInterface or NULL $container = NULL ]
      }
    }
  }
}
";}i:528;a:5:{s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:50:"Symfony\Bundle\WebProfilerBundle\WebProfilerBundle";s:50:"Symfony\Bundle\WebProfilerBundle\WebProfilerBundle";}i:529;a:2:{s:4:"name";s:57:"Sensio\Bundle\DistributionBundle\SensioDistributionBundle";s:13:" ~ reflection";s:5760:"/**
 * SensioDistributionBundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Marc Weistroff <marc.weistroff@sensio.com>
 * @author Jérôme Vieilledent <lolautruche@gmail.com>
 */
Class [ <user> class Sensio\Bundle\DistributionBundle\SensioDistributionBundle extends Symfony\Component\HttpKernel\Bundle\Bundle implements Symfony\Component\HttpKernel\Bundle\BundleInterface, Symfony\Component\DependencyInjection\ContainerAwareInterface ] {
  @@ /var/www/html/vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle/SensioDistributionBundle.php 25-31

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> protected $name ]
    Property [ <default> protected $extension ]
    Property [ <default> protected $path ]
    Property [ <default> protected $container ]
  }

  - Methods [11] {
    Method [ <user, overwrites Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method build ] {
      @@ /var/www/html/vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle/SensioDistributionBundle.php 27 - 30

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * Boots the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method boot ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 38 - 40
    }

    /**
     * Shutdowns the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method shutdown ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 45 - 47
    }

    /**
     * Returns the bundle's container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @throws \LogicException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getContainerExtension ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 72 - 102
    }

    /**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getNamespace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 111 - 116
    }

    /**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 125 - 133
    }

    /**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getParent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 142 - 144
    }

    /**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> final public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 153 - 163
    }

    /**
     * Finds and registers Commands.
     *
     * Override this method if your bundle commands do not follow the conventions:
     *
     * * Commands are in the 'Command' sub-directory
     * * Commands extend Symfony\Component\Console\Command\Command
     *
     * @param Application $application An Application instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> public method registerCommands ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 175 - 202

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Application $application ]
      }
    }

    /**
     * Returns the bundle's container extension class.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> protected method getContainerExtensionClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 209 - 214
    }

    /**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\ContainerAware, prototype Symfony\Component\DependencyInjection\ContainerAwareInterface> public method setContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAware.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\DependencyInjection\ContainerInterface or NULL $container = NULL ]
      }
    }
  }
}
";}i:530;a:5:{s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:57:"Sensio\Bundle\DistributionBundle\SensioDistributionBundle";s:57:"Sensio\Bundle\DistributionBundle\SensioDistributionBundle";}i:531;a:2:{s:4:"name";s:51:"Sensio\Bundle\GeneratorBundle\SensioGeneratorBundle";s:13:" ~ reflection";s:5899:"/**
 * SensioGeneratorBundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Sensio\Bundle\GeneratorBundle\SensioGeneratorBundle extends Symfony\Component\HttpKernel\Bundle\Bundle implements Symfony\Component\HttpKernel\Bundle\BundleInterface, Symfony\Component\DependencyInjection\ContainerAwareInterface ] {
  @@ /var/www/html/vendor/sensio/generator-bundle/Sensio/Bundle/GeneratorBundle/SensioGeneratorBundle.php 21-23

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> protected $name ]
    Property [ <default> protected $extension ]
    Property [ <default> protected $path ]
    Property [ <default> protected $container ]
  }

  - Methods [11] {
    /**
     * Boots the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method boot ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 38 - 40
    }

    /**
     * Shutdowns the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method shutdown ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 45 - 47
    }

    /**
     * Builds the bundle.
     *
     * It is only ever called once when the cache is empty.
     *
     * This method can be overridden to register compilation passes,
     * other extensions, ...
     *
     * @param ContainerBuilder $container A ContainerBuilder instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method build ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 59 - 61

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * Returns the bundle's container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @throws \LogicException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getContainerExtension ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 72 - 102
    }

    /**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getNamespace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 111 - 116
    }

    /**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 125 - 133
    }

    /**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getParent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 142 - 144
    }

    /**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> final public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 153 - 163
    }

    /**
     * Finds and registers Commands.
     *
     * Override this method if your bundle commands do not follow the conventions:
     *
     * * Commands are in the 'Command' sub-directory
     * * Commands extend Symfony\Component\Console\Command\Command
     *
     * @param Application $application An Application instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> public method registerCommands ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 175 - 202

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Application $application ]
      }
    }

    /**
     * Returns the bundle's container extension class.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> protected method getContainerExtensionClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 209 - 214
    }

    /**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\ContainerAware, prototype Symfony\Component\DependencyInjection\ContainerAwareInterface> public method setContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAware.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\DependencyInjection\ContainerInterface or NULL $container = NULL ]
      }
    }
  }
}
";}i:532;a:5:{s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:51:"Sensio\Bundle\GeneratorBundle\SensioGeneratorBundle";s:51:"Sensio\Bundle\GeneratorBundle\SensioGeneratorBundle";}i:533;a:2:{s:4:"name";s:53:"Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle";s:13:" ~ reflection";s:5915:"/**
 * Bundle.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 * @author Jonathan H. Wage <jonwage@gmail.com>
 */
Class [ <user> class Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle extends Symfony\Component\HttpKernel\Bundle\Bundle implements Symfony\Component\HttpKernel\Bundle\BundleInterface, Symfony\Component\DependencyInjection\ContainerAwareInterface ] {
  @@ /var/www/html/vendor/doctrine/doctrine-fixtures-bundle/DoctrineFixturesBundle.php 25-27

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> protected $name ]
    Property [ <default> protected $extension ]
    Property [ <default> protected $path ]
    Property [ <default> protected $container ]
  }

  - Methods [11] {
    /**
     * Boots the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method boot ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 38 - 40
    }

    /**
     * Shutdowns the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method shutdown ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 45 - 47
    }

    /**
     * Builds the bundle.
     *
     * It is only ever called once when the cache is empty.
     *
     * This method can be overridden to register compilation passes,
     * other extensions, ...
     *
     * @param ContainerBuilder $container A ContainerBuilder instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method build ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 59 - 61

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * Returns the bundle's container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @throws \LogicException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getContainerExtension ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 72 - 102
    }

    /**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getNamespace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 111 - 116
    }

    /**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 125 - 133
    }

    /**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getParent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 142 - 144
    }

    /**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> final public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 153 - 163
    }

    /**
     * Finds and registers Commands.
     *
     * Override this method if your bundle commands do not follow the conventions:
     *
     * * Commands are in the 'Command' sub-directory
     * * Commands extend Symfony\Component\Console\Command\Command
     *
     * @param Application $application An Application instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> public method registerCommands ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 175 - 202

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Application $application ]
      }
    }

    /**
     * Returns the bundle's container extension class.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> protected method getContainerExtensionClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 209 - 214
    }

    /**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\ContainerAware, prototype Symfony\Component\DependencyInjection\ContainerAwareInterface> public method setContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAware.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\DependencyInjection\ContainerInterface or NULL $container = NULL ]
      }
    }
  }
}
";}i:534;a:5:{s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:53:"Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle";s:53:"Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle";}i:535;a:2:{s:4:"name";s:42:"Hautelook\AliceBundle\HautelookAliceBundle";s:13:" ~ reflection";s:5770:"Class [ <user> class Hautelook\AliceBundle\HautelookAliceBundle extends Symfony\Component\HttpKernel\Bundle\Bundle implements Symfony\Component\HttpKernel\Bundle\BundleInterface, Symfony\Component\DependencyInjection\ContainerAwareInterface ] {
  @@ /var/www/html/vendor/hautelook/alice-bundle/HautelookAliceBundle.php 7-9

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> protected $name ]
    Property [ <default> protected $extension ]
    Property [ <default> protected $path ]
    Property [ <default> protected $container ]
  }

  - Methods [11] {
    /**
     * Boots the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method boot ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 38 - 40
    }

    /**
     * Shutdowns the Bundle.
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method shutdown ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 45 - 47
    }

    /**
     * Builds the bundle.
     *
     * It is only ever called once when the cache is empty.
     *
     * This method can be overridden to register compilation passes,
     * other extensions, ...
     *
     * @param ContainerBuilder $container A ContainerBuilder instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method build ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 59 - 61

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\DependencyInjection\ContainerBuilder $container ]
      }
    }

    /**
     * Returns the bundle's container extension.
     *
     * @return ExtensionInterface|null The container extension
     *
     * @throws \LogicException
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getContainerExtension ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 72 - 102
    }

    /**
     * Gets the Bundle namespace.
     *
     * @return string The Bundle namespace
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getNamespace ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 111 - 116
    }

    /**
     * Gets the Bundle directory path.
     *
     * @return string The Bundle absolute path
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getPath ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 125 - 133
    }

    /**
     * Returns the bundle parent name.
     *
     * @return string The Bundle parent name it overrides or null if no parent
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> public method getParent ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 142 - 144
    }

    /**
     * Returns the bundle name (the class short name).
     *
     * @return string The Bundle name
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle, prototype Symfony\Component\HttpKernel\Bundle\BundleInterface> final public method getName ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 153 - 163
    }

    /**
     * Finds and registers Commands.
     *
     * Override this method if your bundle commands do not follow the conventions:
     *
     * * Commands are in the 'Command' sub-directory
     * * Commands extend Symfony\Component\Console\Command\Command
     *
     * @param Application $application An Application instance
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> public method registerCommands ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 175 - 202

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\Console\Application $application ]
      }
    }

    /**
     * Returns the bundle's container extension class.
     *
     * @return string
     */
    Method [ <user, inherits Symfony\Component\HttpKernel\Bundle\Bundle> protected method getContainerExtensionClass ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Bundle/Bundle.php 209 - 214
    }

    /**
     * Sets the Container associated with this Controller.
     *
     * @param ContainerInterface $container A ContainerInterface instance
     *
     * @api
     */
    Method [ <user, inherits Symfony\Component\DependencyInjection\ContainerAware, prototype Symfony\Component\DependencyInjection\ContainerAwareInterface> public method setContainer ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/ContainerAware.php 37 - 40

      - Parameters [1] {
        Parameter #0 [ <optional> Symfony\Component\DependencyInjection\ContainerInterface or NULL $container = NULL ]
      }
    }
  }
}
";}i:536;a:5:{s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:61:"Symfony\Component\DependencyInjection\ContainerAwareInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:51:"Symfony\Component\HttpKernel\Bundle\BundleInterface";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:52:"Symfony\Component\DependencyInjection\ContainerAware";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Symfony\Component\HttpKernel\Bundle\Bundle";s:42:"Hautelook\AliceBundle\HautelookAliceBundle";s:42:"Hautelook\AliceBundle\HautelookAliceBundle";}i:537;a:2:{s:4:"name";s:46:"Symfony\Component\HttpKernel\Profiler\Profiler";s:13:" ~ reflection";s:8008:"/**
 * Profiler.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
Class [ <user> class Symfony\Component\HttpKernel\Profiler\Profiler ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 25-295

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [4] {
    Property [ <default> private $storage ]
    Property [ <default> private $collectors ]
    Property [ <default> private $logger ]
    Property [ <default> private $enabled ]
  }

  - Methods [17] {
    /**
     * Constructor.
     *
     * @param ProfilerStorageInterface $storage A ProfilerStorageInterface instance
     * @param LoggerInterface          $logger  A LoggerInterface instance
     */
    Method [ <user, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 53 - 57

      - Parameters [2] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Profiler\ProfilerStorageInterface $storage ]
        Parameter #1 [ <optional> Psr\Log\LoggerInterface or NULL $logger = NULL ]
      }
    }

    /**
     * Disables the profiler.
     */
    Method [ <user> public method disable ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 62 - 65
    }

    /**
     * Enables the profiler.
     */
    Method [ <user> public method enable ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 70 - 73
    }

    /**
     * Loads the Profile for the given Response.
     *
     * @param Response $response A Response instance
     *
     * @return Profile A Profile instance
     */
    Method [ <user> public method loadProfileFromResponse ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 82 - 89

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Response $response ]
      }
    }

    /**
     * Loads the Profile for the given token.
     *
     * @param string $token A token
     *
     * @return Profile A Profile instance
     */
    Method [ <user> public method loadProfile ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 98 - 101

      - Parameters [1] {
        Parameter #0 [ <required> $token ]
      }
    }

    /**
     * Saves a Profile.
     *
     * @param Profile $profile A Profile instance
     *
     * @return bool
     */
    Method [ <user> public method saveProfile ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 110 - 124

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Profiler\Profile $profile ]
      }
    }

    /**
     * Purges all data from the storage.
     */
    Method [ <user> public method purge ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 129 - 132
    }

    /**
     * Exports the current profiler data.
     *
     * @param Profile $profile A Profile instance
     *
     * @return string The exported data
     */
    Method [ <user> public method export ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 141 - 144

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\Profiler\Profile $profile ]
      }
    }

    /**
     * Imports data into the profiler storage.
     *
     * @param string $data A data string as exported by the export() method
     *
     * @return Profile A Profile instance
     */
    Method [ <user> public method import ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 153 - 164

      - Parameters [1] {
        Parameter #0 [ <required> $data ]
      }
    }

    /**
     * Finds profiler tokens for the given criteria.
     *
     * @param string $ip     The IP
     * @param string $url    The URL
     * @param string $limit  The maximum number of tokens to return
     * @param string $method The request method
     * @param string $start  The start date to search from
     * @param string $end    The end date to search to
     *
     * @return array An array of tokens
     *
     * @see http://php.net/manual/en/datetime.formats.php for the supported date/time formats
     */
    Method [ <user> public method find ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 180 - 183

      - Parameters [6] {
        Parameter #0 [ <required> $ip ]
        Parameter #1 [ <required> $url ]
        Parameter #2 [ <required> $limit ]
        Parameter #3 [ <required> $method ]
        Parameter #4 [ <required> $start ]
        Parameter #5 [ <required> $end ]
      }
    }

    /**
     * Collects data for the given Response.
     *
     * @param Request    $request   A Request instance
     * @param Response   $response  A Response instance
     * @param \Exception $exception An exception instance if the request threw one
     *
     * @return Profile|null A Profile instance or null if the profiler is disabled
     */
    Method [ <user> public method collect ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 194 - 216

      - Parameters [3] {
        Parameter #0 [ <required> Symfony\Component\HttpFoundation\Request $request ]
        Parameter #1 [ <required> Symfony\Component\HttpFoundation\Response $response ]
        Parameter #2 [ <optional> Exception or NULL $exception = NULL ]
      }
    }

    /**
     * Gets the Collectors associated with this profiler.
     *
     * @return array An array of collectors
     */
    Method [ <user> public method all ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 223 - 226
    }

    /**
     * Sets the Collectors associated with this profiler.
     *
     * @param DataCollectorInterface[] $collectors An array of collectors
     */
    Method [ <user> public method set ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 233 - 239

      - Parameters [1] {
        Parameter #0 [ <optional> array $collectors = Array ]
      }
    }

    /**
     * Adds a Collector.
     *
     * @param DataCollectorInterface $collector A DataCollectorInterface instance
     */
    Method [ <user> public method add ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 246 - 249

      - Parameters [1] {
        Parameter #0 [ <required> Symfony\Component\HttpKernel\DataCollector\DataCollectorInterface $collector ]
      }
    }

    /**
     * Returns true if a Collector for the given name exists.
     *
     * @param string $name A collector name
     *
     * @return bool
     */
    Method [ <user> public method has ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 258 - 261

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    /**
     * Gets a Collector by name.
     *
     * @param string $name A collector name
     *
     * @return DataCollectorInterface A DataCollectorInterface instance
     *
     * @throws \InvalidArgumentException if the collector does not exist
     */
    Method [ <user> public method get ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 272 - 279

      - Parameters [1] {
        Parameter #0 [ <required> $name ]
      }
    }

    Method [ <user> private method getTimestamp ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/HttpKernel/Profiler/Profiler.php 281 - 294

      - Parameters [1] {
        Parameter #0 [ <required> $value ]
      }
    }
  }
}
";}i:538;a:1:{s:46:"Symfony\Component\HttpKernel\Profiler\Profiler";s:46:"Symfony\Component\HttpKernel\Profiler\Profiler";}i:539;a:2:{s:4:"name";s:16:"SplObjectStorage";s:13:" ~ reflection";s:3201:"Class [ <internal:SPL> <iterateable> class SplObjectStorage implements Countable, Iterator, Traversable, Serializable, ArrayAccess ] {

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [0] {
  }

  - Methods [21] {
    Method [ <internal:SPL> public method attach ] {

      - Parameters [2] {
        Parameter #0 [ <required> $object ]
        Parameter #1 [ <optional> $inf ]
      }
    }

    Method [ <internal:SPL> public method detach ] {

      - Parameters [1] {
        Parameter #0 [ <required> $object ]
      }
    }

    Method [ <internal:SPL> public method contains ] {

      - Parameters [1] {
        Parameter #0 [ <required> $object ]
      }
    }

    Method [ <internal:SPL> public method addAll ] {

      - Parameters [1] {
        Parameter #0 [ <required> $object ]
      }
    }

    Method [ <internal:SPL> public method removeAll ] {

      - Parameters [1] {
        Parameter #0 [ <required> $object ]
      }
    }

    Method [ <internal:SPL> public method removeAllExcept ] {

      - Parameters [1] {
        Parameter #0 [ <required> $object ]
      }
    }

    Method [ <internal:SPL> public method getInfo ] {

      - Parameters [0] {
      }
    }

    Method [ <internal:SPL> public method setInfo ] {

      - Parameters [1] {
        Parameter #0 [ <required> $info ]
      }
    }

    Method [ <internal:SPL> public method getHash ] {

      - Parameters [1] {
        Parameter #0 [ <required> $object ]
      }
    }

    Method [ <internal:SPL, prototype Countable> public method count ] {

      - Parameters [0] {
      }
    }

    Method [ <internal:SPL, prototype Iterator> public method rewind ] {

      - Parameters [0] {
      }
    }

    Method [ <internal:SPL, prototype Iterator> public method valid ] {

      - Parameters [0] {
      }
    }

    Method [ <internal:SPL, prototype Iterator> public method key ] {

      - Parameters [0] {
      }
    }

    Method [ <internal:SPL, prototype Iterator> public method current ] {

      - Parameters [0] {
      }
    }

    Method [ <internal:SPL, prototype Iterator> public method next ] {

      - Parameters [0] {
      }
    }

    Method [ <internal:SPL, prototype Serializable> public method unserialize ] {

      - Parameters [1] {
        Parameter #0 [ <required> $serialized ]
      }
    }

    Method [ <internal:SPL, prototype Serializable> public method serialize ] {

      - Parameters [0] {
      }
    }

    Method [ <internal:SPL, prototype ArrayAccess> public method offsetExists ] {

      - Parameters [1] {
        Parameter #0 [ <required> $object ]
      }
    }

    Method [ <internal:SPL, prototype ArrayAccess> public method offsetSet ] {

      - Parameters [2] {
        Parameter #0 [ <required> $object ]
        Parameter #1 [ <optional> $inf ]
      }
    }

    Method [ <internal:SPL, prototype ArrayAccess> public method offsetUnset ] {

      - Parameters [1] {
        Parameter #0 [ <required> $object ]
      }
    }

    Method [ <internal:SPL, prototype ArrayAccess> public method offsetGet ] {

      - Parameters [1] {
        Parameter #0 [ <required> $object ]
      }
    }
  }
}
";}i:540;a:6:{s:11:"ArrayAccess";s:11:"ArrayAccess";s:12:"Serializable";s:12:"Serializable";s:11:"Traversable";s:11:"Traversable";s:8:"Iterator";s:8:"Iterator";s:9:"Countable";s:9:"Countable";s:16:"SplObjectStorage";s:16:"SplObjectStorage";}i:541;a:2:{s:4:"name";s:44:"Symfony\Component\VarDumper\Cloner\VarCloner";s:13:" ~ reflection";s:5617:"/**
 * @author Nicolas Grekas <p@tchwork.com>
 */
Class [ <user> class Symfony\Component\VarDumper\Cloner\VarCloner extends Symfony\Component\VarDumper\Cloner\AbstractCloner implements Symfony\Component\VarDumper\Cloner\ClonerInterface ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/VarDumper/Cloner/VarCloner.php 17-300

  - Constants [0] {
  }

  - Static properties [3] {
    Property [ private static $hashMask ]
    Property [ private static $hashOffset ]
    Property [ public static $defaultCasters ]
  }

  - Static methods [1] {
    Method [ <user> static private method initHashMask ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/VarDumper/Cloner/VarCloner.php 274 - 299
    }
  }

  - Properties [3] {
    Property [ <default> protected $maxItems ]
    Property [ <default> protected $maxString ]
    Property [ <default> protected $useExt ]
  }

  - Methods [9] {
    /**
     * {@inheritdoc}
     */
    Method [ <user, overwrites Symfony\Component\VarDumper\Cloner\AbstractCloner, prototype Symfony\Component\VarDumper\Cloner\AbstractCloner> protected method doClone ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/VarDumper/Cloner/VarCloner.php 25 - 272

      - Parameters [1] {
        Parameter #0 [ <required> $var ]
      }
    }

    /**
     * @param callable[]|null $casters A map of casters.
     *
     * @see addCasters
     */
    Method [ <user, inherits Symfony\Component\VarDumper\Cloner\AbstractCloner, ctor> public method __construct ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/VarDumper/Cloner/AbstractCloner.php 97 - 104

      - Parameters [1] {
        Parameter #0 [ <optional> array or NULL $casters = NULL ]
      }
    }

    /**
     * Adds casters for resources and objects.
     *
     * Maps resources or objects types to a callback.
     * Types are in the key, with a callable caster for value.
     * Resource types are to be prefixed with a `:`,
     * see e.g. static::$defaultCasters.
     *
     * @param callable[] $casters A map of casters.
     */
    Method [ <user, inherits Symfony\Component\VarDumper\Cloner\AbstractCloner> public method addCasters ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/VarDumper/Cloner/AbstractCloner.php 116 - 121

      - Parameters [1] {
        Parameter #0 [ <required> array $casters ]
      }
    }

    /**
     * Sets the maximum number of items to clone past the first level in nested structures.
     *
     * @param int $maxItems
     */
    Method [ <user, inherits Symfony\Component\VarDumper\Cloner\AbstractCloner> public method setMaxItems ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/VarDumper/Cloner/AbstractCloner.php 128 - 131

      - Parameters [1] {
        Parameter #0 [ <required> $maxItems ]
      }
    }

    /**
     * Sets the maximum cloned length for strings.
     *
     * @param int $maxString
     */
    Method [ <user, inherits Symfony\Component\VarDumper\Cloner\AbstractCloner> public method setMaxString ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/VarDumper/Cloner/AbstractCloner.php 138 - 141

      - Parameters [1] {
        Parameter #0 [ <required> $maxString ]
      }
    }

    /**
     * {@inheritdoc}
     */
    Method [ <user, inherits Symfony\Component\VarDumper\Cloner\AbstractCloner, prototype Symfony\Component\VarDumper\Cloner\ClonerInterface> public method cloneVar ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/VarDumper/Cloner/AbstractCloner.php 146 - 164

      - Parameters [1] {
        Parameter #0 [ <required> $var ]
      }
    }

    /**
     * Casts an object to an array representation.
     *
     * @param Stub $stub     The Stub for the casted object.
     * @param bool $isNested True if the object is nested in the dumped structure.
     *
     * @return array The object casted as array.
     */
    Method [ <user, inherits Symfony\Component\VarDumper\Cloner\AbstractCloner> protected method castObject ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/VarDumper/Cloner/AbstractCloner.php 183 - 227

      - Parameters [2] {
        Parameter #0 [ <required> Symfony\Component\VarDumper\Cloner\Stub $stub ]
        Parameter #1 [ <required> $isNested ]
      }
    }

    /**
     * Casts a resource to an array representation.
     *
     * @param Stub $stub     The Stub for the casted resource.
     * @param bool $isNested True if the object is nested in the dumped structure.
     *
     * @return array The resource casted as array.
     */
    Method [ <user, inherits Symfony\Component\VarDumper\Cloner\AbstractCloner> protected method castResource ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/VarDumper/Cloner/AbstractCloner.php 237 - 250

      - Parameters [2] {
        Parameter #0 [ <required> Symfony\Component\VarDumper\Cloner\Stub $stub ]
        Parameter #1 [ <required> $isNested ]
      }
    }

    /**
     * Special handling for errors: cloning must be fail-safe.
     *
     * @internal
     */
    Method [ <user, inherits Symfony\Component\VarDumper\Cloner\AbstractCloner> public method handleError ] {
      @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/VarDumper/Cloner/AbstractCloner.php 283 - 295

      - Parameters [5] {
        Parameter #0 [ <required> $type ]
        Parameter #1 [ <required> $msg ]
        Parameter #2 [ <required> $file ]
        Parameter #3 [ <required> $line ]
        Parameter #4 [ <required> $context ]
      }
    }
  }
}
";}i:542;a:3:{s:50:"Symfony\Component\VarDumper\Cloner\ClonerInterface";s:50:"Symfony\Component\VarDumper\Cloner\ClonerInterface";s:49:"Symfony\Component\VarDumper\Cloner\AbstractCloner";s:49:"Symfony\Component\VarDumper\Cloner\AbstractCloner";s:44:"Symfony\Component\VarDumper\Cloner\VarCloner";s:44:"Symfony\Component\VarDumper\Cloner\VarCloner";}i:543;a:3:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:70:"Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:124;s:8:"refCount";i:0;s:8:"position";i:564;}i:1;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:67:"Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:123;s:8:"refCount";i:0;s:8:"position";i:565;}i:2;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:70:"Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:88;s:8:"refCount";i:0;s:8:"position";i:566;}}i:544;a:1:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:87:"Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:119;s:8:"refCount";i:0;s:8:"position";i:567;}}i:545;a:1:{s:7:"default";s:32:"doctrine.dbal.default_connection";}i:546;a:1:{s:7:"default";s:35:"doctrine.orm.default_entity_manager";}i:547;a:4:{s:7:"queries";a:0:{}s:7:"enabled";b:1;s:5:"start";N;s:12:"currentQuery";i:0;}i:548;a:2:{i:0;O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:29:"Symfony\Bridge\Monolog\Logger";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:166;s:8:"refCount";i:14;s:8:"position";i:568;}i:1;s:4:"info";}i:549;a:2:{i:0;r:7562;i:1;s:4:"info";}i:550;a:2:{i:0;r:7562;i:1;s:6:"notice";}i:551;a:2:{i:0;r:7562;i:1;s:6:"notice";}i:552;a:2:{i:0;r:7562;i:1;s:6:"notice";}i:553;a:2:{i:0;r:7562;i:1;s:7:"warning";}i:554;a:2:{i:0;r:7562;i:1;s:7:"warning";}i:555;a:2:{i:0;r:7562;i:1;s:7:"warning";}i:556;a:2:{i:0;r:7562;i:1;s:7:"warning";}i:557;a:2:{i:0;r:7562;i:1;s:5:"error";}i:558;a:2:{i:0;r:7562;i:1;s:5:"error";}i:559;a:2:{i:0;r:7562;i:1;s:9:"emergency";}i:560;a:2:{i:0;r:7562;i:1;s:9:"emergency";}i:561;a:2:{i:0;r:7562;i:1;s:9:"emergency";}i:562;a:2:{i:0;r:7562;i:1;s:9:"emergency";}i:563;a:6:{s:47:" Symfony\Component\Debug\ExceptionHandler debug";b:1;s:49:" Symfony\Component\Debug\ExceptionHandler charset";s:5:"UTF-8";s:49:" Symfony\Component\Debug\ExceptionHandler handler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:569;}s:54:" Symfony\Component\Debug\ExceptionHandler caughtBuffer";N;s:54:" Symfony\Component\Debug\ExceptionHandler caughtLength";N;s:56:" Symfony\Component\Debug\ExceptionHandler fileLinkFormat";b:0;}i:564;a:2:{s:85:" Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter roleHierarchy";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:50:"Symfony\Component\Security\Core\Role\RoleHierarchy";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:117;s:8:"refCount";i:1;s:8:"position";i:570;}s:69:" Symfony\Component\Security\Core\Authorization\Voter\RoleVoter prefix";s:5:"ROLE_";}i:565;a:3:{s:87:" Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter expressionLanguage";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:64:"Symfony\Component\Security\Core\Authorization\ExpressionLanguage";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:118;s:8:"refCount";i:0;s:8:"position";i:571;}s:82:" Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter trustResolver";r:3373;s:82:" Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter roleHierarchy";r:7628;}i:566;a:1:{s:99:" Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter authenticationTrustResolver";r:3373;}i:567;a:1:{s:92:" Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider key";s:23:"5a5250c0970492.68176224";}i:568;a:4:{s:7:" * name";s:3:"php";s:11:" * handlers";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:7:"indexed";s:5:"value";i:3;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:572;}s:13:" * processors";a:0:{}s:24:" * microsecondTimestamps";b:1;}i:569;a:2:{i:0;r:1098;i:1;s:22:"terminateWithException";}i:570;a:2:{s:61:" Symfony\Component\Security\Core\Role\RoleHierarchy hierarchy";a:0:{}s:6:" * map";a:0:{}}i:571;a:5:{s:62:" Symfony\Component\ExpressionLanguage\ExpressionLanguage cache";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:65:"Symfony\Component\ExpressionLanguage\ParserCache\ArrayParserCache";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:99;s:8:"refCount";i:0;s:8:"position";i:573;}s:62:" Symfony\Component\ExpressionLanguage\ExpressionLanguage lexer";N;s:63:" Symfony\Component\ExpressionLanguage\ExpressionLanguage parser";N;s:65:" Symfony\Component\ExpressionLanguage\ExpressionLanguage compiler";N;s:12:" * functions";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:6;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:574;}}i:572;a:3:{i:0;r:2064;i:1;r:2072;i:2;r:2080;}i:573;a:1:{s:72:" Symfony\Component\ExpressionLanguage\ParserCache\ArrayParserCache cache";a:0:{}}i:574;a:6:{s:8:"constant";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:575;}s:12:"is_anonymous";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:576;}s:16:"is_authenticated";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:577;}s:22:"is_fully_authenticated";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:578;}s:14:"is_remember_me";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:579;}s:8:"has_role";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:5:"array";s:5:"class";s:5:"assoc";s:5:"value";i:2;s:3:"cut";i:0;s:6:"handle";i:0;s:8:"refCount";i:0;s:8:"position";i:580;}}i:575;a:2:{s:8:"compiler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:7:"Closure";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:100;s:8:"refCount";i:0;s:8:"position";i:581;}s:9:"evaluator";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:7:"Closure";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:103;s:8:"refCount";i:0;s:8:"position";i:582;}}i:576;a:2:{s:8:"compiler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:7:"Closure";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:101;s:8:"refCount";i:0;s:8:"position";i:583;}s:9:"evaluator";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:7:"Closure";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:98;s:8:"refCount";i:0;s:8:"position";i:584;}}i:577;a:2:{s:8:"compiler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:7:"Closure";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:96;s:8:"refCount";i:0;s:8:"position";i:585;}s:9:"evaluator";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:7:"Closure";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:95;s:8:"refCount";i:0;s:8:"position";i:586;}}i:578;a:2:{s:8:"compiler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:7:"Closure";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:93;s:8:"refCount";i:0;s:8:"position";i:587;}s:9:"evaluator";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:7:"Closure";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:92;s:8:"refCount";i:0;s:8:"position";i:588;}}i:579;a:2:{s:8:"compiler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:7:"Closure";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:90;s:8:"refCount";i:0;s:8:"position";i:589;}s:9:"evaluator";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:7:"Closure";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:89;s:8:"refCount";i:0;s:8:"position";i:590;}}i:580;a:2:{s:8:"compiler";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:7:"Closure";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:87;s:8:"refCount";i:0;s:8:"position";i:591;}s:9:"evaluator";O:39:"Symfony\Component\VarDumper\Cloner\Stub":7:{s:4:"type";s:6:"object";s:5:"class";s:7:"Closure";s:5:"value";N;s:3:"cut";i:0;s:6:"handle";i:86;s:8:"refCount";i:0;s:8:"position";i:592;}}i:581;a:1:{s:13:" ~ reflection";s:287:"Closure [ <user, prototype Closure> public method Symfony\Component\ExpressionLanguage\{closure} ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/ExpressionLanguage/ExpressionLanguage.php 127 - 129

  - Parameters [1] {
    Parameter #0 [ <required> $constant ]
  }
}
";}i:582;a:1:{s:13:" ~ reflection";s:333:"Closure [ <user, prototype Closure> public method Symfony\Component\ExpressionLanguage\{closure} ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/ExpressionLanguage/ExpressionLanguage.php 129 - 131

  - Parameters [2] {
    Parameter #0 [ <required> array $values ]
    Parameter #1 [ <required> $constant ]
  }
}
";}i:583;a:1:{s:13:" ~ reflection";s:243:"Closure [ <user, prototype Closure> public method Symfony\Component\Security\Core\Authorization\{closure} ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Authorization/ExpressionLanguageProvider.php 27 - 29
}
";}i:584;a:1:{s:13:" ~ reflection";s:318:"Closure [ <user, prototype Closure> public method Symfony\Component\Security\Core\Authorization\{closure} ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Authorization/ExpressionLanguageProvider.php 29 - 31

  - Parameters [1] {
    Parameter #0 [ <required> array $variables ]
  }
}
";}i:585;a:1:{s:13:" ~ reflection";s:243:"Closure [ <user, prototype Closure> public method Symfony\Component\Security\Core\Authorization\{closure} ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Authorization/ExpressionLanguageProvider.php 33 - 35
}
";}i:586;a:1:{s:13:" ~ reflection";s:318:"Closure [ <user, prototype Closure> public method Symfony\Component\Security\Core\Authorization\{closure} ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Authorization/ExpressionLanguageProvider.php 35 - 37

  - Parameters [1] {
    Parameter #0 [ <required> array $variables ]
  }
}
";}i:587;a:1:{s:13:" ~ reflection";s:243:"Closure [ <user, prototype Closure> public method Symfony\Component\Security\Core\Authorization\{closure} ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Authorization/ExpressionLanguageProvider.php 39 - 41
}
";}i:588;a:1:{s:13:" ~ reflection";s:318:"Closure [ <user, prototype Closure> public method Symfony\Component\Security\Core\Authorization\{closure} ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Authorization/ExpressionLanguageProvider.php 41 - 43

  - Parameters [1] {
    Parameter #0 [ <required> array $variables ]
  }
}
";}i:589;a:1:{s:13:" ~ reflection";s:243:"Closure [ <user, prototype Closure> public method Symfony\Component\Security\Core\Authorization\{closure} ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Authorization/ExpressionLanguageProvider.php 45 - 47
}
";}i:590;a:1:{s:13:" ~ reflection";s:318:"Closure [ <user, prototype Closure> public method Symfony\Component\Security\Core\Authorization\{closure} ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Authorization/ExpressionLanguageProvider.php 47 - 49

  - Parameters [1] {
    Parameter #0 [ <required> array $variables ]
  }
}
";}i:591;a:1:{s:13:" ~ reflection";s:307:"Closure [ <user, prototype Closure> public method Symfony\Component\Security\Core\Authorization\{closure} ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Authorization/ExpressionLanguageProvider.php 51 - 53

  - Parameters [1] {
    Parameter #0 [ <required> $role ]
  }
}
";}i:592;a:1:{s:13:" ~ reflection";s:356:"Closure [ <user, prototype Closure> public method Symfony\Component\Security\Core\Authorization\{closure} ] {
  @@ /var/www/html/vendor/symfony/symfony/src/Symfony/Component/Security/Core/Authorization/ExpressionLanguageProvider.php 53 - 55

  - Parameters [2] {
    Parameter #0 [ <required> array $variables ]
    Parameter #1 [ <required> $role ]
  }
}
";}}s:49:" Symfony\Component\VarDumper\Cloner\Data maxDepth";i:20;s:57:" Symfony\Component\VarDumper\Cloner\Data maxItemsPerDepth";i:-1;s:54:" Symfony\Component\VarDumper\Cloner\Data useRefHandles";i:-1;}s:4:"name";s:23:"UserAgentSubscriber.php";s:4:"file";s:65:"/var/www/html/src/AppBundle/EventListener/UserAgentSubscriber.php";s:4:"line";i:26;s:11:"fileExcerpt";b:0;}}}}s:2:"ip";s:10:"172.19.0.3";s:6:"method";s:3:"GET";s:3:"url";s:35:"http://web.site.docker/app_dev.php/";s:4:"time";i:1515351070;}